<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Inter', sans-serif;
        }
        
        .card-custom {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: none;
            margin-bottom: 2rem;
        }
        
        .stats-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 2rem;
            text-align: center;
            border-left: 4px solid #6366f1;
        }
        
        .stats-number {
            font-size: 2rem;
            font-weight: bold;
            color: #6366f1;
            margin-bottom: 0.5rem;
        }
        
        .stats-label {
            color: #6b7280;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .filter-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .btn-report {
            background: #6366f1;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-weight: 600;
            transition: background 0.3s;
        }
        
        .btn-report:hover {
            background: #5856eb;
            color: white;
        }
        
        .btn-download {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.9rem;
            margin: 0 0.25rem;
            transition: background 0.3s;
        }
        
        .btn-download:hover {
            background: #059669;
            color: white;
        }
        
        .chart-container {
            position: relative;
            height: 400px;
            margin: 2rem 0;
        }
        
        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
        }
        
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 2rem;
        }
        
        .report-section {
            display: none;
        }
        
        .quick-filter-btn {
            background: #f3f4f6;
            color: #374151;
            border: 1px solid #d1d5db;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            margin: 0 0.25rem 0.5rem 0;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .quick-filter-btn:hover,
        .quick-filter-btn.active {
            background: #6366f1;
            color: white;
            border-color: #6366f1;
        }
        
        .date-range-section {
            display: none;
            margin-top: 1rem;
        }
        
        .custom-days-section {
            display: none;
            margin-top: 1rem;
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/header') %>
    
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <h2 class="mb-4">
                    <i class="fas fa-chart-line text-primary"></i> Sales Report Dashboard
                </h2>
            </div>
        </div>
        
        <!-- Filter Section -->
        <div class="filter-section">
            <h5 class="mb-3">
                <i class="fas fa-filter"></i> Report Filters
            </h5>
            
            <!-- Quick Filter Buttons -->
            <div class="mb-3">
                <label class="form-label">Quick Filters:</label>
                <div>
                    <button class="quick-filter-btn" data-type="daily">Today</button>
                    <button class="quick-filter-btn" data-type="weekly">Last 7 Days</button>
                    <button class="quick-filter-btn" data-type="monthly">Last 30 Days</button>
                    <button class="quick-filter-btn" data-type="yearly">Last Year</button>
                    <button class="quick-filter-btn" data-type="custom">Custom Range</button>
                    <button class="quick-filter-btn" data-type="customDays">Custom Days</button>
                </div>
            </div>
            
            <!-- Custom Date Range -->
            <div class="date-range-section">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Start Date:</label>
                        <input type="date" class="form-control" id="startDate">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">End Date:</label>
                        <input type="date" class="form-control" id="endDate">
                    </div>
                </div>
            </div>
            
            <!-- Custom Days -->
            <div class="custom-days-section">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Number of Days:</label>
                        <input type="number" class="form-control" id="customDays" min="1" max="365" placeholder="Enter days">
                    </div>
                </div>
            </div>
            
            <div class="mt-3">
                <button class="btn btn-report" onclick="generateReport()">
                    <i class="fas fa-chart-bar"></i> Generate Report
                </button>
                <button class="btn btn-secondary ms-2" onclick="clearFilters()">
                    <i class="fas fa-times"></i> Clear Filters
                </button>
            </div>
        </div>
        
        <!-- Loading Spinner -->
        <div class="loading-spinner" id="loadingSpinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Generating report...</p>
        </div>
        
        <!-- Report Section -->
        <div class="report-section" id="reportSection">
            <!-- Summary Statistics -->
            <div class="row mb-4" id="summaryStats">
                <!-- Stats cards will be populated here -->
            </div>
            
            <!-- Download Buttons -->
            <div class="mb-3">
                <h5>Download Report:</h5>
                <button class="btn btn-download" onclick="downloadReport('pdf')">
                    <i class="fas fa-file-pdf"></i> Download PDF
                </button>
                <button class="btn btn-download" onclick="downloadReport('excel')">
                    <i class="fas fa-file-excel"></i> Download Excel
                </button>
            </div>
            
            <!-- Charts Section -->
            <div class="row">
                <div class="col-md-8">
                    <div class="card-custom">
                        <div class="card-header bg-transparent">
                            <h5 class="mb-0">
                                <i class="fas fa-chart-line text-info"></i> Sales Trend
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container">
                                <canvas id="salesChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card-custom">
                        <div class="card-header bg-transparent">
                            <h5 class="mb-0">
                                <i class="fas fa-tags text-warning"></i> Coupon Usage
                            </h5>
                        </div>
                        <div class="card-body">
                            <div id="couponUsageList">
                                <!-- Coupon usage will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Recent Orders Table -->
            <div class="card-custom">
                <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list text-success"></i> Recent Orders
                    </h5>
                    <div class="d-flex align-items-center">
                        <label class="me-2">Show:</label>
                        <select class="form-select form-select-sm" id="limitSelect" style="width: auto;">
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                        <span class="ms-2">entries</span>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="ordersTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Products</th>
                                    <th>Quantity</th>
                                    <th>Amount</th>
                                    <th>Coupon</th>
                                    <th>Discount</th>
                                    <th>Net Amount</th>
                                    <th>Payment</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Orders will be populated here -->
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination Controls -->
                    <div class="d-flex justify-content-between align-items-center p-3" id="paginationContainer" style="display: none !important;">
                        <div class="pagination-info">
                            <span id="paginationInfo">Showing 0 to 0 of 0 orders</span>
                        </div>
                        <nav aria-label="Orders pagination">
                            <ul class="pagination pagination-sm mb-0" id="paginationControls">
                                <!-- Pagination buttons will be populated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <%- include('../partials/admin/footer') %>

    <script>
        let currentReportData = null;
        let salesChart = null;
        let currentPage = 1;
        let currentLimit = 10;

        // Quick filter button handlers
        document.querySelectorAll('.quick-filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                // Remove active class from all buttons
                document.querySelectorAll('.quick-filter-btn').forEach(b => b.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');

                const type = this.dataset.type;

                // Show/hide relevant sections
                document.querySelector('.date-range-section').style.display = type === 'custom' ? 'block' : 'none';
                document.querySelector('.custom-days-section').style.display = type === 'customDays' ? 'block' : 'none';
            });
        });

        // Limit select change handler
        document.getElementById('limitSelect').addEventListener('change', function() {
            currentLimit = parseInt(this.value);
            currentPage = 1; // Reset to first page
            if (currentReportData) {
                generateReport(currentPage, currentLimit);
            }
        });

        // Generate report function
        async function generateReport(page = 1, limit = null) {
            const activeBtn = document.querySelector('.quick-filter-btn.active');
            if (!activeBtn) {
                Swal.fire('Error', 'Please select a report type', 'error');
                return;
            }

            const reportType = activeBtn.dataset.type;
            let params = new URLSearchParams({ 
                reportType,
                page: page,
                limit: limit || currentLimit
            });

            // Add additional parameters based on report type
            if (reportType === 'custom') {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

                if (!startDate || !endDate) {
                    Swal.fire('Error', 'Please select both start and end dates', 'error');
                    return;
                }

                params.append('startDate', startDate);
                params.append('endDate', endDate);
            } else if (reportType === 'customDays') {
                const customDays = document.getElementById('customDays').value;

                if (!customDays || customDays < 1) {
                    Swal.fire('Error', 'Please enter a valid number of days', 'error');
                    return;
                }

                params.append('customDays', customDays);
            }

            // Show loading spinner only for initial load
            if (page === 1) {
                document.getElementById('loadingSpinner').style.display = 'block';
                document.getElementById('reportSection').style.display = 'none';
            }

            try {
                const response = await fetch(`/admin/sales-report/data?${params}`);
                const data = await response.json();

                if (data.success) {
                    currentReportData = data.data;
                    currentPage = page;
                    displayReport(data.data);
                } else {
                    Swal.fire('Error', data.message || 'Failed to generate report', 'error');
                }
            } catch (error) {
                console.error('Error generating report:', error);
                Swal.fire('Error', 'Failed to generate report', 'error');
            } finally {
                if (page === 1) {
                    document.getElementById('loadingSpinner').style.display = 'none';
                }
            }
        }

        // Display report function
        function displayReport(data) {
            // Show report section
            document.getElementById('reportSection').style.display = 'block';

            // Update summary statistics (only on first page)
            if (currentPage === 1) {
                updateSummaryStats(data.summary);
                updateSalesChart(data.dailySales);
                updateCouponUsage(data.couponUsage);
            }

            // Update orders table and pagination
            updateOrdersTable(data.orders);
            updatePagination(data.pagination);
        }

        // Update summary statistics
        function updateSummaryStats(summary) {
            const statsContainer = document.getElementById('summaryStats');
            statsContainer.innerHTML = `
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">${summary.totalSalesCount}</div>
                        <div class="stats-label">Total Sales</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.totalOrderAmount.toFixed(0)}</div>
                        <div class="stats-label">Total Amount</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.totalDiscountAmount.toFixed(0)}</div>
                        <div class="stats-label">Total Discount</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.netRevenue.toFixed(0)}</div>
                        <div class="stats-label">Net Revenue</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.averageOrderValue.toFixed(0)}</div>
                        <div class="stats-label">Avg Order Value</div>
                    </div>
                </div>
            `;
        }

        // Update sales chart
        function updateSalesChart(dailySales) {
            const ctx = document.getElementById('salesChart').getContext('2d');

            if (salesChart) {
                salesChart.destroy();
            }

            const labels = dailySales.map(item => new Date(item.date).toLocaleDateString());
            const amounts = dailySales.map(item => item.amount);
            const counts = dailySales.map(item => item.count);

            salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Sales Amount (₹)',
                        data: amounts,
                        borderColor: '#6366f1',
                        backgroundColor: 'rgba(99, 102, 241, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y'
                    }, {
                        label: 'Order Count',
                        data: counts,
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Sales Amount (₹)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Order Count'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    }
                }
            });
        }

        // Update coupon usage
        function updateCouponUsage(couponUsage) {
            const container = document.getElementById('couponUsageList');

            if (couponUsage.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">No coupons used in this period</p>';
                return;
            }

            container.innerHTML = couponUsage.map(coupon => `
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                    <div>
                        <strong>${coupon.couponName}</strong>
                        <br>
                        <small class="text-muted">${coupon.count} uses</small>
                    </div>
                    <div class="text-end">
                        <span class="text-success">₹${coupon.totalDiscount.toFixed(0)}</span>
                    </div>
                </div>
            `).join('');
        }

        // Update orders table with new columns
        function updateOrdersTable(orders) {
            const tbody = document.querySelector('#ordersTable tbody');

            if (orders.length === 0) {
                tbody.innerHTML = '<tr><td colspan="10" class="text-center text-muted">No orders found</td></tr>';
                return;
            }

            tbody.innerHTML = orders.map(order => `
                <tr>
                    <td>#${order.orderId || order._id.slice(-6)}</td>
                    <td>${order.userId?.name || 'N/A'}</td>
                    <td title="${order.productNames || 'N/A'}">${(order.productNames || 'N/A').substring(0, 30)}${(order.productNames || '').length > 30 ? '...' : ''}</td>
                    <td>${order.totalQuantity || 0}</td>
                    <td>₹${(order.totalPrice || 0).toFixed(0)}</td>
                    <td>${order.couponCode || 'None'}</td>
                    <td>₹${(order.couponDiscount || 0).toFixed(0)}</td>
                    <td>₹${((order.totalPrice || 0) - (order.couponDiscount || 0)).toFixed(0)}</td>
                    <td>${order.paymentMethod || 'N/A'}</td>
                    <td>${new Date(order.createdOn).toLocaleDateString()}</td>
                </tr>
            `).join('');
        }

        // Update pagination
        function updatePagination(pagination) {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationInfo = document.getElementById('paginationInfo');
            const paginationControls = document.getElementById('paginationControls');

            if (!pagination || pagination.totalPages <= 1) {
                paginationContainer.style.display = 'none';
                return;
            }

            // Show pagination container
            paginationContainer.style.display = 'flex';

            // Update pagination info
            const startItem = ((pagination.currentPage - 1) * pagination.limit) + 1;
            const endItem = Math.min(pagination.currentPage * pagination.limit, pagination.totalOrders);
            paginationInfo.textContent = `Showing ${startItem} to ${endItem} of ${pagination.totalOrders} orders`;

            // Update pagination controls
            let paginationHTML = '';

            // Previous button
            if (pagination.hasPrevPage) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(${pagination.currentPage - 1}, ${pagination.limit}); return false;">
                        <i class="fas fa-chevron-left"></i> Previous
                    </a>
                </li>`;
            }

            // Page numbers
            const startPage = Math.max(1, pagination.currentPage - 2);
            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

            if (startPage > 1) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(1, ${pagination.limit}); return false;">1</a>
                </li>`;
                if (startPage > 2) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `<li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="generateReport(${i}, ${pagination.limit}); return false;">${i}</a>
                </li>`;
            }

            if (endPage < pagination.totalPages) {
                if (endPage < pagination.totalPages - 1) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(${pagination.totalPages}, ${pagination.limit}); return false;">${pagination.totalPages}</a>
                </li>`;
            }

            // Next button
            if (pagination.hasNextPage) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(${pagination.currentPage + 1}, ${pagination.limit}); return false;">
                        Next <i class="fas fa-chevron-right"></i>
                    </a>
                </li>`;
            }

            paginationControls.innerHTML = paginationHTML;
        }

        // Download report function
        function downloadReport(format) {
            if (!currentReportData) {
                Swal.fire('Error', 'Please generate a report first', 'error');
                return;
            }

            const activeBtn = document.querySelector('.quick-filter-btn.active');
            const reportType = activeBtn.dataset.type;
            let params = new URLSearchParams({ reportType });

            // Add additional parameters based on report type
            if (reportType === 'custom') {
                params.append('startDate', document.getElementById('startDate').value);
                params.append('endDate', document.getElementById('endDate').value);
            } else if (reportType === 'customDays') {
                params.append('customDays', document.getElementById('customDays').value);
            }

            const url = `/admin/sales-report/download/${format}?${params}`;
            window.open(url, '_blank');
        }

        // Clear filters function
        function clearFilters() {
            document.querySelectorAll('.quick-filter-btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            document.getElementById('customDays').value = '';
            document.getElementById('limitSelect').value = '10';
            document.querySelector('.date-range-section').style.display = 'none';
            document.querySelector('.custom-days-section').style.display = 'none';
            document.getElementById('reportSection').style.display = 'none';
            document.getElementById('paginationContainer').style.display = 'none';
            currentReportData = null;
            currentPage = 1;
            currentLimit = 10;
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Set default date range for custom filter
            const today = new Date();
            const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);

            document.getElementById('endDate').value = today.toISOString().split('T')[0];
            document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
        });
    </script>
</body>
</html>