<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet"/>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
  <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Breadcrumb Navigation Styles */
        .breadcrumb-nav {
            margin-bottom: 20px;
            padding: 0;
            background: transparent;
        }

        .breadcrumb {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            list-style: none;
            padding: 14px 24px;
            margin: 0;
            font-size: 14px;
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(15px);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15), 
                        0 2px 8px rgba(255, 255, 255, 0.1) inset;
        }

        .breadcrumb-item {
            display: flex;
            align-items: center;
        }

        .breadcrumb-item a {
            text-decoration: none;
            color: #ffffff;
            padding: 8px 14px;
            border-radius: 8px;
            transition: all 0.3s ease-in-out;
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .breadcrumb-item a:hover {
            color: #ffffff;
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
            text-decoration: none;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .breadcrumb-item a:focus {
            outline: 2px solid rgba(255, 255, 255, 0.7);
            outline-offset: 2px;
        }

        .breadcrumb-item.active {
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            padding: 8px 14px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .breadcrumb-separator {
            margin: 0 10px;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 400;
            font-size: 16px;
            user-select: none;
        }

        /* Icon styles */
        .breadcrumb-item i {
            font-size: 13px;
            margin-right: 4px;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .breadcrumb {
                font-size: 13px;
                padding: 10px 12px;
            }
            
            .breadcrumb-item a,
            .breadcrumb-item.active {
                padding: 3px 6px;
            }
            
            .breadcrumb-separator {
                margin: 0 6px;
            }
            
            .breadcrumb-item i {
                font-size: 12px;
            }
        }

        @media (max-width: 480px) {
            .breadcrumb {
                font-size: 12px;
                padding: 8px 10px;
            }
            
            .breadcrumb-separator {
                margin: 0 4px;
            }
        }

        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            .breadcrumb {
                background: rgba(255, 255, 255, 0.1);
                border-color: rgba(255, 255, 255, 0.15);
            }
            
            .breadcrumb-item a {
                color: rgba(255, 255, 255, 0.85);
            }
            
            .breadcrumb-item a:hover {
                color: #ffffff;
                background: rgba(255, 255, 255, 0.15);
            }
            
            .breadcrumb-item.active {
                color: rgba(255, 255, 255, 0.6);
            }
            
            .breadcrumb-separator {
                color: rgba(255, 255, 255, 0.5);
            }
        }

        /* Alternative style variations for gradient backgrounds */
        .breadcrumb-nav.glass .breadcrumb {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .breadcrumb-nav.minimal .breadcrumb {
            background: transparent;
            border: none;
            box-shadow: none;
            backdrop-filter: none;
            padding: 8px 0;
        }

        .breadcrumb-nav.minimal .breadcrumb-item a:hover {
            background: rgba(255, 255, 255, 0.15);
            text-decoration: none;
        }

        .breadcrumb-nav.solid .breadcrumb {
            background: rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: white;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            color: rgba(255,255,255,0.9);
            font-size: 1.1rem;
        }

        .form-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .form-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 30px;
            text-align: center;
        }

        .form-header h2 {
            color: white;
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .form-header p {
            color: rgba(255,255,255,0.9);
        }

        .form-body {
            padding: 40px;
        }

        .form-grid {
            display: grid;
            gap: 25px;
        }

        .form-group {
            position: relative;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
            font-size: 0.95rem;
        }
        .checkbox-group {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    padding: 5px 0;
}
.checkbox-group label {
    font-size: 14px;
}

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f9fafb;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-select {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 12px center;
            background-repeat: no-repeat;
            background-size: 16px;
            padding-right: 40px;
            appearance: none;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .textarea-control {
            min-height: 120px;
            resize: vertical;
        }

        .image-upload-section {
            background: #f8fafc;
            border-radius: 16px;
            padding: 30px;
            margin-top: 30px;
            border: 2px dashed #d1d5db;
            transition: all 0.3s ease;
        }

        .image-upload-section:hover {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .image-upload-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .image-upload-header h3 {
            color: #374151;
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .image-upload-header p {
            color: #6b7280;
            font-size: 0.9rem;
        }

        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 12px;
            min-height: 80px;
            align-items: center;
            justify-content: center;
        }

        .thumbnail {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease;
            background: white;
        }

        .thumbnail:hover {
            transform: scale(1.05);
        }

        .thumbnail img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            background: white !important; /* Force white background */
        }

        .remove-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            cursor: pointer;
            font-weight: bold;
        }

        .image-input-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .image-input-item {
            background: white;
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #e5e7eb;
        }

        .image-preview {
            width: 100%;
            height: 150px;
            background: #ffffff !important; /* Force white background */
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
            overflow: hidden;
            position: relative;
        }

        .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: cover;
            background: #ffffff !important; /* Force white background */
            display: block;
        }

        .image-preview.empty {
            border: 2px dashed #d1d5db;
            color: #9ca3af;
            background: #ffffff !important; /* Force white background even when empty */
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input {
            position: absolute;
            left: -9999px;
        }

        .file-input-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
            width: 100%;
        }

        .file-input-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(55, 60, 82, 0.4);
        }

        .image-cropper {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-top: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .image-cropper img {
            background: white !important; /* Force white background for cropper images */
            max-width: 100%;
            max-height: 200px;
            object-fit: contain;
        }

        /* Fix Cropper.js dark background issue */
        .cropper-container {
            background: white !important;
        }

        .cropper-canvas {
            background: white !important;
        }

        .cropper-modal {
            background: rgba(0, 0, 0, 0.5) !important; /* Semi-transparent overlay instead of full black */
        }

        .crop-button {
            background: #10b981;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            margin-top: 10px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .crop-button:hover {
            background: #059669;
        }

        .submit-section {
            margin-top: 40px;
            text-align: center;
            padding-top: 30px;
            border-top: 1px solid #e5e7eb;
        }

        .submit-button {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: none;
            padding: 16px 40px;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .submit-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(16, 185, 129, 0.4);
        }

        .submit-button:active {
            transform: translateY(0);
        }

        .error-message {
            color: #ef4444;
            font-size: 0.85rem;
            margin-top: 5px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }

        .loading .submit-button {
            background: #9ca3af;
        }

        /* Additional fixes for image backgrounds */
        canvas {
            background: white !important;
        }

        img[src*="blob:"], img[src*="data:"] {
            background: white !important;
        }

        /* Fix any potential transparent background issues */
     .thumbnail img,
.image-preview img,
.image-cropper img,
canvas,
img[src*="blob:"],
img[src*="data:"] {
    background-color: white !important;
    background-image: none !important;
}

        @media (max-width: 768px) {
            .form-body {
                padding: 20px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .image-input-group {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }

        /* Custom animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .form-container {
            animation: fadeInUp 0.6s ease-out;
        }

        .form-group {
            animation: fadeInUp 0.6s ease-out;
            animation-fill-mode: both;
        }

        .form-group:nth-child(1) { animation-delay: 0.1s; }
        .form-group:nth-child(2) { animation-delay: 0.2s; }
        .form-group:nth-child(3) { animation-delay: 0.3s; }
        .form-group:nth-child(4) { animation-delay: 0.4s; }
    </style>
</head>
<body>
    <div class="container">
        <nav class="breadcrumb-nav" aria-label="breadcrumb" style="margin-bottom: 20px;">
        <ol class="breadcrumb" style="display: flex; list-style: none; padding: 0; font-size: 14px;">
            <li class="breadcrumb-item">
                <a href="/admin/dashboard" style="text-decoration: none; color: #007bff;">
                    <i class="fas fa-home"></i> Dashboard
                </a>
            </li>
            <li class="breadcrumb-separator" style="margin: 0 5px;">/</li>
            <li class="breadcrumb-item">
                <a href="/admin/products" style="text-decoration: none; color: #007bff;">
                    Products
                </a>
            </li>
            <li class="breadcrumb-separator" style="margin: 0 5px;">/</li>
            <li class="breadcrumb-item active" style="color: #6c757d;">
                Add New Product
            </li>
        </ol>
    </nav>
        <div class="header">
            <h1><i class="fas fa-plus-circle"></i> Add New Product</h1>
            <p>Create and manage your product inventory with ease</p>
        </div>

        <div class="form-container">
            <div class="form-header">
                <h2>Product Information</h2>
                <p>Fill in the details below to add a new product to your store</p>
            </div>

            <div class="form-body">
                <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="product_name" class="form-label">
                                <i class="fas fa-box"></i> Product Name
                            </label>
                            <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-tag"></i> Brand
                            </label>
                            <select class="form-control form-select" name="brand">
                                <option value="">Select a brand</option>
                                <!-- Brand options would be populated here -->
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-align-left"></i> Full Description
                            </label>
                            <textarea placeholder="Describe your product in detail..." id="descriptionid" name="description" class="form-control textarea-control" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-dollar-sign"></i> Regular Price
                                </label>
                                <input placeholder="0.00" name="regularPrice" type="text" class="form-control">
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-percent"></i> Sale Price
                                </label>
                                <input placeholder="0.00" name="salePrice" type="text" class="form-control">
                                <div id="salePrice-error" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-cubes"></i> Quantity
                                </label>
                                <input placeholder="0" name="quantity" type="text" class="form-control">
                                <div id="quantity-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-palette"></i> Color
                                </label>
                                <input name="color" type="text" class="form-control" placeholder="Enter color">
                                <div id="color-error" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-list"></i> Category
                                </label>
                                <select class="form-control form-select" name="category">
                                    <option value="">Select category</option>
                                   
                                     <% if (typeof cat !== 'undefined') { %>
                                        <% for(let i = 0; i < cat.length; i++) { %>
                                            <option value="<%=cat[i].name%>"><%=cat[i].name%></option>
                                        <% } %>
                                    <% } %> 
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>

   <div class="form-group">
    <label class="form-label">
        <i class="fas fa-ruler-combined"></i> Available Sizes
    </label>
    <div class="checkbox-group">
        <label><input type="checkbox" name="sizes" value="6"> Size 6</label>
        <label><input type="checkbox" name="sizes" value="7"> Size 7</label>
        <label><input type="checkbox" name="sizes" value="8"> Size 8</label>
        <label><input type="checkbox" name="sizes" value="9"> Size 9</label>
        <label><input type="checkbox" name="sizes" value="10"> Size 10</label>
    </div>
    <div id="sizes-error" class="error-message"></div>
</div>

                    <div class="image-upload-section">
                        <div class="image-upload-header">
                            <h3><i class="fas fa-images"></i> Product Images</h3>
                            <p>Upload up to 4 high-quality images of your product</p>
                        </div>

                        <div class="thumbnails-container" id="addedImagesContainer">
                            <p style="color: #b9bec7; font-style: italic;">No images selected</p>
                        </div>

                        <div class="image-input-group">
                            <div class="image-input-item">
                                <div class="image-preview empty" id="preview1">
                                    <i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>
                                </div>
                                <div class="file-input-wrapper">
                                    <input class="file-input" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event); viewImage(event, 1);">
                                    <label for="input1" class="file-input-button">
                                        <i class="fas fa-upload"></i> Choose Image 1
                                    </label>
                                </div>
                                <div id="cropperContainer1" class="image-cropper" style="display:none;">
                                    <img src="" id="croppedImg1" alt="">
                                    <button type="button" id="saveButton1" class="crop-button">
                                        <i class="fas fa-crop"></i> Crop & Save
                                    </button>
                                </div>
                            </div>

                            <div class="image-input-item">
                                <div class="image-preview empty" id="preview2">
                                    <i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>
                                </div>
                                <div class="file-input-wrapper">
                                    <input class="file-input" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event); viewImage(event, 2);">
                                    <label for="input2" class="file-input-button">
                                        <i class="fas fa-upload"></i> Choose Image 2
                                    </label>
                                </div>
                                <div id="cropperContainer2" class="image-cropper" style="display:none;">
                                    <img src="" id="croppedImg2" alt="">
                                    <button type="button" id="saveButton2" class="crop-button">
                                        <i class="fas fa-crop"></i> Crop & Save
                                    </button>
                                </div>
                            </div>

                            <div class="image-input-item">
                                <div class="image-preview empty" id="preview3">
                                    <i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>
                                </div>
                                <div class="file-input-wrapper">
                                    <input class="file-input" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event); viewImage(event, 3);">
                                    <label for="input3" class="file-input-button">
                                        <i class="fas fa-upload"></i> Choose Image 3
                                    </label>
                                </div>
                                <div id="cropperContainer3" class="image-cropper" style="display:none;">
                                    <img src="" id="croppedImg3" alt="">
                                    <button type="button" id="saveButton3" class="crop-button">
                                        <i class="fas fa-crop"></i> Crop & Save
                                    </button>
                                </div>
                            </div>

                            <!-- <div class="image-input-item">
                                <div class="image-preview empty" id="preview4">
                                    <i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>
                                </div>
                                <div class="file-input-wrapper">
                                    <input class="file-input" type="file" name="images" id="input4" accept="image/png, image/jpeg, image/jpg" onchange="viewImage4(event); viewImage(event, 4);">
                                    <label for="input4" class="file-input-button">
                                        <i class="fas fa-upload"></i> Choose Image 4
                                    </label>
                                </div>
                                <div id="cropperContainer4" class="image-cropper" style="display:none;">
                                    <img src="" id="croppedImg4" alt="">
                                    <button type="button" id="saveButton4" class="crop-button">
                                        <i class="fas fa-crop"></i> Crop & Save
                                    </button>
                                </div>
                            </div> -->
                        </div>
                        <div id="images-error" class="error-message"></div>
                    </div>

                    <div class="submit-section">
                        <button class="submit-button" type="button" onclick="validateAndSubmit()">
                            <i class="fas fa-rocket"></i> Publish Product
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>

const sizes = document.querySelectorAll('input[name="sizes"]:checked');
if (sizes.length === 0) {
    displayErrorMessage('sizes-error', 'Please select at least one size.');
    isValid = false;
}     
        const croppers = {};
        
        async function validateAndSubmit() {
            if (validateForm()) {
                // Show loading state
                document.body.classList.add('loading');
                
                // Show loading SweetAlert
                Swal.fire({
                    title: 'Publishing Product...',
                    text: 'Please wait while we add your product to the store',
                    icon: 'info',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    // Submit the form
                    const form = document.getElementById('productForm');
                    const formData = new FormData(form);
                    
                    const response = await fetch('/admin/addProducts', {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();

                    if (response.ok) {
                        // Success
                        await Swal.fire({
                            title: 'Success!',
                            text: 'Product has been added successfully to your store',
                            icon: 'success',
                            confirmButtonText: 'Great!',
                            confirmButtonColor: '#10b981',
                            timer: 3000,
                            timerProgressBar: true
                        });

                          window.location.href = '/admin/products';
                        // Reset form or redirect
                        // form.reset();
                        // clearErrorMessages();
                        // resetImagePreviews();
                        
                      
                        
                    } else {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to add product');
                    }
                } catch (error) {
                    console.log(error);
                    // Error
                    Swal.fire({
                        title: 'Oops!',
                        text: error.message || 'Something went wrong while adding the product',
                        icon: 'error',
                        confirmButtonText: 'Try Again',
                        confirmButtonColor: '#ef4444'
                    });
                } finally {
                    // Remove loading state
                    document.body.classList.remove('loading');
                }
            }
        }

        // Preview image functions
        function viewImage1(event) {
            updateImagePreview(event, 1);
        }

        function viewImage2(event) {
            updateImagePreview(event, 2);
        }

        function viewImage3(event) {
            updateImagePreview(event, 3);
        }

        function viewImage4(event) {
            updateImagePreview(event, 4);
        }

        function updateImagePreview(event, index) {
            const preview = document.getElementById(`preview${index}`);
            if (event.target.files && event.target.files[0]) {
                const file = event.target.files[0];
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.innerHTML = `<img src="${e.target.result}" alt="Preview ${index}">`;
                    preview.classList.remove('empty');
                };
                reader.readAsDataURL(file);
            }
        }

        // Initialize Cropper
        function viewImage(event, index) {
            let input = event.target;
            if (!input.files || !input.files[0]) return;

            let reader = new FileReader();
            reader.onload = function () {
                let image = document.getElementById("croppedImg" + index);
                image.src = reader.result;

                // Destroy existing Cropper if any
                if (croppers[index]) {
                    croppers[index].destroy();
                }

                // Initialize new Cropper
                croppers[index] = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true,
                    fillColor: '#ffffff'
                });

                // Show cropper container
                let cropperContainer = document.querySelector("#cropperContainer" + index);
                cropperContainer.style.display = 'block';

                // Handle save button
                let saveButton = document.querySelector("#saveButton" + index);
                saveButton.addEventListener("click", function () {
                    let croppedCanvas = croppers[index].getCroppedCanvas({
                        fillColor: '#ffffff'
                    });
                    
                    let timestamp = new Date().getTime();
                    let fileName = `cropped-img-${timestamp}-${index}.png`;

                    croppedCanvas.toBlob(blob => {
                        let input = document.getElementById('input' + index);
                        let imgFile = new File([blob], fileName, blob);
                        let fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files;

                        // Update thumbnails
                        handleFileSelect({ target: input });

                        // Update preview
                        const preview = document.getElementById(`preview${index}`);
                        preview.innerHTML = `<img src="${croppedCanvas.toDataURL()}" alt="Cropped ${index}">`;

                        // Hide and clean up
                        cropperContainer.style.display = 'none';
                        croppers[index].destroy();
                        delete croppers[index];

                        // Success feedback
                        Swal.fire({
                            title: 'Image Cropped!',
                            text: 'Your image has been cropped successfully',
                            icon: 'success',
                            timer: 1500,
                            showConfirmButton: false,
                            toast: true,
                            position: 'top-end'
                        });
                    }, 'image/jpeg');
                }, { once: true });
            };
            reader.readAsDataURL(input.files[0]);
        }

        // Handle thumbnails
        const selectedImages = [];
        ['input1', 'input2', 'input3', 'input4'].forEach(id => {
            document.getElementById(id).addEventListener("change", handleFileSelect);
        });

        function handleFileSelect(event) {
            const addedImagesContainer = document.getElementById("addedImagesContainer");
            const files = event.target.files;

            if (files.length > 0) {
                // Clear the "no images" message
                addedImagesContainer.innerHTML = "";
                
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    if (!selectedImages.some(img => img.name === file.name)) {
                        selectedImages.push(file);
                    }

                    const thumbnail = document.createElement("div");
                    thumbnail.classList.add("thumbnail");

                    const img = document.createElement("img");
                    img.src = URL.createObjectURL(file);
                    img.alt = "thumbnail";

                    const removeIcon = document.createElement("span");
                    removeIcon.classList.add("remove-icon");
                    removeIcon.innerHTML = "×";
                    removeIcon.addEventListener("click", function () {
                        const index = selectedImages.findIndex(img => img.name === file.name);
                        if (index !== -1) {
                            selectedImages.splice(index, 1);
                        }
                        thumbnail.remove();
                        
                        // Show "no images" message if no images left
                        if (selectedImages.length === 0) {
                            addedImagesContainer.innerHTML = '<p style="color: #fcfcfc; font-style: italic;">No images selected</p>';
                        }
                    });

                    thumbnail.appendChild(img);
                    thumbnail.appendChild(removeIcon);
                    addedImagesContainer.appendChild(thumbnail);
                }
            }
        }

        function resetImagePreviews() {
            for (let i = 1; i <= 4; i++) {
                const preview = document.getElementById(`preview${i}`);
                preview.innerHTML = `<i class="fas fa-camera" style="font-size: 2rem; color: #fcfcfc;"></i>`;
                preview.classList.add('empty');
            }
            
            const addedImagesContainer = document.getElementById("addedImagesContainer");
            addedImagesContainer.innerHTML = '<p style="color: #fcfcfc; font-style: italic;">No images selected</p>';
            
            selectedImages.length = 0;
        }

        // Form validation
        function validateForm() {
            clearErrorMessages();
            const name = document.getElementsByName('productName')[0].value;
            const description = document.getElementById('descriptionid').value;
            const brand = document.getElementsByName('brand')[0].value;
            const price = document.getElementsByName('regularPrice')[0].value;
            const salePrice = document.getElementsByName('salePrice')[0].value;
            const color = document.getElementsByName('color')[0].value;
            const category = document.getElementsByName('category')[0].value;
            const images = document.getElementById('input1');
            const quantity = document.getElementsByName('quantity')[0].value;
            let isValid = true;

            if (!name || name.trim() === "") {
                displayErrorMessage('productName-error', 'Please enter a product name.');
                isValid = false;
            } else if (!/^[a-zA-Z0-9\s]+$/.test(name.trim())) {
                displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
                isValid = false;
            }

            if (!description || description.trim() === "") {
                displayErrorMessage('description-error', 'Please enter a product description.');
                isValid = false;
            } else if (!/^[a-zA-Z0-9\s.,'"’“”\-()\/:!&?—]+$/.test(description.trim())) {
                displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
                isValid = false;
            }

            if (!quantity || parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }

            if (!price || !/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (!salePrice || !/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (parseFloat(price) <= parseFloat(salePrice)) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                isValid = false;
            }

            if (!color || color.trim() === "") {
                displayErrorMessage('color-error', 'Please enter a color.');
                isValid = false;
            }

            if (!category || category.trim() === "") {
                displayErrorMessage('category-error', 'Please select a category.');
                isValid = false;
            }

            if (!images.files || images.files.length === 0 || images.files.length<3 ) {
                displayErrorMessage("images-error", 'Please select at least three image.');
                isValid = false;
            }

            // Show validation result with SweetAlert
            if (!isValid) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Please fix the errors in the form before submitting.',
                    icon: 'warning',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#f59e0b'
                });
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            var errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;
                errorElement.style.display = "block";
            }
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                if (element) element.innerText = '';
            });
        }

        // Add some interactive effects
        document.addEventListener('DOMContentLoaded', function() {
            // Add focus effects to form controls
            const formControls = document.querySelectorAll('.form-control');
            formControls.forEach(control => {
                control.addEventListener('focus', function() {
                    this.parentElement.classList.add('focused');
                });
                
                control.addEventListener('blur', function() {
                    this.parentElement.classList.remove('focused');
                });
            });

            // Add hover effects to image upload areas
            const imageInputItems = document.querySelectorAll('.image-input-item');
            imageInputItems.forEach(item => {
                item.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.boxShadow = '0 8px 16px rgba(255, 255, 255)';
                });
                
                item.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = '0 4px 6px rgba(255, 255, 255)';
                });
            });
        });

        // Success message for when images are uploaded
        function showImageUploadSuccess(count) {
            Swal.fire({
                title: 'Images Uploaded!',
                text: `${count} image(s) uploaded successfully`,
                icon: 'success',
                timer: 1500,
                showConfirmButton: false,
                toast: true,
                position: 'top-end'
            });
        }

        // Add drag and drop functionality
        const imageUploadSection = document.querySelector('.image-upload-section');
        
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            imageUploadSection.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            imageUploadSection.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            imageUploadSection.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            imageUploadSection.style.borderColor = '#667eea';
            imageUploadSection.style.backgroundColor = '#f0f4ff';
        }

        function unhighlight(e) {
            imageUploadSection.style.borderColor = '#d1d5db';
            imageUploadSection.style.backgroundColor = '#f8fafc';
        }

        imageUploadSection.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            
            if (files.length > 0) {
                // Find the first empty input field
                for (let i = 1; i <= 4; i++) {
                    const input = document.getElementById(`input${i}`);
                    if (!input.files || input.files.length === 0) {
                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(files[0]);
                        input.files = dataTransfer.files;
                        
                        // Trigger the change event
                        const event = new Event('change', { bubbles: true });
                        input.dispatchEvent(event);
                        
                        showImageUploadSuccess(1);
                        break;
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
</body>
</html>