<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - 1NOTONE</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
 <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Ancizar+Serif:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        .checkout-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 2rem;
        }

        .checkout-main {
            background: white;
            border-radius: 10px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .checkout-sidebar {
            background: white;
            border-radius: 10px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            height: fit-content;
            position: sticky;
            top: 2rem;
        }

        .section-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: 1.5rem;
            color: #333;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 0.5rem;
        }

        .cart-review {
            margin-bottom: 2rem;
        }

        .cart-item {
            display: flex;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid #e5e7eb;
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .item-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .item-specs {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 0.25rem;
        }

        .item-price {
            font-weight: 600;
            color: #ef4444;
        }

        .address-section {
            margin-bottom: 2rem;
        }

        .address-grid {
            display: grid;
            gap: 1rem;
        }

        .address-card {
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            padding: 1rem;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            background: white;
        }

        .address-card:hover {
            border-color: #6366f1;
            box-shadow: 0 2px 8px rgba(99, 102, 241, 0.15);
        }

        .address-card.selected {
            border-color: #6366f1;
            background: #ffffff;
            color: rgb(0, 0, 0);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }

        .address-card.selected .address-type {
            color: rgba(0, 0, 0, 0.9);
        }

        .address-card.selected .address-details {
            color: rgb(0, 0, 0);
            font-size: 15px;
            font-weight: 800px;
        }

        .add-address-section {
            margin-top: 1rem;
            text-align: center;
        }

        .add-address-btn {
            background: #6366f1;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .add-address-btn:hover {
            background: #f3f3f3;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }

        .address-card input[type="radio"] {
            display: none;
        }

        .address-type {
            font-weight: 600;
            color: #4c51bf;
        }

        .address-details {
            font-size: 0.875rem;
            color: #718096;
            margin-top: 0.25rem;
        }

        .payment-section {
            margin-bottom: 2rem;
        }

        .payment-options {
            display: grid;
            gap: 1rem;
        }

        .payment-option {
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            padding: 1rem;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            background: white;
            position: relative;
        }

        .payment-option:hover {
            border-color: #6366f1;
            box-shadow: 0 2px 8px rgba(99, 102, 241, 0.15);
        }

        .payment-option.selected {
            border-color: #6366f1;
            background: #6366f1;
            color: white;
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }

        .payment-option.selected .payment-icon {
            color: white;
        }

        .payment-option.selected label {
            color: white;
        }

        .payment-option.selected .wallet-balance {
            color: rgba(255, 255, 255, 0.9);
        }

        .payment-option input[type="radio"],
        .payment-option input[type="button"] {
            display: none;
        }

        .payment-icon {
            margin-right: 0.75rem;
            font-size: 1.25rem;
            color: #6366f1;
        }

        .payment-disabled {
            opacity: 0.6;
            cursor: not-allowed !important;
            background-color: #f9fafb;
        }

        .payment-disabled:hover {
            border-color: #e5e7eb !important;
            transform: none !important;
            box-shadow: none !important;
        }

        .cod-restriction-message {
            font-size: 0.8rem;
            color: #dc2626;
            margin-top: 0.5rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .cod-restriction-message::before {
            content: "⚠️";
            font-size: 0.9rem;
        }

        .wallet-balance {
            font-size: 0.875rem;
            color: #718096;
            margin-top: 0.25rem;
        }

        .insufficient-balance {
            color: #e53e3e;
            font-weight: 500;
        }

        .order-summary {
            border: 1px solid #e2e8f0;
            border-radius: 16px;
            padding: 1.5rem;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            color: #4a5568;
        }

        .summary-row:last-child {
            margin-bottom: 0;
            padding-top: 0.75rem;
            border-top: 1px solid #e5e7eb;
            font-weight: bold;
            font-size: 1.2rem;
            color: #ef4444;
        }

        .place-order-btn {
            width: 100%;
            background: #6366f1;
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
            margin-top: 1.5rem;
        }

        .place-order-btn:hover {
            background: #5856eb;
        }

        .place-order-btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }

        .error-message {
            color: #e53e3e;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 1rem;
        }

        .spinner {
            border: 3px solid #e2e8f0;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 0.5rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Coupon Section Styles */
        .coupon-section {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
            border: 1px solid #e2e8f0;
            border-radius: 16px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            backdrop-filter: blur(10px);
        }

        .coupon-input-group {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .coupon-input {
            flex: 1;
            padding: 0.75rem;
            border: 1px solid #cbd5e0;
            border-radius: 10px;
            font-size: 0.9rem;
            text-transform: uppercase;
            background: rgba(255, 255, 255, 0.8);
        }

        .coupon-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .coupon-btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
            font-size: 0.9rem;
        }

        .apply-coupon-btn {
            background: #6366f1;
            color: white;
        }

        .apply-coupon-btn:hover {
            background: #5856eb;
        }

        .remove-coupon-btn {
            background: #ef4444;
            color: white;
            flex-shrink: 0;
            margin-left: 1rem;
        }

        .remove-coupon-btn:hover {
            background: #dc2626;
        }

        .coupon-btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }

        .view-coupons-btn {
            background: #6366f1;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: background 0.3s;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .view-coupons-btn:hover {
            background: #5856eb;
        }

        /* Available Coupons Modal Styles */
        .coupons-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .coupons-modal-content {
            background: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        .coupons-modal-header {
            background: #6366f1;
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .coupons-modal-header h3 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .close-modal {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background 0.3s ease;
        }

        .close-modal:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .coupons-modal-body {
            padding: 20px;
            max-height: 60vh;
            overflow-y: auto;
        }

        .coupon-item {
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            transition: all 0.3s ease;
            cursor: pointer;
            background: rgba(255, 255, 255, 0.8);
        }

        .coupon-item:hover {
            border-color: #6366f1;
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.15);
            transform: translateY(-2px);
        }

        .coupon-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .coupon-code-display {
            font-family: 'Courier New', monospace;
            background: #f3f4f6;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
            color: #374151;
            font-size: 0.9rem;
        }

        .coupon-discount {
            background: #6366f1;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .coupon-details {
            color: #718096;
            font-size: 0.85rem;
            line-height: 1.4;
        }

        .coupon-details strong {
            color: #4a5568;
        }

        .empty-coupons {
            text-align: center;
            padding: 40px 20px;
            color: #718096;
        }

        .empty-coupons i {
            font-size: 3rem;
            margin-bottom: 16px;
            color: #cbd5e0;
        }

        .loading-coupons {
            text-align: center;
            padding: 40px 20px;
            color: #718096;
        }

        .loading-spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #6366f1;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 16px;
        }

        .applied-coupon {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border: 2px solid #0ea5e9;
            border-radius: 12px;
            padding: 1.25rem;
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(14, 165, 233, 0.15);
        }

        .applied-coupon::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #0ea5e9, #06b6d4, #0ea5e9);
            background-size: 200% 100%;
            animation: shimmer 2s linear infinite;
        }

        @keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }

        .applied-coupon-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .applied-coupon-code {
            font-weight: 700;
            color: #0369a1;
            text-transform: uppercase;
            font-size: 0.95rem;
            letter-spacing: 0.5px;
        }

        .applied-coupon-discount {
            color: #0c4a6e;
            font-weight: 600;
            font-size: 0.9rem;
            background: rgba(14, 165, 233, 0.1);
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
        }

        .applied-coupon .remove-coupon-btn {
            width: 100%;
            margin-left: 0;
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .summary-row.discount {
             font-family: "Ancizar Serif", serif;
  font-optical-sizing: auto;
  font-weight:600;
  font-style: normal;
  color: #00b386; /* matching your green */
  display: flex;
  justify-content: space-between;
        }

        .summary-row.original {
            text-decoration: line-through;
            color: #6b7280;
            font-size: 0.9rem;
        }

        /* Responsive layout for applied coupon */
        @media (max-width: 768px) {
            .applied-coupon {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }

            .applied-coupon-info {
                justify-content: center;
            }

            .remove-coupon-btn {
                margin-left: 0;
                align-self: center;
                width: auto;
            }
        }

        @media (max-width: 768px) {
            .checkout-container {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
            
            .checkout-sidebar {
                position: static;
            }
        }
    </style>
</head>
<body>
    <%- include("../partials/user/header") %>

    <div class="checkout-container">
        <div class="checkout-main">
            <!-- Cart Review Section -->
            <div class="cart-review">
                <h2 class="section-title">
                    <i class="fas fa-shopping-cart"></i> Order Review
                </h2>
                <% cartItems.forEach(item => { %>
                    <div class="cart-item">
                        <% if (item.productId.productImage && item.productId.productImage.length > 0) { %>
                            <img src="/uploads/product-images/<%= item.productId.productImage[0] %>" 
                                 alt="<%= item.productId.productName %>" 
                                 class="item-image">
                        <% } else { %>
                            <div class="item-image" style="background: #f3f4f6; display: flex; align-items: center; justify-content: center;">
                                <i class="fas fa-image text-muted"></i>
                            </div>
                        <% } %>
                        <div class="item-details">
                            <div class="item-name"><%= item.productId.productName %></div>
                            <div class="item-specs">
                                Size: <%= item.size %> | Qty: <%= item.quantity %>
                            </div>
                            <div class="item-price">
                                <% 
                                    let variant = null;
                                    if (item.productId && item.productId.variant && item.size) {
                                        variant = item.productId.variant.find(v => v.size == item.size);
                                    }
                                    let productOffer = item.productId.productOffer || 0;
                                    let categoryOffer = (item.productId.category && item.productId.category.categoryOffer) || 0;
                                    let bestOffer = Math.max(productOffer, categoryOffer);
                                    let variantPrice = variant && typeof variant.varientPrice === 'number' ? variant.varientPrice : (typeof item.itemPrice === 'number' ? item.itemPrice : item.price);
                                    let displayPrice = bestOffer > 0 ? (variantPrice - (variantPrice * bestOffer / 100)) : variantPrice;
                                    const itemTotal = displayPrice * item.quantity;
                                %>
                                <div style="color:#6b7280; font-size:0.875rem; margin-bottom:0.25rem;">
                                    Price: ₹<%= Math.round(displayPrice).toLocaleString('en-IN') %>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- Delivery Address Section -->
            <div class="address-section">
                <h2 class="section-title">
                    <i class="fas fa-map-marker-alt"></i> Delivery Address
                </h2>
                <% if (addresses.length > 0) { %>
                    <div class="address-grid">
                        <% addresses.forEach((address, index) => { %>
                            <div class="address-card" onclick="selectAddress('<%= address._id %>')">
                                <input type="radio" name="address" value="<%= address._id %>"
                                       id="address-<%= index %>" <%= address.isDefault ? 'checked' : '' %>>
                                <label for="address-<%= index %>">
                                    <div class="address-type"><%= address.addressType %></div>
                                    <div class="address-details">
                                        <%= address.name %><br>
                                        <%= address.landmark %>, <%= address.city %><br>
                                        <%= address.state %> - <%= address.pincode %><br>
                                        Phone: <%= address.phone %>
                                    </div>
                                </label>
                            </div>
                        <% }) %>
                    </div>
                    <div class="add-address-section">
                        <button type="button" class="add-address-btn" onclick="addNewAddress()">
                            <i class="fas fa-plus"></i> Add New Address
                        </button>
                    </div>
                <% } else { %>
                    <p>No addresses found. <a style="color: #059669; text-decoration: none;" href="/address">Add an address</a> to continue.</p>
                <% } %>
                <div id="address-error" class="error-message"></div>
            </div>

            <!-- Payment Method Section -->
            <div class="payment-section">
                <h2 class="section-title">
                    <i class="fas fa-credit-card"></i> Payment Method
                </h2>
                <div class="payment-options">
                    <div class="payment-option <% if (isCODDisabled) { %>payment-disabled<% } %>" onclick="selectPayment('COD')" <% if (isCODDisabled) { %>title="COD is available only for orders up to ₹4000"<% } %>>
                        <input type="radio" name="payment" value="COD" id="payment-cod" <% if (!isCODDisabled) { %>checked<% } %> <% if (isCODDisabled) { %>disabled<% } %>>
                        <i class="fas fa-money-bill-wave payment-icon"></i>
                        <label for="payment-cod">
                            Cash on Delivery
                            <% if (isCODDisabled) { %>
                                <div class="cod-restriction-message">
                                    COD is available only for orders up to ₹4000
                                </div>
                            <% } %>
                        </label>
                    </div>
                    <div class="payment-option" onclick="selectPayment('ONLINE')">
                        <input type="radio" name="payment" value="ONLINE" id="payment-online">
                        <i class="fas fa-credit-card payment-icon"></i>
                        <label for="payment-online">Online Payment</label>
                    </div>
                    <div class="payment-option <% if ((user.wallet || 0) < totalAmount) { %>payment-disabled<% } %>" onclick="selectPayment('WALLET')" <% if ((user.wallet || 0) < totalAmount) { %>title="Insufficient wallet balance"<% } %>>
                        <input type="button" name="payment" value="WALLET" id="payment-wallet" <% if ((user.wallet || 0) < totalAmount) { %>disabled<% } %>>
                        <i class="fas fa-wallet payment-icon"></i>
                        <label for="payment-wallet">
                            Wallet Payment
                            <div class="wallet-balance">
                                Balance: ₹<%=  Math.round((user.wallet || 0)).toLocaleString('en-IN') %>
                                <% if ((user.wallet || 0) < totalAmount) { %>
                                    <span class="insufficient-balance">(Insufficient)</span>
                                <% } %>
                            </div>
                        </label>
                    </div>
                </div>
                <div id="payment-error" class="error-message"></div>
            </div>
        </div>

        <!-- Order Summary Sidebar -->
        <div class="checkout-sidebar">
            <!-- Coupon Section -->
            <div class="coupon-section">
                <h4 style="margin-bottom: 1rem; color: #374151;">
                    <i class="fas fa-ticket-alt"></i> Apply Coupon
                </h4>

                <% if (appliedCoupon) { %>
                    <!-- Applied Coupon Display -->
                    <div class="applied-coupon">
                        <div class="applied-coupon-info">
                            <i class="fas fa-check-circle" style="color: #10b981;"></i>
                            <span class="applied-coupon-code"><%= appliedCoupon.couponCode %></span>
                           
                        </div>
                        <button class="coupon-btn remove-coupon-btn" onclick="removeCoupon()">
                            <i class="fas fa-times"></i> Remove
                        </button>
                    </div>
                <% } else { %>
                    <!-- Coupon Input -->
                    <div class="coupon-input-group">
                        <input type="text"
                               id="coupon-code"
                               class="coupon-input"
                               placeholder="Enter coupon code"
                               maxlength="20">
                        <button class="coupon-btn apply-coupon-btn" onclick="applyCoupon()">
                            Apply
                        </button>
                    </div>

                    <!-- View Available Coupons Button -->
                    <div style="text-align: center; margin-top: 0.5rem;">
                        <button class="view-coupons-btn" onclick="showAvailableCoupons()">
                            <i class="fas fa-eye"></i> View Available Coupons
                        </button>
                    </div>
                <% } %>
            </div>

            <h3 class="section-title">Order Summary</h3>
            <div class="order-summary">
                <!-- Individual Product Breakdown -->
                <div style="margin-bottom: 1rem; padding-bottom: 1rem; border-bottom: 1px solid #e5e7eb;">
                    <h4 style="font-size: 0.9rem; color: #6b7280; margin-bottom: 0.75rem; text-transform: uppercase; letter-spacing: 0.5px;">Item Details</h4>
                    <% 
                        let summarySubtotal = 0;
                        cartItems.forEach(item => {
                            let variant = null;
                            if (item.productId && item.productId.variant && item.size) {
                                variant = item.productId.variant.find(v => v.size == item.size);
                            }
                            let productOffer = item.productId.productOffer || 0;
                            let categoryOffer = (item.productId.category && item.productId.category.categoryOffer) || 0;
                            let bestOffer = Math.max(productOffer, categoryOffer);
                            let variantPrice = variant && typeof variant.varientPrice === 'number' ? variant.varientPrice : (typeof item.itemPrice === 'number' ? item.itemPrice : item.price);
                            let displayPrice = bestOffer > 0 ? (variantPrice - (variantPrice * bestOffer / 100)) : variantPrice;
                            let itemTotal = displayPrice * item.quantity;
                            summarySubtotal += itemTotal;
                    %>
                        <div style="display: flex; align-items: center; margin-bottom: 0.5rem; padding: 0.5rem 0; gap: 0.75rem;">
                            <!-- Product Image -->
                            <div style="flex-shrink: 0;">
                                <% if (item.productId.productImage && item.productId.productImage.length > 0) { %>
                                    <img src="/uploads/product-images/<%= item.productId.productImage[0] %>" 
                                         alt="<%= item.productId.productName %>" 
                                         style="width: 40px; height: 40px; object-fit: cover; border-radius: 6px; border: 1px solid #e5e7eb;">
                                <% } else { %>
                                    <div style="width: 40px; height: 40px; background: #f3f4f6; border-radius: 6px; border: 1px solid #e5e7eb; display: flex; align-items: center; justify-content: center;">
                                        <i class="fas fa-image" style="color: #9ca3af; font-size: 0.75rem;"></i>
                                    </div>
                                <% } %>
                            </div>
                            
                            <!-- Product Details -->
                            <div style="flex: 1; min-width: 0;">
                                <div style="font-size: 0.85rem; font-weight: 500; color: #374151; margin-bottom: 0.25rem; line-height: 1.2;">
                                    <%= item.productId.productName.length > 20 ? item.productId.productName.substring(0, 20) + '...' : item.productId.productName %>
                                </div>
                                <div style="font-size: 0.75rem; color: #6b7280;">
                                    ₹<%= Math.round(displayPrice).toLocaleString('en-IN') %> × <%= item.quantity %>
                                </div>
                            </div>
                            
                            <!-- Product Total -->
                            <div style="font-weight: 600; color: #ef4444; font-size: 0.85rem; flex-shrink: 0;">
                                ₹<%= Math.round(itemTotal).toLocaleString('en-IN') %>
                            </div>
                        </div>
                    <% }) %>
                </div>

                <div class="summary-row">
                    <span>Subtotal (<%= cartItems.length %> items)</span>
                    <span>₹<%= Math.round(summarySubtotal).toLocaleString('en-IN') %></span>
                </div>
                <div class="summary-row">
                    <span>Shipping</span>
                    <span><%= shippingCost === 0 ? 'FREE' : '₹' + shippingCost.toLocaleString('en-IN') %></span>
                </div>
                
                <% if (appliedCoupon && couponDiscount > 0) { %>
                    <div class="summary-row original">
                        <span>Original Total</span>
                        <span>₹<%= Math.round(originalAmount).toLocaleString('en-IN') %></span>
                    </div>
                    <div class="summary-row discount">
                        <span>Coupon Discount (<%= appliedCoupon.couponCode %>)</span>
                        <span>-₹<%= Math.round(couponDiscount).toLocaleString('en-IN') %></span>
                    </div>
                <% } %>

                <div class="summary-row" style="border-top: 2px solid #e5e7eb; padding-top: 1rem; font-weight: 700; font-size: 1.1rem;">
                    <span>Final Total</span>
                    <span>₹<%= Math.round(totalAmount).toLocaleString('en-IN') %></span>
                </div>
            </div>
            
            <button class="place-order-btn" onclick="placeOrder()" id="place-order-btn">
                Place Order
            </button>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Processing your order...</p>
            </div>
        </div>
    </div>

    <script>
        let selectedAddress = '<%= addresses.find(addr => addr.isDefault)?._id || "" %>';
        let selectedPayment = 'COD';

        // Coupon Management Functions
        async function applyCoupon() {
            const couponCode = document.getElementById('coupon-code').value.trim();

            if (!couponCode) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Please enter a coupon code',
                    icon: 'error',
                    timer: 2000,
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            try {
                const response = await fetch('/apply-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        couponCode: couponCode,
                        cartTotal:  <%= originalAmount || totalAmount %>
                    })
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: result.message,
                        icon: 'success',
                        timer: 2000,
                        confirmButtonColor: '#10b981'
                    }).then(() => {
                        // Reload page to show updated prices
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message,
                        icon: 'error',
                        timer: 3000,
                        confirmButtonColor: '#dc3545'
                    });
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to apply coupon. Please try again.',
                    icon: 'error',
                    timer: 2000,
                    confirmButtonColor: '#dc3545'
                });
            }
        }

        async function removeCoupon() {
            try {
                const response = await fetch('/remove-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: 'Removed!',
                        text: result.message,
                        icon: 'success',
                        timer: 2000,
                        confirmButtonColor: '#10b981'
                    }).then(() => {
                        // Reload page to show updated prices
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message,
                        icon: 'error',
                        timer: 2000,
                        confirmButtonColor: '#dc3545'
                    });
                }
            } catch (error) {
                console.error('Error removing coupon:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to remove coupon. Please try again.',
                    icon: 'error',
                    timer: 2000,
                    confirmButtonColor: '#dc3545'
                });
            }
        }

        // Available Coupons Modal Functions
        async function showAvailableCoupons() {
            const modal = document.getElementById('couponsModal');
            const modalBody = document.getElementById('couponsModalBody');

            // Show modal with loading state
            modal.style.display = 'block';
            modalBody.innerHTML = `
                <div class="loading-coupons">
                    <div class="loading-spinner"></div>
                    <p>Loading available coupons...</p>
                </div>
            `;

            try {
                const response = await fetch('/get-available-coupons', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success && result.coupons.length > 0) {
                    let couponsHTML = '';
                    result.coupons.forEach(coupon => {
                        couponsHTML += `
                            <div class="coupon-item" onclick="selectCouponFromModal('${coupon.name}')">
                                <div class="coupon-item-header">
                                    <span class="coupon-code-display">${coupon.name}</span>
                                    <span class="coupon-discount">${coupon.displayText || (coupon.discountType === 'percentage' ? coupon.offerPrice + '% OFF' : '₹' + coupon.offerPrice.toLocaleString('en-IN') + ' OFF')}</span>
                                </div>
                                <div class="coupon-details">
                                    <strong>Minimum Order:</strong> ₹${coupon.minimumPrice.toLocaleString('en-IN')}<br>
                                    <strong>Valid Until:</strong> ${new Date(coupon.expireOn).toLocaleDateString('en-IN')}<br>
                                    <small style="color: #10b981;"><i class="fas fa-hand-pointer"></i> Click to apply this coupon</small>
                                </div>
                            </div>
                        `;
                    });
                    modalBody.innerHTML = couponsHTML;
                } else {
                    modalBody.innerHTML = `
                        <div class="empty-coupons">
                            <i class="fas fa-ticket-alt"></i>
                            <h4>No Available Coupons</h4>
                            <p>There are no active coupons available for your current order.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error fetching coupons:', error);
                modalBody.innerHTML = `
                    <div class="empty-coupons">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h4>Error Loading Coupons</h4>
                        <p>Failed to load available coupons. Please try again.</p>
                    </div>
                `;
            }
        }

        function closeCouponsModal() {
            document.getElementById('couponsModal').style.display = 'none';
        }

        function selectCouponFromModal(couponCode) {
            document.getElementById('coupon-code').value = couponCode;
            closeCouponsModal();
            applyCoupon();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('couponsModal');
            if (event.target === modal) {
                closeCouponsModal();
            }
        }

        // Allow Enter key to apply coupon
        document.addEventListener('DOMContentLoaded', function() {
            const couponInput = document.getElementById('coupon-code');
            if (couponInput) {
                couponInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        applyCoupon();
                    }
                });
            }
        });

        function selectAddress(addressId) {
            selectedAddress = addressId;
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
            document.getElementById('address-error').textContent = '';
        }

        function selectPayment(paymentMethod) {
            // Check if payment method is disabled
            if (event.currentTarget.classList.contains('payment-disabled')) {
                // Show appropriate error message
                if (paymentMethod === 'COD') {
                    Swal.fire({
                        title: 'COD Not Available',
                        text: 'COD is available only for orders up to ₹4000. Please choose online payment or wallet payment.',
                        icon: 'warning',
                        confirmButtonColor: '#f59e0b'
                    });
                } else if (paymentMethod === 'WALLET') {
                    Swal.fire({
                        title: 'Insufficient Balance',
                        text: 'Your wallet balance is insufficient for this order. Please choose online payment or add money to your wallet.',
                        icon: 'warning',
                        confirmButtonColor: '#f59e0b'
                    });
                }
                return; // Don't allow selection of disabled payment methods
            }

            selectedPayment = paymentMethod;
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
            document.getElementById('payment-error').textContent = '';
        }

        async function placeOrder() {
            // Validate selections
            if (!selectedAddress) {
                document.getElementById('address-error').textContent = 'Please select a delivery address';
                return;
            }

            if (!selectedPayment) {
                document.getElementById('payment-error').textContent = 'Please select a payment method';
                return;
            }

            // Get order details for confirmation
            const totalAmount = '₹<%= totalAmount.toLocaleString("en-IN") %>';
            const paymentMethodText = selectedPayment === 'COD' ? 'Cash on Delivery' :
                                     selectedPayment === 'WALLET' ? 'Wallet Payment' :
                                     selectedPayment === 'ONLINE' ? 'Online Payment' : selectedPayment;
            const itemCount = <%= cartItems.length %>;

            // Show SweetAlert confirmation dialog
            const result = await Swal.fire({
                title: 'Confirm Your Order',
                html: `
                    <div style="text-align: left; padding: 10px;">
                        <p style="margin-bottom: 10px;"><strong>Order Total:</strong> ${totalAmount}</p>
                        <p style="margin-bottom: 10px;"><strong>Items:</strong> ${itemCount} item${itemCount > 1 ? 's' : ''}</p>
                        <p style="margin-bottom: 10px;"><strong>Payment Method:</strong> ${paymentMethodText}</p>
                        <hr style="margin: 15px 0;">
                        <p style="color: #666; font-size: 14px;">Are you sure you want to place this order?</p>
                    </div>
                `,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Place Order!',
                cancelButtonText: 'Cancel',
                width: 450
            });

            // If user cancels, return early
            if (!result.isConfirmed) {
                return;
            }

            // Show loading
            document.getElementById('place-order-btn').disabled = true;
            document.getElementById('loading').style.display = 'block';

            try {
                // Handle different payment methods
                if (selectedPayment === 'ONLINE') {
                    // Create Razorpay order
                    const razorpayResponse = await fetch('/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            addressId: selectedAddress,
                            totalAmount: <%= totalAmount %>
                        })
                    });

                    const razorpayResult = await razorpayResponse.json();

                    if (razorpayResult.success) {
                        // Hide loading for Razorpay modal
                        document.getElementById('loading').style.display = 'none';
                        document.getElementById('place-order-btn').disabled = false;

                        // Initialize Razorpay payment
                        const options = {
                            key: razorpayResult.key,
                            amount: razorpayResult.amount,
                            currency: razorpayResult.currency,
                            name: '1NOTONE',
                            description: 'Order Payment',
                            order_id: razorpayResult.orderId,
                            handler: async function (response) {
                                // Payment successful, verify on server
                                try {
                                    // Show loading again
                                    document.getElementById('place-order-btn').disabled = true;
                                    document.getElementById('loading').style.display = 'block';

                                    const verifyResponse = await fetch('/verify-payment', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify({
                                            razorpay_order_id: response.razorpay_order_id,
                                            razorpay_payment_id: response.razorpay_payment_id,
                                            razorpay_signature: response.razorpay_signature,
                                            addressId: selectedAddress
                                        })
                                    });

                                    const verifyResult = await verifyResponse.json();

                                    if (verifyResult.success) {
                                        // Redirect to success page
                                        window.location.href = verifyResult.redirectUrl;
                                    } else {
                                        throw new Error(verifyResult.message || 'Payment verification failed');
                                    }
                                } catch (error) {
                                    console.error('Payment verification error:', error);
                                    window.location.href = `/payment-failure?error=${encodeURIComponent(error.message)}`;
                                }
                            },
                            modal: {
                                ondismiss: function() {
                                    // Payment cancelled by user
                                    document.getElementById('place-order-btn').disabled = false;
                                    document.getElementById('loading').style.display = 'none';
                                }
                            },
                            theme: {
                                color: '#3399cc'
                            }
                        };

                        const rzp = new Razorpay(options);

                        rzp.on('payment.failed', async function (response) {
                            // Payment failed
                            console.error('Payment failed:', response.error);
                            
                            try {
                                // Call backend to handle payment failure and create failed order record
                                const failureResponse = await fetch('/handle-payment-failure', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        error: response.error,
                                        orderId: razorpayResult.orderId
                                    })
                                });

                                const failureResult = await failureResponse.json();
                                
                                // Redirect to payment failure page with the URL from backend
                                if (failureResult.redirectUrl) {
                                    window.location.href = failureResult.redirectUrl;
                                } else {
                                    // Fallback to basic failure page
                                    window.location.href = `/payment-failure?error=${encodeURIComponent(response.error.description)}`;
                                }
                            } catch (error) {
                                console.error('Error handling payment failure:', error);
                                // Fallback to basic failure page
                                window.location.href = `/payment-failure?error=${encodeURIComponent(response.error.description)}`;
                            }
                        });

                        rzp.open();
                        return; // Exit here for online payment
                    } else {
                        throw new Error(razorpayResult.message || 'Failed to create payment order');
                    }
                }

                // Handle COD and Wallet payments (existing logic)
                const response = await fetch('/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        addressId: selectedAddress,
                        paymentMethod: selectedPayment
                    })
                });

                const apiResult = await response.json();

                if (apiResult.success) {
                    // Show success message with order details
                    await Swal.fire({
                        title: 'Order Placed Successfully!',
                        html: `
                            <div style="text-align: center; padding: 10px;">
                                <div style="font-size: 48px; color: #28a745; margin-bottom: 15px;">✅</div>
                                <p style="margin-bottom: 10px; font-size: 16px;"><strong>Order ID:</strong> ${apiResult.orderId}</p>
                                <p style="margin-bottom: 10px;"><strong>Total Amount:</strong> ${totalAmount}</p>
                                <p style="margin-bottom: 15px; color: #666;">Thank you for your order! You will receive a confirmation email shortly.</p>
                                <hr style="margin: 15px 0;">
                                <p style="color: #666; font-size: 14px;">Redirecting to your profile...</p>
                            </div>
                        `,
                        icon: 'success',
                        confirmButtonText: 'View Orders',
                        confirmButtonColor: '#28a745',
                        timer: 3000,
                        timerProgressBar: true
                    });

                    // Redirect to profile page or order confirmation
                    if (apiResult.redirectUrl) {
                        window.location.href = apiResult.redirectUrl;
                    } else {
                        window.location.href = '/profile';
                    }
                } else {
                    // Show error message
                    await Swal.fire({
                        title: 'Order Failed',
                        text: apiResult.message || 'Failed to place order. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'Try Again',
                        confirmButtonColor: '#d33'
                    });
                }
            } catch (error) {
                console.error('Error placing order:', error);
                // Show error message for network/server errors
                await Swal.fire({
                    title: 'Connection Error',
                    text: 'Failed to place order due to a network error. Please check your connection and try again.',
                    icon: 'error',
                    confirmButtonText: 'Try Again',
                    confirmButtonColor: '#d33'
                });
            } finally {
                // Hide loading
                document.getElementById('place-order-btn').disabled = false;
                document.getElementById('loading').style.display = 'none';
            }
        }

        // Function to handle adding new address
        function addNewAddress() {
            // Navigate to address management page
            window.location.href = '/address';
        }

        // Initialize selected states
        document.addEventListener('DOMContentLoaded', function() {
            // Set default address as selected
            const defaultAddress = document.querySelector('input[name="address"]:checked');
            if (defaultAddress) {
                defaultAddress.closest('.address-card').classList.add('selected');
            }

            // Set default payment as selected - choose first available payment method
            const isCODDisabled = <%= isCODDisabled ? 'true' : 'false' %>;
            if (isCODDisabled) {
                // If COD is disabled, select online payment as default
                selectedPayment = 'ONLINE';
                const onlinePaymentOption = document.querySelector('.payment-option[onclick="selectPayment(\'ONLINE\')"]');
                if (onlinePaymentOption) {
                    onlinePaymentOption.classList.add('selected');
                }
            } else {
                // If COD is available, select it as default
                selectedPayment = 'COD';
                const codPaymentOption = document.querySelector('.payment-option[onclick="selectPayment(\'COD\')"]');
                if (codPaymentOption) {
                    codPaymentOption.classList.add('selected');
                }
            }
        });
    </script>

    <!-- Available Coupons Modal -->
    <div id="couponsModal" class="coupons-modal">
        <div class="coupons-modal-content">
            <div class="coupons-modal-header">
                <h3><i class="fas fa-ticket-alt"></i> Available Coupons</h3>
                <button class="close-modal" onclick="closeCouponsModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="coupons-modal-body" id="couponsModalBody">
                <div class="loading-coupons">
                    <div class="loading-spinner"></div>
                    <p>Loading available coupons...</p>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
