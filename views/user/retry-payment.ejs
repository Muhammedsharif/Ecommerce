<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Retry Payment - 1NOTONE</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333;
            padding: 2rem;
        }

        .retry-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            padding: 3rem;
            max-width: 800px;
            width: 100%;
            box-shadow: 0 32px 64px rgba(0, 0, 0, 0.2);
            animation: slideUp 0.8s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .retry-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .retry-icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .retry-icon i {
            font-size: 2rem;
            color: white;
        }

        .retry-title {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .retry-subtitle {
            color: #6b7280;
            font-size: 1.1rem;
            margin-bottom: 1rem;
        }

        .order-info {
            background: #f8fafc;
            border-radius: 16px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid #e2e8f0;
        }

        .order-info h3 {
            color: #374151;
            margin-bottom: 1rem;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .order-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .detail-item {
            background: white;
            padding: 1rem;
            border-radius: 12px;
            border: 1px solid #e5e7eb;
        }

        .detail-label {
            font-size: 0.8rem;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.5rem;
        }

        .detail-value {
            font-weight: 600;
            color: #374151;
            font-size: 1.1rem;
        }

        .order-items {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid #e5e7eb;
        }

        .items-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid #f3f4f6;
        }

        .item:last-child {
            border-bottom: none;
        }

        .item-image {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            background: #f3f4f6;
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.25rem;
        }

        .item-specs {
            font-size: 0.875rem;
            color: #6b7280;
        }

        .item-price {
            font-weight: 600;
            color: #667eea;
            font-size: 1rem;
        }

        .payment-summary {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border-radius: 16px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(102, 126, 234, 0.2);
        }

        .summary-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid rgba(102, 126, 234, 0.1);
        }

        .summary-row:last-child {
            border-bottom: none;
            font-weight: 700;
            font-size: 1.2rem;
            color: #667eea;
            padding-top: 1rem;
            border-top: 2px solid rgba(102, 126, 234, 0.2);
        }

        .summary-label {
            color: #6b7280;
        }

        .summary-value {
            font-weight: 600;
            color: #374151;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
            cursor: pointer;
            min-width: 150px;
            justify-content: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
            box-shadow: 0 10px 30px rgba(107, 114, 128, 0.3);
        }

        .btn-secondary:hover {
            background: #4b5563;
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 15px 40px rgba(107, 114, 128, 0.4);
            color: white;
            text-decoration: none;
        }

        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .loading-content {
            background: white;
            padding: 2rem;
            border-radius: 16px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        .spinner {
            border: 4px solid #f3f4f6;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #10b981;
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(16, 185, 129, 0.3);
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            font-weight: 500;
            min-width: 300px;
        }

        .toast-notification.toast-error {
            background: #ef4444;
            box-shadow: 0 10px 30px rgba(239, 68, 68, 0.3);
        }

        .toast-notification.show {
            transform: translateX(0);
        }

        .toast-content {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .retry-container {
                padding: 2rem;
            }

            .retry-title {
                font-size: 1.5rem;
            }

            .order-details {
                grid-template-columns: 1fr;
            }

            .action-buttons {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
   

    <div class="retry-container">
        <div class="retry-header">
            <div class="retry-icon">
                <i class="fas fa-redo"></i>
            </div>
            <h1 class="retry-title">Retry Payment</h1>
            <p class="retry-subtitle">Complete your payment to confirm your order</p>
        </div>

        <div class="order-info">
            <h3><i class="fas fa-receipt"></i> Order Information</h3>
            <div class="order-details">
                <div class="detail-item">
                    <div class="detail-label">Order ID</div>
                    <div class="detail-value">#<%= order.orderId %></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Order Date</div>
                    <div class="detail-value"><%= new Date(order.createdOn).toLocaleDateString() %></div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Payment Status</div>
                    <div class="detail-value" style="color: #ef4444;">Failed</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Total Amount</div>
                    <div class="detail-value" style="color: #667eea;">₹<%= Math.round(order.finalAmount).toLocaleString() %></div>
                </div>
            </div>
        </div>

        <div class="order-items">
            <h3 class="items-title"><i class="fas fa-box"></i> Order Items</h3>
            <% order.orderedItems.forEach(item => { %>
                <div class="item">
                    <img src="/uploads/product-images/<%= item.product.productImage[0] %>"
                         alt="<%= item.product.productName %>"
                         class="item-image"
                         onerror="this.src='/uploads/placeholder.jpg'">
                    <div class="item-details">
                        <div class="item-name"><%= item.product.productName %></div>
                        <div class="item-specs">
                            Quantity: <%= item.quantity %> | Size: <%= item.size || 'N/A' %>
                        </div>
                    </div>
                    <div class="item-price">
                        <%
                            // Calculate the final item price including coupon discount
                            let basePrice = item.price;
                            let finalItemPrice = basePrice;
                            
                            // If coupon was applied, calculate per-item discount
                            if (order.couponApplied && order.couponDiscount > 0) {
                                // Calculate total number of products in the order (considering quantities)
                                const totalProductCount = order.orderedItems.reduce((sum, orderItem) => {
                                    return sum + orderItem.quantity;
                                }, 0);
                                
                                // Distribute coupon discount equally among all products
                                const couponDiscountPerItem = order.couponDiscount / totalProductCount;
                                
                                // Apply coupon discount per item to get the final display price
                                finalItemPrice = Math.max(0, Math.round(basePrice - couponDiscountPerItem));
                            }
                        %>
                        ₹<%= finalItemPrice.toLocaleString() %>
                    </div>
                </div>
            <% }) %>
        </div>

        <div class="payment-summary">
            <h3 class="summary-title"><i class="fas fa-calculator"></i> Payment Summary</h3>
            <div class="summary-row">
                <span class="summary-label">Subtotal</span>
                <span class="summary-value">₹<%= Math.round(order.totalPrice).toLocaleString() %></span>
            </div>
            <div class="summary-row">
                <span class="summary-label">Shipping</span>
                <span class="summary-value">Free</span>
            </div>
            <% if (order.couponDiscount && order.couponDiscount > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Coupon Discount<% if (order.couponCode) { %> (<%= order.couponCode %>)<% } %></span>
                    <span class="summary-value" style="color: #10b981;">-₹<%= order.couponDiscount.toLocaleString() %></span>
                </div>
            <% } %>
            <div class="summary-row">
                <span class="summary-label">Total Amount</span>
                <span class="summary-value">₹<%= Math.round(order.finalAmount).toLocaleString() %></span>
            </div>
        </div>

        <div class="action-buttons">
            <button id="payNowBtn" class="btn btn-primary">
                <i class="fas fa-credit-card"></i>
                Pay Now
            </button>
            <a href="/order-details/<%= order.orderId %>" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i>
                Back to Order
            </a>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-content">
            <div class="spinner"></div>
            <p>Processing your payment...</p>
        </div>
    </div>

    <script>
        // Toast notification function
        function showToast(message, type = 'success') {
            const existingToasts = document.querySelectorAll('.toast-notification');
            existingToasts.forEach(toast => toast.remove());

            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('show');
            }, 100);

            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Show loading overlay
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        // Hide loading overlay
        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Pay Now functionality
        document.getElementById('payNowBtn').addEventListener('click', async function() {
            try {
                const payButton = this;
                payButton.disabled = true;
                payButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

                showLoading();

                // Get retry payment order details
                const response = await fetch('/retry-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        failedOrderId: '<%= order.orderId %>'
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message || 'Failed to initiate payment');
                }

                hideLoading();

                // Initialize Razorpay payment
                const options = {
                    key: result.key,
                    amount: result.amount,
                    currency: result.currency,
                    name: '1NOTONE',
                    description: 'Retry Payment for Order #<%= order.orderId %>',
                    order_id: result.orderId,
                    handler: async function(response) {
                        try {
                            showLoading();

                            // Verify payment
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    addressId: result.addressId
                                })
                            });

                            const verifyResult = await verifyResponse.json();
                            console.log('Payment verification result:', verifyResult);

                            hideLoading();

                            if (verifyResult.success) {
                                console.log('Payment verified successfully, redirecting to:', verifyResult.redirectUrl);
                                // Show success message and redirect
                                showToast('Payment successful! Redirecting...', 'success');
                                setTimeout(() => {
                                    if (verifyResult.redirectUrl) {
                                        window.location.href = verifyResult.redirectUrl;
                                    } else {
                                        console.error('No redirect URL provided in response');
                                        window.location.href = `/payment-success/${verifyResult.orderId}`;
                                    }
                                }, 1500);
                            } else {
                                console.error('Payment verification failed:', verifyResult.message);
                                throw new Error(verifyResult.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            hideLoading();
                            console.error('Payment verification error:', error);
                            showToast('Payment verification failed. Please contact support.', 'error');
                            payButton.disabled = false;
                            payButton.innerHTML = '<i class="fas fa-credit-card"></i> Pay Now';
                        }
                    },
                    modal: {
                        ondismiss: function() {
                            // Re-enable button when modal is dismissed
                            hideLoading();
                            payButton.disabled = false;
                            payButton.innerHTML = '<i class="fas fa-credit-card"></i> Pay Now';
                        }
                    },
                    theme: {
                        color: '#667eea'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function(response) {
                    hideLoading();
                    console.error('Payment failed:', response.error);
                    showToast('Payment failed: ' + (response.error.description || 'Unknown error'), 'error');
                    payButton.disabled = false;
                    payButton.innerHTML = '<i class="fas fa-credit-card"></i> Pay Now';
                });

                rzp.open();

            } catch (error) {
                hideLoading();
                console.error('Error initiating payment:', error);
                showToast(error.message || 'Failed to initiate payment. Please try again.', 'error');
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-credit-card"></i> Pay Now';
            }
        });
    </script>
</body>
</html>