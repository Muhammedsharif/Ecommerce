<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Return Request Management - 1NOTONE Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            color: #333;
        }

        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 250px;
            height: 100vh;
            background: linear-gradient(180deg, #2c3e50 0%, #34495e 100%);
            color: white;
            z-index: 1000;
            transition: all 0.3s ease;
            overflow-y: auto;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-header h3 {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
        }

        .sidebar-menu {
            padding: 20px 0;
        }

        .sidebar-menu ul {
            list-style: none;
        }

        .sidebar-menu li {
            margin: 5px 0;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .sidebar-menu a:hover,
        .sidebar-menu a.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            transform: translateX(5px);
        }

        .sidebar-menu i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-contents {
            
            padding: 30px;
            min-height: 100vh;
        }

        /* Breadcrumb */
        .breadcrumb-container {
            margin-bottom: 30px;
        }

        .breadcrumb {
            background: transparent;
            padding: 0;
            margin: 0;
            font-size: 0.9rem;
        }

        .breadcrumb-item {
            color: #6c757d;
        }

        .breadcrumb-item.active {
            color: #495057;
            font-weight: 500;
        }

        .breadcrumb-item a {
            color: #007bff;
            text-decoration: none;
        }

        .breadcrumb-separator {
            color: #6c757d;
            margin: 0 8px;
        }

        /* Main Card */
        .main-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 100%;
        }

        .card-header {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            padding: 25px 30px;
            color: white;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-text h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0 0 8px 0;
        }

        .header-text p {
            margin: 0;
            opacity: 0.9;
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .back-btn {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            padding: 10px 20px;
            color: white;
            text-decoration: none;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            color: white;
            text-decoration: none;
            transform: translateY(-2px);
        }

        .card-body {
            padding: 30px;
        }

        /* Statistics Cards */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            gap: 15px;
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }

        .stat-icon.total {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .stat-icon.amount {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .stat-content h3 {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 0;
            color: #2c3e50;
        }

        .stat-content p {
            margin: 0;
            color: #7f8c8d;
            font-size: 0.9rem;
        }

        /* Search and Filter Section */
        .search-filter-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            gap: 20px;
            flex-wrap: wrap;
        }

        .search-container {
            position: relative;
            flex: 1;
            max-width: 400px;
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            font-size: 16px;
        }

        .search-input {
            width: 100%;
            padding: 12px 15px 12px 45px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }

        .filter-section {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .sort-filter {
            padding: 10px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .sort-filter:focus {
            outline: none;
            border-color: #007bff;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .table {
            margin: 0;
            font-size: 14px;
        }

        .table thead th {
            background: #f8f9fa;
            border: none;
            padding: 15px;
            font-weight: 600;
            color: #495057;
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 0.5px;
        }

        .table tbody td {
            padding: 15px;
            border-top: 1px solid #e9ecef;
            vertical-align: middle;
        }

        .table tbody tr:hover {
            background: #f8f9fa;
        }

        .order-id {
            font-weight: 600;
            color: #007bff;
        }

        .customer-info {
            display: flex;
            flex-direction: column;
        }

        .customer-name {
            font-weight: 500;
            color: #2c3e50;
        }

        .customer-email {
            font-size: 12px;
            color: #6c757d;
        }

        .order-amount {
            font-weight: 600;
            color: #28a745;
        }

        .order-date {
            color: #6c757d;
            font-size: 13px;
        }

        /* Status Badge */
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-return-request {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .approve-btn {
            background: #28a745;
            color: white;
        }

        .approve-btn:hover {
            background: #218838;
            transform: translateY(-2px);
        }

        .reject-btn {
            background: #dc3545;
            color: white;
        }

        .reject-btn:hover {
            background: #c82333;
            transform: translateY(-2px);
        }

        .view-btn {
            background: #007bff;
            color: white;
        }

        .view-btn:hover {
            background: #0056b3;
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    

 <%- include("../partials/admin/header") %>
    <!-- Main Content -->
    <div class="main-contents">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/admin/dashboard">
                            <i class="fas fa-home"></i> Dashboard
                        </a>
                    </li>
                    <li class="breadcrumb-separator">/</li>
                    <li class="breadcrumb-item">
                        <a href="/admin/orders">
                            <i class="fas fa-shopping-cart"></i> Orders
                        </a>
                    </li>
                    <li class="breadcrumb-separator">/</li>
                    <li class="breadcrumb-item active">
                        Return Requests
                    </li>
                </ol>
            </nav>
        </div>

        <!-- Main Card -->
        <div class="main-card">
            <div class="card-header">
                <div class="header-content">
                    <div class="header-text">
                        <h2>Return Request Management</h2>
                        <p>Review and manage customer return requests</p>
                    </div>
                    <div class="header-actions">
                        <a href="/admin/orders" class="back-btn">
                            <i class="fas fa-arrow-left"></i>
                            Back to Orders
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <!-- Return Request Statistics Cards -->
                <div class="stats-container">
                    <div class="stat-card">
                        <div class="stat-icon total">
                            <i class="fas fa-undo"></i>
                        </div>
                        <div class="stat-content">
                            <h3><%= stats.totalRequests %></h3>
                            <p>Total Return Requests</p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon amount">
                            <i class="fas fa-rupee-sign"></i>
                        </div>
                        <div class="stat-content">
                            <h3>₹<%= Math.round(stats.totalAmount).toLocaleString('en-IN') %></h3>
                            <p>Total Return Amount</p>
                        </div>
                    </div>
                </div>

                <!-- Search and Filter Section -->
                <div class="search-filter-section">
                    <div class="search-container">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" placeholder="Search by Order ID, Customer"
                               id="searchInput" value="<%= search %>">
                    </div>

                    <div class="filter-section">
                        <select class="sort-filter" id="sortFilter">
                            <option value="createdOn-desc" <%= sortBy === 'createdOn' && sortOrder === 'desc' ? 'selected' : '' %>>Newest First</option>
                            <option value="createdOn-asc" <%= sortBy === 'createdOn' && sortOrder === 'asc' ? 'selected' : '' %>>Oldest First</option>
                            <option value="finalAmount-desc" <%= sortBy === 'finalAmount' && sortOrder === 'desc' ? 'selected' : '' %>>Highest Amount</option>
                            <option value="finalAmount-asc" <%= sortBy === 'finalAmount' && sortOrder === 'asc' ? 'selected' : '' %>>Lowest Amount</option>
                        </select>
                    </div>
                </div>

                <!-- Return Requests Table -->
                <div class="table-container">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Product</th>
                                <th>Return Reason</th>
                                <th>Return Date</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="returnRequestsTableBody">
                            <% if (returnRequests && returnRequests.length > 0) { %>
                                <% returnRequests.forEach(request => { %>
                                    <% if (request.status === 'Return Request') { %>
                                        <!-- Order-level return request -->
                                        <tr data-order-id="<%= request.orderId %>" data-customer="<%= request.userId ? request.userId.name : 'N/A' %>">
                                            <td>
                                                <div class="order-id"><%= request.orderId %></div>
                                            </td>
                                            <td>
                                                <div class="customer-info">
                                                    <div class="customer-name"><%= request.userId ? request.userId.name : 'N/A' %></div>
                                                    <div class="customer-email"><%= request.userId ? request.userId.email : 'N/A' %></div>
                                                </div>
                                            </td>
                                            <td>
                                                <div style="color: #6c757d; font-style: italic;">All Items</div>
                                            </td>
                                            <td>
                                                <div style="font-size: 13px; color: #495057;">
                                                    <%= request.returnReason || 'No reason provided' %>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="order-date">
                                                    <%= new Date(request.updatedAt || request.createdOn).toLocaleDateString('en-IN', {
                                                        year: 'numeric',
                                                        month: 'short',
                                                        day: 'numeric'
                                                    }) %>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="order-amount">₹<%= Math.round(request.refundAmount).toLocaleString('en-IN') %></div>
                                            </td>
                                            <td>
                                                <span class="status-badge status-<%= request.status.toLowerCase().replace(' ', '-') %>">
                                                    <%= request.status.toUpperCase() %>
                                                </span>
                                            </td>
                                            <td>
                                                <div class="action-buttons">
                                                    <button class="action-btn view-btn" onclick="viewReturnRequest('<%= request.orderId %>')">
                                                        <i class="fas fa-eye"></i> View
                                                    </button>
                                                    <button class="action-btn approve-btn" onclick="approveReturn('<%= request.orderId %>')">
                                                        <i class="fas fa-check"></i> Approve
                                                    </button>
                                                    <button class="action-btn reject-btn" onclick="rejectReturn('<%= request.orderId %>')">
                                                        <i class="fas fa-times"></i> Reject
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    <% } %>
                                    
                                    <!-- Individual item return requests -->
                                    <% if (request.orderedItems && request.orderedItems.length > 0) { %>
                                        <% request.orderedItems.forEach(item => { %>
                                            <% if (item.status === 'Return Request') { %>
                                                <tr data-order-id="<%= request.orderId %>" data-customer="<%= request.userId ? request.userId.name : 'N/A' %>" data-item-id="<%= item._id %>">
                                                    <td>
                                                        <div class="order-id"><%= request.orderId %></div>
                                                        <div style="font-size: 11px; color: #6c757d;">Item Return</div>
                                                    </td>
                                                    <td>
                                                        <div class="customer-info">
                                                            <div class="customer-name"><%= request.userId ? request.userId.name : 'N/A' %></div>
                                                            <div class="customer-email"><%= request.userId ? request.userId.email : 'N/A' %></div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div style="display: flex; align-items: center; gap: 10px;">
                                                            <% if (item.product && item.product.productImage && item.product.productImage.length > 0) { %>
                                                                <img src="/uploads/product-images/<%= item.product.productImage[0] %>" 
                                                                     alt="<%= item.product.productName %>" 
                                                                     style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;">
                                                            <% } %>
                                                            <div>
                                                                <div style="font-weight: 500; font-size: 13px;"><%= item.product ? item.product.productName : 'Product' %></div>
                                                                <div style="font-size: 11px; color: #6c757d;">Qty: <%= item.quantity %> | Size: <%= item.size %></div>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div style="font-size: 13px; color: #495057;">
                                                            <%= item.returnReason || 'No reason provided' %>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="order-date">
                                                            <%= new Date(request.updatedAt || request.createdOn).toLocaleDateString('en-IN', {
                                                                year: 'numeric',
                                                                month: 'short',
                                                                day: 'numeric'
                                                            }) %>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="order-amount">₹<%= ((item.price || 0) * (item.quantity || 1)).toLocaleString('en-IN') %></div>
                                                    </td>
                                                    <td>
                                                        <span class="status-badge status-<%= item.status.toLowerCase().replace(' ', '-') %>">
                                                            <%= item.status.toUpperCase() %>
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div class="action-buttons">
                                                            <button class="action-btn view-btn" onclick="viewReturnRequest('<%= request.orderId %>')">
                                                                <i class="fas fa-eye"></i> View
                                                            </button>
                                                            <button class="action-btn approve-btn" onclick="approveItemReturn('<%= request.orderId %>', '<%= item._id %>')">
                                                                <i class="fas fa-check"></i> Approve
                                                            </button>
                                                            <button class="action-btn reject-btn" onclick="rejectItemReturn('<%= request.orderId %>', '<%= item._id %>')">
                                                                <i class="fas fa-times"></i> Reject
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            <% } %>
                                        <% }) %>
                                    <% } %>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="8" class="text-center py-4">
                                        <div style="color: #6c757d;">
                                            <i class="fas fa-inbox fa-3x mb-3"></i>
                                            <h5>No Return Requests Found</h5>
                                            <p>There are currently no pending return requests.</p>
                                        </div>
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <% if (totalPages > 1) { %>
                    <div class="pagination-container mt-4">
                        <nav aria-label="Return requests pagination">
                            <ul class="pagination justify-content-center">
                                <% if (currentPage > 1) { %>
                                    <li class="page-item">
                                        <a class="page-link" href="?page=<%= currentPage - 1 %>&search=<%= search %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>">
                                            <i class="fas fa-chevron-left"></i>
                                        </a>
                                    </li>
                                <% } %>

                                <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                                    <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                        <a class="page-link" href="?page=<%= i %>&search=<%= search %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>">
                                            <%= i %>
                                        </a>
                                    </li>
                                <% } %>

                                <% if (currentPage < totalPages) { %>
                                    <li class="page-item">
                                        <a class="page-link" href="?page=<%= currentPage + 1 %>&search=<%= search %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>">
                                            <i class="fas fa-chevron-right"></i>
                                        </a>
                                    </li>
                                <% } %>
                            </ul>
                        </nav>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('#returnRequestsTableBody tr');

            let visibleCount = 0;

            rows.forEach(row => {
                const orderId = row.getAttribute('data-order-id') || '';
                const customer = row.getAttribute('data-customer') || '';

                const matchesSearch =
                    orderId.toLowerCase().includes(searchTerm) ||
                    customer.toLowerCase().includes(searchTerm);

                if (matchesSearch) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Sort functionality
        document.getElementById('sortFilter').addEventListener('change', function() {
            const [sortBy, sortOrder] = this.value.split('-');
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('sortBy', sortBy);
            currentUrl.searchParams.set('sortOrder', sortOrder);
            currentUrl.searchParams.set('page', '1'); // Reset to first page
            window.location.href = currentUrl.toString();
        });

        // View return request details
        function viewReturnRequest(orderId) {
            // Reuse the existing order details modal functionality
            fetch(`/admin/orders/details/${orderId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: `Return Request Details - ${orderId}`,
                            html: `
                                <div style="text-align: left; padding: 20px;">
                                    <h4>Customer Information</h4>
                                    <p><strong>Name:</strong> ${data.order.userId.name}</p>
                                    <p><strong>Email:</strong> ${data.order.userId.email}</p>
                                    <p><strong>Phone:</strong> ${data.order.userId.phone || 'N/A'}</p>

                                    <h4 style="margin-top: 20px;">Order Information</h4>
                                    <p><strong>Order Date:</strong> ${new Date(data.order.createdOn).toLocaleDateString()}</p>
                                    <p><strong>Payment Method:</strong> ${data.order.paymentMethod || 'Cash on Delivery'}</p>
                                    <p><strong>Total Amount:</strong> ₹${data.order.finalAmount.toLocaleString('en-IN')}</p>
                                    <p><strong>Status:</strong> ${data.order.status}</p>
                                </div>
                            `,
                            width: 600,
                            confirmButtonColor: '#3b82f6'
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: 'Failed to load return request details.',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error fetching return request details:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'Failed to load return request details.',
                        icon: 'error',
                        confirmButtonColor: '#dc3545'
                    });
                });
        }

        // Approve return request (order-level)
        function approveReturn(orderId) {
            Swal.fire({
                title: 'Approve Return Request',
                text: `Are you sure you want to approve the return request for order ${orderId}? The amount will be credited to the customer's wallet.`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Approve',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Approving return request...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Call backend API
                    fetch('/admin/orders/approve-return-request', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId: orderId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Approved!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                // Remove the row from the table
                                const row = document.querySelector(`tr[data-order-id='${orderId}']:not([data-item-id])`);
                                if (row) row.remove();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message || 'Failed to approve return request.',
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error approving return request:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Failed to approve return request. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                }
            });
        }

        // Approve individual item return
        function approveItemReturn(orderId, itemId) {
            Swal.fire({
                title: 'Approve Item Return',
                text: `Are you sure you want to approve the return request for this item? The amount will be credited to the customer's wallet.`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Approve',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Approving item return request...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Call backend API
                    fetch('/admin/orders/approve-return-request', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId: orderId, itemId: itemId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Approved!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                // Remove the row from the table
                                const row = document.querySelector(`tr[data-order-id='${orderId}'][data-item-id='${itemId}']`);
                                if (row) row.remove();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message || 'Failed to approve item return request.',
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error approving item return request:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Failed to approve item return request. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                }
            });
        }

        // Reject return request (order-level)
        function rejectReturn(orderId) {
            Swal.fire({
                title: 'Reject Return Request',
                text: 'Please provide a reason for rejecting this return request:',
                input: 'textarea',
                inputPlaceholder: 'Enter rejection reason...',
                inputValidator: (value) => {
                    if (!value || value.trim().length < 10) {
                        return 'Please provide a detailed reason (minimum 10 characters)';
                    }
                },
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Reject Request',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    const rejectionReason = result.value;

                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Rejecting return request...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Call backend API
                    fetch('/admin/orders/reject-return-request', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            reason: rejectionReason
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Rejected!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#dc3545'
                            }).then(() => {
                                // Remove the row from the table
                                const row = document.querySelector(`tr[data-order-id='${orderId}']:not([data-item-id])`);
                                if (row) row.remove();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message || 'Failed to reject return request.',
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error rejecting return request:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Failed to reject return request. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                }
            });
        }

        // Reject individual item return
        function rejectItemReturn(orderId, itemId) {
            Swal.fire({
                title: 'Reject Item Return',
                text: 'Please provide a reason for rejecting this item return request:',
                input: 'textarea',
                inputPlaceholder: 'Enter rejection reason...',
                inputValidator: (value) => {
                    if (!value || value.trim().length < 10) {
                        return 'Please provide a detailed reason (minimum 10 characters)';
                    }
                },
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Reject Request',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    const rejectionReason = result.value;

                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Rejecting item return request...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Call backend API
                    fetch('/admin/orders/reject-return-request', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            itemId: itemId,
                            reason: rejectionReason
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Rejected!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#dc3545'
                            }).then(() => {
                                // Remove the row from the table
                                const row = document.querySelector(`tr[data-order-id='${orderId}'][data-item-id='${itemId}']`);
                                if (row) row.remove();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message || 'Failed to reject item return request.',
                                icon: 'error',
                                confirmButtonColor: '#dc3545'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error rejecting item return request:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Failed to reject item return request. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                }
            });
        }
    </script>
</body>
</html>