<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management - 1NOTONE Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }

        /* Admin Layout Structure */
        
    

        /* Main Content Area */
        .main-contents {
            flex: 1;
            
            min-height: 100vh;
            background: #f8f9fa;
        }

        /* Top Header */
      

        /* Content Container */
        .content-container {
            padding: 30px;
            max-width: none;
            width: 100%;
        }

        /* Breadcrumb */
        .breadcrumb-container {
            background: white;
            border-radius: 8px;
            padding: 12px 20px;
            margin-bottom: 20px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            margin: 0;
            padding: 0;
            list-style: none;
            font-size: 14px;
        }

        .breadcrumb-item {
            display: flex;
            align-items: center;
        }

        .breadcrumb-item a {
            color: #3b82f6;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .breadcrumb-item a:hover {
            text-decoration: underline;
        }

        .breadcrumb-item.active {
            color: #6b7280;
        }

        .breadcrumb-separator {
            margin: 0 8px;
            color: #6b7280;
        }

        /* Main Card */
        .main-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 100%;
        }

        .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 25px 30px;
            color: white;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-text h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0 0 8px 0;
        }

        .header-text p {
            margin: 0;
            opacity: 0.9;
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .notification-container {
            position: relative;
        }

        .notification-btn {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .notification-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: 600;
            border: 2px solid white;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
            }
        }

        /* Legacy styles for backward compatibility */
        .card-header h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0 0 8px 0;
        }

        .card-header p {
            margin: 0;
            opacity: 0.9;
        }

        .card-body {
            padding: 30px;
        }

        /* Statistics Cards */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            padding: 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            transition: all 0.3s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }

        .stat-icon.total { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .stat-icon.pending { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
        .stat-icon.processing { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
        .stat-icon.delivered { background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); }
        .stat-icon.revenue { background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); }

        .stat-content h3 {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 0 0 5px 0;
            color: #1f2937;
        }

        .stat-content p {
            font-size: 0.9rem;
            color: #6b7280;
            margin: 0;
            font-weight: 500;
        }

        /* Search and Filter Section */
        .search-filter-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            gap: 20px;
            flex-wrap: wrap;
        }

        .search-container {
            position: relative;
            flex: 1;
            max-width: 400px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .search-input-wrapper {
            position: relative;
            flex: 1;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px 12px 45px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s ease;
            background: white;
        }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
            font-size: 14px;
        }

        .clear-search-btn {
            padding: 12px 16px;
            background: #f3f4f6;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            color: #6b7280;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 6px;
            white-space: nowrap;
        }

        .clear-search-btn:hover {
            background: #e5e7eb;
            color: #374151;
            border-color: #9ca3af;
        }

        .clear-search-btn:active {
            transform: translateY(1px);
        }

        .filter-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .status-filter {
            padding: 12px 16px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 150px;
        }

        .status-filter:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .notification-btn {
            background: #f3f4f6;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 12px 15px;
            color: #6b7280;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

        .notification-btn:hover {
            background: #e5e7eb;
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid #e5e7eb;
            width: 100%;
        }

        .orders-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }

        .orders-table thead {
            background: #f9fafb;
        }

        .orders-table th {
            padding: 12px 16px;
            text-align: left;
            font-weight: 600;
            color: #374151;
            border-bottom: 1px solid #e5e7eb;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .orders-table td {
            padding: 16px;
            border-bottom: 1px solid #f3f4f6;
            vertical-align: middle;
        }

        .orders-table tbody tr {
            transition: all 0.2s ease;
        }

        .orders-table tbody tr:hover {
            background: #f9fafb;
        }

        .orders-table tbody tr.hidden {
            display: none;
        }

        /* Customer Info Styles */
        .customer-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .customer-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #3b82f6;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 16px;
        }

        .customer-details h4 {
            font-size: 14px;
            font-weight: 600;
            color: #1f2937;
            margin: 0 0 2px 0;
        }

        .customer-details p {
            font-size: 12px;
            color: #6b7280;
            margin: 0;
        }

        /* Order ID Styles */
        .order-id {
            font-weight: 600;
            color: #1f2937;
            font-size: 14px;
        }

        /* Date Styles */
        .order-date {
            color: #6b7280;
            font-size: 13px;
        }

        /* Items Styles */
        .order-items {
            color: #1f2937;
        }

        .items-count {
            font-weight: 600;
            font-size: 14px;
        }

        .items-qty {
            color: #6b7280;
            font-size: 12px;
        }

        .items-status-info {
            font-size: 11px;
            font-weight: 600;
            margin-top: 4px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .items-status-info.cancelled {
            color: #dc2626;
        }

        .items-status-info.return-request {
            color: #d97706;
        }

        .items-status-info.returned {
            color: #2563eb;
        }

        /* Amount Styles */
        .order-amount {
            font-weight: 700;
            color: #059669;
            font-size: 14px;
        }

        /* Payment Styles */
        .payment-method {
            color: #6b7280;
            font-size: 13px;
        }

        /* Status Styles */
        .status-badge {
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-pending {
            background: #fef3c7;
            color: #92400e;
        }

        .status-returned {
            background: #fecaca;
            color: #991b1b;
        }

        .status-delivered {
            background: #d1fae5;
            color: #065f46;
        }

        .status-processing {
            background: #dbeafe;
            color: #1e40af;
        }

        .status-cancelled {
            background: #f3f4f6;
            color: #374151;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .view-btn {
            background: #1f2937;
            color: white;
        }

        .view-btn:hover {
            background: #111827;
        }

        .status-btn {
            background: #6b7280;
            color: white;
        }

        .status-btn:hover {
            background: #4b5563;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6b7280;
            display: none;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 16px;
            color: #d1d5db;
        }

        .empty-state h3 {
            font-size: 1.1rem;
            margin-bottom: 8px;
            color: #374151;
        }

        /* Pagination Styles */
        .pagination-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-top: 1px solid #e5e7eb;
            margin-top: 20px;
        }

        .pagination-info {
            color: #6b7280;
            font-size: 14px;
        }

        .pagination-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .pagination-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: white;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            color: #374151;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .pagination-btn:hover {
            background: #f9fafb;
            border-color: #9ca3af;
            color: #111827;
        }

        .pagination-numbers {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .pagination-number {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            color: #374151;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .pagination-number:hover {
            background: #f9fafb;
            border-color: #9ca3af;
            color: #111827;
        }

        .pagination-number.active {
            background: #3b82f6;
            border-color: #3b82f6;
            color: white;
        }

        .pagination-number.active:hover {
            background: #2563eb;
            border-color: #2563eb;
        }

        .pagination-dots {
            padding: 0 8px;
            color: #9ca3af;
            font-weight: 500;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .admin-sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .admin-sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .menu-toggle {
                display: block;
            }

            .content-container {
                padding: 20px;
            }
        }

        @media (max-width: 768px) {
            .search-filter-section {
                flex-direction: column;
                align-items: stretch;
            }

            .search-container {
                max-width: none;
            }

            .filter-section {
                justify-content: space-between;
            }

            .table-container {
                overflow-x: auto;
            }

            .orders-table {
                min-width: 800px;
            }

            .customer-info {
                min-width: 180px;
            }

            .action-buttons {
                flex-direction: column;
                min-width: 70px;
            }

            .pagination-container {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .pagination-controls {
                justify-content: center;
                flex-wrap: wrap;
            }

            .pagination-numbers {
                order: 2;
                flex-wrap: wrap;
                justify-content: center;
            }

            .pagination-btn {
                order: 1;
                font-size: 13px;
                padding: 6px 12px;
            }
        }

        /* Modal Styles */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            justify-content: center;
            align-items: center;
        }

        .modal-overlay.show {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            padding: 20px 24px 16px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            color: #1f2937;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            color: #6b7280;
            cursor: pointer;
            padding: 0;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .modal-close:hover {
            background: #f3f4f6;
            color: #374151;
        }

        .modal-body {
            padding: 20px 24px;
        }

        .modal-body p {
            margin: 0 0 16px 0;
            color: #374151;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 500;
            color: #374151;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s ease;
            box-sizing: border-box;
        }

        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .modal-footer {
            padding: 16px 24px 20px;
            border-top: 1px solid #e5e7eb;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-secondary {
            background: #f3f4f6;
            color: #374151;
        }

        .btn-secondary:hover {
            background: #e5e7eb;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Order Details Modal Specific Styles */
        .order-details-modal {
            max-width: 800px;
            width: 95%;
        }

        .loading-spinner {
            text-align: center;
            padding: 40px 20px;
            color: #6b7280;
        }

        .loading-spinner i {
            font-size: 24px;
            margin-bottom: 12px;
        }

        .order-info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 24px;
        }

        .info-section {
            background: #f9fafb;
            padding: 16px;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }

        .info-section h4 {
            margin: 0 0 12px 0;
            font-size: 16px;
            font-weight: 600;
            color: #1f2937;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .info-label {
            color: #6b7280;
            font-weight: 500;
        }

        .info-value {
            color: #1f2937;
            font-weight: 500;
        }

        .order-items {
            margin-top: 24px;
        }

        .order-items h4 {
            margin: 0 0 16px 0;
            font-size: 16px;
            font-weight: 600;
            color: #1f2937;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .item-card {
            background: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            display: flex;
            gap: 16px;
            align-items: center;
        }

        .item-image {
            width: 60px;
            height: 60px;
            border-radius: 6px;
            object-fit: cover;
            border: 1px solid #e5e7eb;
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 4px;
        }

        .item-specs {
            font-size: 13px;
            color: #6b7280;
            margin-bottom: 4px;
        }

        .item-price {
            font-weight: 600;
            color: #059669;
        }

        .order-summary {
            background: #f0f9ff;
            border: 1px solid #0ea5e9;
            border-radius: 8px;
            padding: 16px;
            margin-top: 20px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .summary-row.total {
            font-weight: 600;
            font-size: 16px;
            border-top: 1px solid #0ea5e9;
            padding-top: 8px;
            margin-top: 8px;
        }

        .summary-row.cancelled-items {
            color: #dc2626;
            font-style: italic;
        }

        .summary-note {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 12px;
            padding: 8px;
            background: #fef3c7;
            border-radius: 4px;
            font-size: 13px;
            color: #92400e;
        }

        .summary-note i {
            color: #d97706;
        }

        @media (max-width: 768px) {
            .order-info-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .order-details-modal {
                width: 98%;
                margin: 10px;
            }

            .item-card {
                flex-direction: column;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    

        <!-- Admin Sidebar -->
        <%- include("../partials/admin/header") %>

        <!-- Main Content -->
        <main class="main-contents">
             

            <!-- Content Container -->
            <div class="content-container">
                <!-- Breadcrumb Navigation -->
                <div class="breadcrumb-container">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a href="/admin/dashboard">
                                    <i class="fas fa-home"></i> Dashboard
                                </a>
                            </li>
                            <li class="breadcrumb-separator">/</li>
                            <li class="breadcrumb-item active">
                                Order Management
                            </li>
                        </ol>
                    </nav>
                </div>

                <!-- Main Card -->
                <div class="main-card">
                    <div class="card-header">
                        <div class="header-content">
                            <div class="header-text">
                                <h2>Order Management</h2>
                                <p>View, manage, and track all customer orders in one place</p>
                            </div>
                            <div class="header-actions">
                                <div class="notification-container">
                                    <button class="notification-btn" onclick="window.location.href='/admin/orders/return-requests'" title="Return Requests">
                                        <i class="fas fa-bell"></i>
                                        <% if (returnRequestCount > 0) { %>
                                            <span class="notification-badge" style="background:#dc3545;animation:pulse 1s infinite;"><%= returnRequestCount %></span>
                                        <% } %>
                                    </button>
                                    <% if (returnRequestCount > 0) { %>
                                        <span style="position:absolute;top:-8px;right:-8px;width:12px;height:12px;background:#dc3545;border-radius:50%;box-shadow:0 0 8px #dc3545;animation:pulse 1s infinite;"></span>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Order Statistics Cards -->
                        <div class="stats-container">
                            <div class="stat-card">
                                <div class="stat-icon total">
                                    <i class="fas fa-shopping-cart"></i>
                                </div>
                                <div class="stat-content">
                                    <h3><%= stats.total %></h3>
                                    <p>Total Orders</p>
                                </div>
                            </div>

                            <div class="stat-card">
                                <div class="stat-icon pending">
                                    <i class="fas fa-clock"></i>
                                </div>
                                <div class="stat-content">
                                    <h3><%= stats.pending %></h3>
                                    <p>Pending</p>
                                </div>
                            </div>

                            <div class="stat-card">
                                <div class="stat-icon processing">
                                    <i class="fas fa-cog"></i>
                                </div>
                                <div class="stat-content">
                                    <h3><%= stats.processing %></h3>
                                    <p>Processing</p>
                                </div>
                            </div>

                            <div class="stat-card">
                                <div class="stat-icon delivered">
                                    <i class="fas fa-check-circle"></i>
                                </div>
                                <div class="stat-content">
                                    <h3><%= stats.delivered %></h3>
                                    <p>Delivered</p>
                                </div>
                            </div>

                            <div class="stat-card">
                                <div class="stat-icon revenue">
                                    <i class="fas fa-rupee-sign"></i>
                                </div>
                                <div class="stat-content">
                                    <h3>₹<%=Math.round(stats.totalRevenue).toLocaleString('en-IN') %></h3>
                                    <p>Total Revenue</p>
                                </div>
                            </div>
                        </div>

                        <!-- Search and Filter Section -->
                        <div class="search-filter-section">
                            <div class="search-container">
                                <div class="search-input-wrapper">
                                    <i class="fas fa-search search-icon"></i>
                                    <input type="text" class="search-input" placeholder="Search by Order ID, Customer"
                                           id="searchInput" value="<%= search %>">
                                </div>
                                <button class="clear-search-btn" id="clearSearchBtn" onclick="clearSearch()">
                                    <i class="fas fa-times"></i>
                                    Clear
                                </button>
                            </div>

                            <div class="filter-section">
                                <select class="status-filter" id="statusFilter">
                                    <option value="all" <%= status === 'all' || status === '' ? 'selected' : '' %>>All Status</option>
                                    <option value="Pending" <%= status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                    <option value="Processing" <%= status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                    <option value="Shipped" <%= status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                    <option value="Delivered" <%= status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                    <option value="Cancelled" <%= status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                    <option value="Returned" <%= status === 'Returned' ? 'selected' : '' %>>Returned</option>
                                    <option value="Payment Failed" <%= status === 'Payment Failed' ? 'selected' : '' %>>Payment Failed</option>
                                </select>

                                <!-- <button class="notification-btn" onclick="exportOrders()">
                                    <i class="fas fa-download"></i>
                                    <span>Export</span>
                                </button> -->
                            </div>
                        </div>

                        <!-- Orders Table -->
                        <div class="table-container">
                            <table class="orders-table" id="ordersTable">
                                <thead>
                                    <tr>
                                        <th>Order ID</th>
                                        <th>Customer</th>
                                        <th>Date</th>
                                        <th>Items</th>
                                        <th>Amount</th>
                                        <th>Payment</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="ordersTableBody">
                                    <% if (orders && orders.length > 0) { %>
                                        <% orders.forEach(order => { %>
                                            <tr data-order-id="<%= order.orderId %>" data-customer="<%= order.userId ? order.userId.name : 'N/A' %>" data-status="<%= order.paymentStatus === 'Failed' ? 'payment failed' : order.status.toLowerCase() %>">
                                                <td>
                                                    <div class="order-id"><%= order.orderId %></div>
                                                </td>
                                                <td>
                                                    <div class="customer-info">
                                                        <div class="customer-avatar">
                                                            <%= order.userId && order.userId.name ? order.userId.name.charAt(0).toUpperCase() : 'N' %>
                                                        </div>
                                                        <div class="customer-details">
                                                            <h4><%= order.userId ? order.userId.name : 'N/A' %></h4>
                                                            <p><%= order.userId ? order.userId.email : 'N/A' %></p>
                                                            <p><%= order.userId ? order.userId.phone : 'N/A' %></p>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="order-date">
                                                        <%= new Date(order.createdOn).toLocaleDateString('en-IN') %><br>
                                                        <%= new Date(order.createdOn).toLocaleTimeString('en-IN', {
                                                            hour: '2-digit',
                                                            minute: '2-digit',
                                                            second: '2-digit'
                                                        }) %>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="order-items">
                                                        <div class="items-count"><%= order.orderedItems.length %> item(s)</div>
                                                        <div class="items-qty">Qty: <%= order.orderedItems.reduce((total, item) => total + item.quantity, 0) %></div>
                                                        <%
                                                            const cancelledItems = order.orderedItems.filter(item => item.status === 'Cancelled').length;
                                                            const returnRequestItems = order.orderedItems.filter(item => item.status === 'Return Request').length;
                                                            const returnedItems = order.orderedItems.filter(item => item.status === 'Returned').length;
                                                        %>
                                                        <% if (cancelledItems > 0) { %>
                                                            <div class="items-status-info cancelled">
                                                                <i class="fas fa-times-circle"></i> <%= cancelledItems %> cancelled
                                                            </div>
                                                        <% } %>
                                                        <% if (returnRequestItems > 0) { %>
                                                            <div class="items-status-info return-request">
                                                                <i class="fas fa-undo"></i> <%= returnRequestItems %> return request
                                                            </div>
                                                        <% } %>
                                                        <% if (returnedItems > 0) { %>
                                                            <div class="items-status-info returned">
                                                                <i class="fas fa-check-circle"></i> <%= returnedItems %> returned
                                                            </div>
                                                        <% } %>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="order-amount">₹<%= Math.round(order.finalAmount).toLocaleString('en-IN') %></div>
                                                </td>
                                                <td>
                                                    <div class="payment-method">
                                                        <% if (order.paymentMethod === 'COD') { %>
                                                            Cash on Delivery
                                                        <% } else if (order.paymentMethod === 'ONLINE') { %>
                                                            Online Payment
                                                        <% } else if (order.paymentMethod === 'WALLET') { %>
                                                            Wallet Payment
                                                        <% } else { %>
                                                            <%= order.paymentMethod || 'N/A' %>
                                                        <% } %>
                                                    </div>
                                                </td>
                                                <td>
                                                    <% if (order.paymentStatus === 'Failed') { %>
                                                        <span class="status-badge status-cancelled">
                                                            PAYMENT FAILED
                                                        </span>
                                                    <% } else { %>
                                                        <span class="status-badge status-<%= order.status.toLowerCase() %>">
                                                            <%= order.status.toUpperCase() %>
                                                        </span>
                                                    <% } %>
                                                </td>
                                                <td>
                                                    <div class="action-buttons">
                                                        <button class="action-btn view-btn" onclick="viewOrder('<%= order.orderId %>')">
                                                            <i class="fas fa-eye"></i> View
                                                        </button>
                                                        <button class="action-btn status-btn" onclick="updateStatus('<%= order.orderId %>')">
                                                            <i class="fas fa-edit"></i> Status
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% }) %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="8" style="text-align: center; padding: 40px; color: #6b7280;">
                                                <i class="fas fa-inbox" style="font-size: 3rem; margin-bottom: 15px; opacity: 0.5;"></i>
                                                <h3 style="margin: 0 0 10px 0; font-weight: 500;">No Orders Found</h3>
                                                <p style="margin: 0; opacity: 0.7;">There are no orders matching your current filters.</p>
                                            </td>
                                        </tr>
                                    <% } %>

                                </tbody>
                            </table>

                            <!-- Pagination Controls -->
                            <% if (totalPages > 1) { %>
                                <div class="pagination-container">
                                    <div class="pagination-info">
                                        <span>Showing <%= ((currentPage - 1) * limit) + 1 %> to <%= Math.min(currentPage * limit, totalOrders) %> of <%= totalOrders %> orders</span>
                                    </div>
                                    <div class="pagination-controls">
                                        <% if (currentPage > 1) { %>
                                            <a href="?page=<%= currentPage - 1 %>&search=<%= search %>&status=<%= status %>&limit=<%= limit %>" class="pagination-btn">
                                                <i class="fas fa-chevron-left"></i> Previous
                                            </a>
                                        <% } %>

                                        <div class="pagination-numbers">
                                            <%
                                                let startPage = Math.max(1, currentPage - 2);
                                                let endPage = Math.min(totalPages, currentPage + 2);

                                                if (startPage > 1) { %>
                                                    <a href="?page=1&search=<%= search %>&status=<%= status %>&limit=<%= limit %>" class="pagination-number">1</a>
                                                    <% if (startPage > 2) { %>
                                                        <span class="pagination-dots">...</span>
                                                    <% } %>
                                                <% }

                                                for (let i = startPage; i <= endPage; i++) { %>
                                                    <a href="?page=<%= i %>&search=<%= search %>&status=<%= status %>&limit=<%= limit %>"
                                                       class="pagination-number <%= i === currentPage ? 'active' : '' %>"><%= i %></a>
                                                <% }

                                                if (endPage < totalPages) { %>
                                                    <% if (endPage < totalPages - 1) { %>
                                                        <span class="pagination-dots">...</span>
                                                    <% } %>
                                                    <a href="?page=<%= totalPages %>&search=<%= search %>&status=<%= status %>&limit=<%= limit %>" class="pagination-number"><%= totalPages %></a>
                                                <% } %>
                                        </div>

                                        <% if (currentPage < totalPages) { %>
                                            <a href="?page=<%= currentPage + 1 %>&search=<%= search %>&status=<%= status %>&limit=<%= limit %>" class="pagination-btn">
                                                Next <i class="fas fa-chevron-right"></i>
                                            </a>
                                        <% } %>
                                    </div>
                                </div>
                            <% } %>

                            <!-- Empty State (hidden by default) -->
                            <div class="empty-state" id="emptyState">
                                <i class="fas fa-inbox"></i>
                                <h3>No orders found</h3>
                                <p>No orders match your current search criteria.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Status Update Modal -->
    <div id="statusUpdateModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Update Order Status</h3>
                <button class="modal-close" onclick="closeStatusModal()">&times;</button>
            </div>
            <div class="modal-body">
                <p>Update status for Order ID: <span id="modalOrderId"></span></p>
                <div class="form-group">
                    <label for="statusSelect">Select New Status:</label>
                    <select id="statusSelect" class="form-control">
                        <option value="">Choose status...</option>
                        <option value="Pending">Pending</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Return Request">Return Request</option>
                        <option value="Returned">Returned</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeStatusModal()">Cancel</button>
                <button class="btn btn-primary" onclick="confirmStatusUpdate()">Update Status</button>
            </div>
        </div>
    </div>

    <!-- Order Details Modal -->
    <div id="orderDetailsModal" class="modal-overlay">
        <div class="modal-content order-details-modal">
            <div class="modal-header">
                <h3>Order Details</h3>
                <button class="modal-close" onclick="closeOrderDetailsModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div id="orderDetailsContent">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading order details...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Toggle sidebar for mobile
        function toggleSidebar() {
            const sidebar = document.getElementById('adminSidebar');
            sidebar.classList.toggle('open');
        }

        // Handle search functionality with debouncing
        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', function(event) {
            const searchTerm = event.target.value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;

            // Clear previous timeout
            clearTimeout(searchTimeout);

            // Debounce search to avoid too many calls
            searchTimeout = setTimeout(() => {
                filterOrders(searchTerm, statusFilter);

                // Update URL parameters for backend sync
                const url = new URL(window.location);
                if (searchTerm.trim()) {
                    url.searchParams.set('search', searchTerm.trim());
                } else {
                    url.searchParams.delete('search');
                }
                // url.searchParams.set('page', '1');
                window.history.replaceState({}, '', url);
            }, 300);
        });

        // Clear search function
        function clearSearch() {
            // Clear the input fields
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = 'all';

            // Trigger filtering to show all orders
            filterOrders('', 'all');

            // Update URL parameters and reload to ensure backend sync
            const url = new URL(window.location);
            url.searchParams.delete('search');
            url.searchParams.delete('status');
            // url.searchParams.set('page', '1');

            // Use replace to update URL and reload page to sync with backend
            window.location.href = url.toString();
        }

        // Handle status filter
        document.getElementById('statusFilter').addEventListener('change', function(event) {
            const statusFilter = event.target.value;
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            filterOrders(searchTerm, statusFilter);

            // Update URL parameters for backend sync
            const url = new URL(window.location);
            if (statusFilter && statusFilter !== 'all') {
                url.searchParams.set('status', statusFilter);
            } else {
                url.searchParams.delete('status');
            }
            // url.searchParams.set('page', '1');
            window.history.replaceState({}, '', url);
        });

        // Filter orders function
        function filterOrders(searchTerm, statusFilter) {
            const rows = document.querySelectorAll('#ordersTableBody tr');
            const emptyState = document.getElementById('emptyState');
            let visibleCount = 0;

            rows.forEach(row => {
                const orderId = row.getAttribute('data-order-id') || '';
                const customer = row.getAttribute('data-customer') || '';
                const status = row.getAttribute('data-status') || '';

                const matchesSearch =
                    orderId.toLowerCase().includes(searchTerm) ||
                    customer.toLowerCase().includes(searchTerm);

                // Fix case sensitivity issue: compare lowercase status with lowercase filter
                const matchesStatus = statusFilter === 'all' || statusFilter === '' ||
                                    status === statusFilter.toLowerCase();

                if (matchesSearch && matchesStatus) {
                    row.classList.remove('hidden');
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.classList.add('hidden');
                    row.style.display = 'none';
                }
            });

            // Show/hide empty state
            if (visibleCount === 0) {
                if (emptyState) {
                    emptyState.style.display = 'block';
                }
            } else {
                if (emptyState) {
                    emptyState.style.display = 'none';
                }
            }
        }



        // Update order status
        function updateStatus(orderId) {
            const row = document.querySelector(`tr[data-order-id="${orderId}"]`);
            if (row) {
                const currentStatus = row.getAttribute('data-status');
                
                Swal.fire({
                    title: 'Update Order Status',
                    text: `Current status: ${currentStatus.toUpperCase()}`,
                    input: 'select',
                    inputOptions: {
                        'pending': 'Pending',
                        'processing': 'Processing',
                        'delivered': 'Delivered',
                        'returned': 'Returned',
                        'cancelled': 'Cancelled'
                    },
                    inputValue: currentStatus,
                    showCancelButton: true,
                    confirmButtonText: 'Update Status',
                    confirmButtonColor: '#3b82f6',
                    cancelButtonColor: '#6b7280'
                }).then((result) => {
                    if (result.isConfirmed && result.value !== currentStatus) {
                        // Update the status in the DOM
                        row.setAttribute('data-status', result.value);
                        const statusBadge = row.querySelector('.status-badge');
                        statusBadge.className = `status-badge status-${result.value}`;
                        statusBadge.textContent = result.value.toUpperCase();
                        
                        Swal.fire({
                            title: 'Status Updated!',
                            text: `Order ${orderId} status has been updated to ${result.value.toUpperCase()}`,
                            icon: 'success',
                            confirmButtonColor: '#10b981'
                        });
                    }
                });
            }
        }

        // Show notifications
        function showNotifications() {
            Swal.fire({
                title: 'Notifications',
                html: `
                    <div style="text-align: left;">
                        <div style="padding: 10px; border-left: 4px solid #f59e0b; margin-bottom: 10px; background: #fef3c7;">
                            <strong>New Order:</strong> ORD-20250702-9323 requires attention
                        </div>
                        <div style="padding: 10px; border-left: 4px solid #ef4444; margin-bottom: 10px; background: #fecaca;">
                            <strong>Return Request:</strong> Customer requested return for order ORD-20250701-3533
                        </div>
                        <div style="padding: 10px; border-left: 4px solid #3b82f6; background: #dbeafe;">
                            <strong>Payment Pending:</strong> 2 orders have pending payments
                        </div>
                    </div>
                `,
                width: 500,
                confirmButtonText: 'Mark as Read',
                confirmButtonColor: '#3b82f6'
            }).then(() => {
                // Reset notification badge
                document.querySelector('.notification-badge').textContent = '0';
                document.querySelector('.notification-badge').style.display = 'none';
            });
        }

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('adminSidebar');
            const menuToggle = document.querySelector('.menu-toggle');
            
            if (window.innerWidth <= 1024 && 
                !sidebar.contains(event.target) && 
                !menuToggle.contains(event.target) && 
                sidebar.classList.contains('open')) {
                sidebar.classList.remove('open');
            }
        });

        // View order details function
        function viewOrder(orderId) {
            // Show loading modal
            document.getElementById('orderDetailsContent').innerHTML = `
                <div class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading order details...</p>
                </div>
            `;
            document.getElementById('orderDetailsModal').classList.add('show');

            // Fetch order details
            fetch(`/admin/orders/details/${orderId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showOrderDetailsModal(data.order);
                    } else {
                        document.getElementById('orderDetailsContent').innerHTML = `
                            <div class="loading-spinner">
                                <i class="fas fa-exclamation-triangle" style="color: #dc3545;"></i>
                                <p>Error loading order details: ${data.message || 'Unknown error'}</p>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error fetching order details:', error);
                    document.getElementById('orderDetailsContent').innerHTML = `
                        <div class="loading-spinner">
                            <i class="fas fa-exclamation-triangle" style="color: #dc3545;"></i>
                            <p>Error loading order details. Please try again.</p>
                        </div>
                    `;
                });
        }

        // Format currency helper function
        const formatCurrency = (amount) => {
            return `₹${amount.toLocaleString('en-IN')}`;
        };

        // Generate order summary with cancellation adjustments
        function generateOrderSummary(order) {
            // Calculate totals excluding cancelled items
            let activeItemsSubtotal = 0;
            let cancelledItemsSubtotal = 0;
            let activeItemsCount = 0;
            let cancelledItemsCount = 0;

            // Safely handle orderedItems array
            if (order.orderedItems && Array.isArray(order.orderedItems)) {
                order.orderedItems.forEach(item => {
                    const itemTotal = (item.quantity || 0) * (item.price || 0);
                    if (item.status === 'Cancelled') {
                        cancelledItemsSubtotal += itemTotal;
                        cancelledItemsCount++;
                    } else {
                        activeItemsSubtotal += itemTotal;
                        activeItemsCount++;
                    }
                });
            }

            // Calculate proportional discount for active items
            const originalSubtotal = order.totalPrice || (activeItemsSubtotal + cancelledItemsSubtotal);
            const discountAmount = order.discount || 0;
            const proportionalDiscount = originalSubtotal > 0 ? (activeItemsSubtotal / originalSubtotal) * discountAmount : 0;

            

            // Calculate adjusted final amount
            

            let summaryHtml = `
                <div class="summary-row">
                    <span>Original Subtotal:</span>
                    <span>${formatCurrency(originalSubtotal)}</span>
                </div>
            `;

            if (cancelledItemsCount > 0) {
                summaryHtml += `
                    <div class="summary-row cancelled-items">
                        <span>Cancelled Items (${cancelledItemsCount}):</span>
                        <span>-${formatCurrency(cancelledItemsSubtotal)}</span>
                    </div>
                    <div class="summary-row">
                        <span>Active Items Subtotal:</span>
                        <span>${formatCurrency(activeItemsSubtotal)}</span>
                    </div>
                `;
            } else {
                summaryHtml += `
                    <div class="summary-row">
                        <span>Subtotal:</span>
                        <span>${formatCurrency(activeItemsSubtotal)}</span>
                    </div>
                `;
            }

            if (discountAmount > 0) {
                if (cancelledItemsCount > 0) {
                    summaryHtml += `
                        <div class="summary-row">
                            <span>Original Discount:</span>
                            <span>-${formatCurrency(discountAmount)}</span>
                        </div>
                        <div class="summary-row">
                            <span>Adjusted Discount:</span>
                            <span>-${formatCurrency(proportionalDiscount)}</span>
                        </div>
                    `;
                } else {
                    summaryHtml += `
                        <div class="summary-row">
                            <span>Discount:</span>
                            <span>-${formatCurrency(discountAmount)}</span>
                        </div>
                    `;
                }
            }

           

            summaryHtml += `
                <div class="summary-row total">
                    <span>Total Amount:</span>
                    <span>${formatCurrency(order.finalAmount || 0)}</span>
                </div>
            `;

            if (cancelledItemsCount > 0) {
                summaryHtml += `
                    <div class="summary-note">
                        <i class="fas fa-info-circle"></i>
                        <span>Amount adjusted for ${cancelledItemsCount} cancelled item(s). Savings: ${formatCurrency(cancelledItemsSubtotal + (discountAmount - proportionalDiscount))}</span>
                    </div>
                `;
            }

            return summaryHtml;
        }

        // Show order details in modal
        function showOrderDetailsModal(order) {
            const formatDate = (dateString) => {
                return new Date(dateString).toLocaleDateString('en-IN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            };

            const getStatusBadge = (status) => {
                const statusClasses = {
                    'Pending': 'status-pending',
                    'Processing': 'status-processing',
                    'Shipped': 'status-processing',
                    'Delivered': 'status-delivered',
                    'Cancelled': 'status-cancelled',
                    'Return Request': 'status-pending',
                    'Returned': 'status-returned'
                };
                return `<span class="status-badge ${statusClasses[status] || 'status-pending'}">${status}</span>`;
            };

            let itemsHtml = '';
            if (order.orderedItems && Array.isArray(order.orderedItems)) {
                order.orderedItems.forEach(item => {
                    const product = item.product || {};
                    const productImage = product.productImage && product.productImage[0] ? product.productImage[0] : 'placeholder.jpg';
                    const productName = product.productName || 'Unknown Product';
                    const brand = product.brand || 'Unknown Brand';
                    const category = product.category || 'Unknown Category';
                    const quantity = item.quantity || 0;
                    const price = item.price || 0;
                    
                    itemsHtml += `
                        <div class="item-card">
                            <img src="/uploads/product-images/${productImage}"
                                 alt="${productName}"
                                 class="item-image"
                                 onerror="this.src='/uploads/placeholder.jpg'">
                            <div class="item-details">
                                <div class="item-name">${productName}</div>
                                <div class="item-specs">
                                    Brand: ${brand} | Category: ${category}
                                    ${item.size ? ` | Size: ${item.size}` : ''}
                                    ${item.color ? ` | Color: ${item.color}` : ''}
                                </div>
                                <div class="item-price">
                                    Quantity: ${quantity} × ${formatCurrency(price)} = ${formatCurrency(quantity * price)}
                                </div>
                            </div>
                        </div>
                    `;
                });
            } else {
                itemsHtml = '<p>No items found for this order.</p>';
            }

            const content = `
                <div class="order-info-grid">
                    <div class="info-section">
                        <h4><i class="fas fa-shopping-cart"></i> Order Information</h4>
                        <div class="info-item">
                            <span class="info-label">Order ID:</span>
                            <span class="info-value">${order.orderId}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Status:</span>
                            <span class="info-value">${getStatusBadge(order.status)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Order Date:</span>
                            <span class="info-value">${formatDate(order.createdOn)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Payment Method:</span>
                            <span class="info-value">${order.paymentMethod || 'N/A'}</span>
                        </div>
                    </div>

                    <div class="info-section">
                        <h4><i class="fas fa-user"></i> Customer Information</h4>
                        <div class="info-item">
                            <span class="info-label">Name:</span>
                            <span class="info-value">${order.userId.name}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Email:</span>
                            <span class="info-value">${order.userId.email}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Phone:</span>
                            <span class="info-value">${order.userId.phone || 'N/A'}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Address:</span>
                            <span class="info-value">${order.addressInfo ? `${order.addressInfo.name}, ${order.addressInfo.addressType}, ${order.addressInfo.city}, ${order.addressInfo.state} - ${order.addressInfo.pincode}` : 'N/A'}</span>
                        </div>
                    </div>
                </div>

                <div class="order-items">
                    <h4><i class="fas fa-box"></i> Ordered Items</h4>
                    ${itemsHtml}
                </div>

                <div class="order-summary">
                    <h4><i class="fas fa-calculator"></i> Order Summary</h4>
                    ${generateOrderSummary(order)}
                </div>
            `;

            document.getElementById('orderDetailsContent').innerHTML = content;
        }

        // Close order details modal
        function closeOrderDetailsModal() {
            document.getElementById('orderDetailsModal').classList.remove('show');
        }

        // Close modal when clicking outside
        document.getElementById('orderDetailsModal').addEventListener('click', function(event) {
            if (event.target === this) {
                closeOrderDetailsModal();
            }
        });

        // Update order status function
        let currentOrderId = null;

        function updateStatus(orderId) {
            currentOrderId = orderId;

            // Get current order status from the table row
            const row = document.querySelector(`tr[data-order-id="${orderId}"]`);
            if (!row) {
                Swal.fire({
                    title: 'Error',
                    text: 'Order not found. Please refresh the page and try again.',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            const currentStatus = row.getAttribute('data-status');
            const currentStatusFormatted = currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1);

            // Define valid status transitions (same as backend)
            const statusTransitions = {
                'pending': ['Processing', 'Cancelled'],
                'processing': ['Shipped', 'Cancelled'],
                'shipped': ['Delivered', 'Cancelled'],
                'delivered': ['Return Request'],
                'cancelled': [],
                'return request': ['Returned', 'Delivered'],
                'returned': []
            };

            // Get valid transitions for current status
            const validTransitions = statusTransitions[currentStatus] || [];

            // Populate the status dropdown with valid options
            const statusSelect = document.getElementById('statusSelect');
            statusSelect.innerHTML = '<option value="">Choose status...</option>';

            // Add current status as an option (no change)
            statusSelect.innerHTML += `<option value="${currentStatusFormatted}">${currentStatusFormatted} (Current)</option>`;

            // Add valid transition options
            validTransitions.forEach(status => {
                statusSelect.innerHTML += `<option value="${status}">${status}</option>`;
            });

            // If no valid transitions, show message
            if (validTransitions.length === 0) {
                statusSelect.innerHTML += '<option value="" disabled>No status changes allowed</option>';
            }

            // Update modal title and order ID
            document.getElementById('modalOrderId').textContent = orderId;
            document.querySelector('#statusUpdateModal .modal-header h3').textContent = `Update Order Status (Current: ${currentStatusFormatted})`;

            // Reset selection and show modal
            statusSelect.value = '';
            document.getElementById('statusUpdateModal').classList.add('show');
        }

        // Close status modal
        function closeStatusModal() {
            document.getElementById('statusUpdateModal').classList.remove('show');
            currentOrderId = null;
        }

        // Confirm status update
        function confirmStatusUpdate() {
            const newStatus = document.getElementById('statusSelect').value;

            if (!newStatus) {
                Swal.fire({
                    title: 'Selection Required',
                    text: 'Please select a status before updating.',
                    icon: 'warning',
                    confirmButtonColor: '#3b82f6'
                });
                return;
            }

            if (!currentOrderId) {
                Swal.fire({
                    title: 'Error',
                    text: 'No order selected. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                });
                return;
            }

            // Disable the update button to prevent double-clicks
            const updateBtn = document.querySelector('.btn-primary');
            updateBtn.disabled = true;
            updateBtn.textContent = 'Updating...';

            // Send AJAX request to update status
            fetch('/admin/orders/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderId: currentOrderId,
                    status: newStatus
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeStatusModal();
                    // Show success message with SweetAlert
                    Swal.fire({
                        title: 'Success!',
                        text: 'Order status updated successfully!',
                        icon: 'success',
                        confirmButtonColor: '#10b981',
                        timer: 2000,
                        timerProgressBar: true
                    }).then(() => {
                        // Reload the page to show updated status
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Update Failed',
                        text: data.message || 'Unknown error occurred while updating order status.',
                        icon: 'error',
                        confirmButtonColor: '#dc3545'
                    });
                }
            })
            .catch(error => {
                console.error('Error updating order status:', error);
                Swal.fire({
                    title: 'Network Error',
                    text: 'Failed to update order status. Please check your connection and try again.',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            })
            .finally(() => {
                // Re-enable the button
                updateBtn.disabled = false;
                updateBtn.textContent = 'Update Status';
            });
        }

        // Close modal when clicking outside
        document.getElementById('statusUpdateModal').addEventListener('click', function(event) {
            if (event.target === this) {
                closeStatusModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeStatusModal();
                closeOrderDetailsModal();
            }
        });

        // Export orders function (placeholder)
        function exportOrders() {
            alert('Export functionality will be implemented in the next phase');
            // Future implementation: Generate and download CSV/Excel file
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
