<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart - 1NOTONE</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        

        .cart-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 2rem;
        }

        .cart-items {
            background: white;
            border-radius: 10px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .cart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .cart-title {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .empty-cart-btn {
            background: none;
            border: 2px solid #ef4444;
            color: #ef4444;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s;
        }

        .empty-cart-btn:hover {
            background: #ef4444;
            color: white;
        }

        .cart-item {
            display: grid;
            grid-template-columns: 100px 1fr auto;
            gap: 1.5rem;
            padding: 1.5rem 0;
            border-bottom: 1px solid #e5e7eb;
            align-items: center;
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .cart-item.unavailable {
            opacity: 0.7;
            background-color: #f9f9f9;
            border-left: 3px solid #dc2626;
        }

        .cart-item.unavailable .item-image {
            filter: grayscale(50%);
        }

        .unavailable-badge {
            display: inline-block;
            background-color: #fee2e2;
            color: #dc2626;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
            margin-left: 0.5rem;
        }

        .unavailable-badge i {
            margin-right: 0.25rem;
        }

        .item-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            background: #f3f4f6;
        }

        .item-details {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .item-actions {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 1rem;
            min-width: 200px;
        }

        .item-name {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .item-specs {
            display: flex;
            gap: 1rem;
            margin-bottom: 0.5rem;
            color: #6b7280;
            font-size: 0.9rem;
        }

        .item-price {
            font-size: 1.1rem;
            font-weight: bold;
            color: #ef4444;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .qty-btn {
            width: 32px;
            height: 32px;
            border: 1px solid #d1d5db;
            background: white;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            font-weight: 600;
        }

        .qty-btn:hover {
            background: #f3f4f6;
            border-color: #9ca3af;
        }

        .qty-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .qty-input {
            width: 60px;
            height: 32px;
            text-align: center;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            padding: 0.3rem;
            font-size: 1rem;
            font-weight: 600;
        }

        .remove-btn {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .remove-btn:hover {
            background: #dc2626;
        }

        .cart-summary {
            background: white;
            border-radius: 10px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            height: fit-content;
            position: sticky;
            top: 2rem;
        }

        .summary-title {
            font-size: 1.3rem;
            font-weight: bold;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .summary-line {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .summary-line:last-of-type {
            border-bottom: 2px solid #6366f1;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .subtotal {
            font-size: 1.5rem;
            color: #ef4444;
        }

        .checkout-btn {
            width: 100%;
            background: #6366f1;
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            margin: 1.5rem 0;
            transition: background 0.3s;
        }

        .checkout-btn:hover {
            background: #5856eb;
        }

        .continue-shopping {
            width: 100%;
            background: none;
            color: #ef4444;
            border: 2px solid #ef4444;
            padding: 0.8rem;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .continue-shopping:hover {
            background: #ef4444;
            color: white;
        }

        .shipping-note {
            text-align: center;
            color: #6b7280;
            font-size: 0.9rem;
            margin: 1rem 0;
        }

        .selected-item {
            border-left: 4px solid #06b6d4;
            padding-left: 1rem;
            margin-left: -1rem;
        }

        .empty-cart {
            text-align: center;
            padding: 3rem;
            color: #6b7280;
        }

        .empty-cart i {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        @media (max-width: 768px) {
            .cart-container {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .nav-container {
                padding: 0 1rem;
            }
            
            .cart-items, .cart-summary {
                padding: 1rem;
            }
            
            .cart-item {
                grid-template-columns: 1fr;
                gap: 1rem;
                text-align: center;
            }

            .item-image {
                width: 100%;
                height: 200px;
                justify-self: center;
            }

            .item-actions {
                align-items: center;
                min-width: auto;
            }
        }

        /* Toast Notification Styles */
        .toast-notification {
            position: fixed;
            top: 650px;
            right: 20px;
            background: #006400;
            color: #FFFFFF;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            font-weight: 500;
            min-width: 300px;
        }

        .toast-notification.toast-error {
            background: #DC143C;
           
        }

        .toast-notification.toast-success {
            background: #006400;
           
        }

        .toast-notification.show {
            transform: translateX(0);
        }

        .toast-content {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .toast-content i {
            font-size: 18px;
        }
    </style>
</head>
<body>
    <!-- Header -->

 <%- include("../partials/user/header") %>

    <!-- Breadcrumb Navigation -->
    <%- include("../partials/user/breadcrumb", { breadcrumbs: [{ name: "Shopping Cart", url: "/cart" }] }) %>

    <!-- Cart Container -->
    <div class="cart-container">
        <!-- Cart Items -->
        <div class="cart-items">
            <div class="cart-header">
                <h2 class="cart-title">Shopping Cart</h2>
                <button class="empty-cart-btn" onclick="emptyCart()">
                    <i class="fas fa-trash"></i> Empty my Cart
                </button>
            </div>

            <!-- Dynamic Cart Items -->
            <% if (cartItems && cartItems.length > 0) { %>
                <% cartItems.forEach((item, index) => { %>
                    <div class="cart-item <%= !item.isAvailable ? 'unavailable' : '' %>" data-item-id="<%= item._id %>">
                        <img src="/uploads/product-images/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="item-image">
                        <div class="item-details">
                            <h3 class="item-name">
                                <%= item.productId.productName %>
                                <% if (!item.isAvailable) { %>
                                    <span class="unavailable-badge">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <%= item.unavailableReason %>
                                    </span>
                                <% } %>
                            </h3>
                            <div class="item-specs">
                                <span>Size: <%= item.size || 'N/A' %></span>
                                <span>Color: <%= item.color || 'N/A' %></span>
                            </div>
                            <div class="item-price">
                                <span style="color:#ef4444; font-weight:bold;">price:₹<%= item.displayPrice.toFixed(0) %></span>
                            </div>
                        </div>
                        <div class="item-actions">
                            <div class="quantity-controls">
                                <button class="qty-btn" onclick="updateQuantity('<%= item._id %>', -1)"
                                        <%= item.quantity <= 1 ? 'disabled' : '' %>>-</button>
                                <input type="number" value="<%= item.quantity %>" min="1" max="10" class="qty-input"
                                       onchange="setQuantity('<%= item._id %>', this.value)">
                                <button class="qty-btn" onclick="updateQuantity('<%= item._id %>', 1)"
                                        <%= item.quantity >= 10 ? 'disabled' : '' %>>+</button>
                            </div>
                            <button class="remove-btn" onclick="removeItem('<%= item._id %>')">
                                <i class="fas fa-times"></i> Remove
                            </button>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <div class="empty-cart">
                    <i class="fas fa-shopping-cart"></i>
                    <h3>Your cart is empty</h3>
                    <p>Add some items to get started!</p>
                    <a href="/shop" class="continue-shopping" style="display: inline-block; text-decoration: none; margin-top: 1rem;">Continue Shopping</a>
                </div>
            <% } %>
          
        </div>

        <!-- Cart Summary -->
        <div class="cart-summary">
            <h3 class="summary-title">Order Summary</h3>
            
            <div class="summary-line">
                <span>SUBTOTAL</span>
                <span class="subtotal">
                    ₹<%
                    let subtotal = 0;
                    if (cartItems) {
                        cartItems.forEach(item => {
                            subtotal += item.displayPrice * item.quantity;
                        });
                    }   
                    %><%= subtotal.toFixed(2) %>
                </span>
            </div>
            
            <p class="shipping-note">
                <i class="fas fa-info-circle"></i>
                Shipping and discount codes calculated at checkout.
            </p>
            
            <button class="checkout-btn" onclick="proceedToCheckout()">
                <i class="fas fa-lock"></i> Proceed to checkout
            </button>
            
            <button class="continue-shopping" onclick="continueShopping()">
                <i class="fas fa-arrow-left"></i> Continue Shopping
            </button>
        </div>
    </div>

    <script>
        // Real cart data from backend
        let cartItems = [
            <% if (cartItems && cartItems.length > 0) { %>
                <% cartItems.forEach((item, index) => { %>
                    {
                        id: '<%= item._id %>',
                        name: '<%= item.productId.productName %>',
                        size: '<%= item.size || "N/A" %>',
                        color: '<%= item.color || "N/A" %>',
                        price: <%= item.displayPrice %>,
                        quantity: <%= item.quantity %>,
                        productId: '<%= item.productId._id %>',
                        isAvailable: <%= item.isAvailable ? 'true' : 'false' %>,
                        unavailableReason: '<%= item.unavailableReason || "" %>',
                        maxStock: <%= item.maxStock || 0 %>
                    }<%= index < cartItems.length - 1 ? ',' : '' %>
                <% }) %>
            <% } %>
        ];

        // Update quantity
        async function updateQuantity(itemId, change) {
            const item = cartItems.find(item => item.id === itemId);
            if (item) {
                const newQuantity = item.quantity + change;

                // Validate quantity limits
                if (newQuantity < 1) {
                    showToast('Quantity cannot be less than 1', 'error');
                    return;
                }

                if (newQuantity > 10) {
                    showToast('Cannot add more than 10 items of the same product', 'error');
                    return;
                }

                // Check stock availability
                if (item.maxStock && newQuantity > item.maxStock) {
                    showToast(`Only ${item.maxStock} items available in stock`, 'error');
                    return;
                }

                // Check if item is available
                if (!item.isAvailable) {
                    showToast(item.unavailableReason || 'Product is no longer available', 'error');
                    return;
                }

                await updateCartQuantity(itemId, newQuantity);
            }
        }

        // Set specific quantity
        async function setQuantity(itemId, quantity) {
            const newQuantity = parseInt(quantity);

            // Validate quantity
            if (isNaN(newQuantity) || newQuantity < 1) {
                showToast('Quantity must be at least 1', 'error');
                // Reset to current quantity
                const item = cartItems.find(item => item.id === itemId);
                if (item) {
                    const input = document.querySelector(`[data-item-id="${itemId}"] .qty-input`);
                    if (input) input.value = item.quantity;
                }
                return;
            }

            if (newQuantity > 10) {
                showToast('Cannot add more than 10 items of the same product', 'error');
                // Reset to current quantity
                const item = cartItems.find(item => item.id === itemId);
                if (item) {
                    const input = document.querySelector(`[data-item-id="${itemId}"] .qty-input`);
                    if (input) input.value = item.quantity;
                }
                return;
            }

            // Additional validation for stock and availability
            const item = cartItems.find(item => item.id === itemId);
            if (item) {
                // Check stock availability
                if (item.maxStock && newQuantity > item.maxStock) {
                    showToast(`Only ${item.maxStock} items available in stock`, 'error');
                    // Reset to current quantity
                    const input = document.querySelector(`[data-item-id="${itemId}"] .qty-input`);
                    if (input) input.value = item.quantity;
                    return;
                }

                // Check if item is available
                if (!item.isAvailable) {
                    showToast(item.unavailableReason || 'Product is no longer available', 'error');
                    // Reset to current quantity
                    const input = document.querySelector(`[data-item-id="${itemId}"] .qty-input`);
                    if (input) input.value = item.quantity;
                    return;
                }
            }

            await updateCartQuantity(itemId, newQuantity);
        }

        // Update cart quantity via API
        async function updateCartQuantity(itemId, quantity) {
            try {
                console.log('Updating cart quantity:', { itemId, quantity });

                const response = await fetch('/update-cart-quantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ itemId, quantity })
                });

                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log('Response data:', data);

                if (data.success) {
                    // Update local data
                    const item = cartItems.find(item => item.id === itemId);
                    if (item) {
                        item.quantity = quantity;
                    }
                    showToast('Cart updated successfully', 'success');
                    // Reload page to ensure price/subtotal is always correct from backend
                    setTimeout(() => { window.location.reload(); }, 500);

                    // Update cart counter in header using the response cartCount
                    const cartCount = data.cartCount || cartItems.reduce((total, item) => total + item.quantity, 0);
                    console.log('Updating cart badge to:', cartCount);

                    // Use the global updateCartCounter function from header
                    if (typeof updateCartCounter === 'function') {
                        updateCartCounter(cartCount);
                    } else {
                        // Fallback to direct element update
                        const cartBadge = document.getElementById('cartBadge');
                        if (cartBadge) {
                            cartBadge.textContent = cartCount;
                            cartBadge.style.display = cartCount > 0 ? 'block' : 'none';
                        } else {
                            console.warn('Cart badge element not found');
                        }
                    }
                } else {
                    showToast(data.message || 'Failed to update cart', 'error');
                }
            } catch (error) {
                console.error('Error updating cart:', error);
                showToast(`Something went wrong: ${error.message}. Please try again.`, 'error');
            }
        }

        // Remove item with toast confirmation
        async function removeItem(itemId) {
            // Show confirmation toast instead of browser alert
            showConfirmationToast(
                'Are you sure you want to remove this item?',
                async () => {
                    try {
                        const response = await fetch('/remove-from-cart', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ itemId })
                        });

                        const data = await response.json();
                        if (data.success) {
                            // Remove from local array
                            cartItems = cartItems.filter(item => item.id !== itemId);

                            // Remove from DOM with animation
                            const cartItem = document.querySelector(`[data-item-id="${itemId}"]`);
                            if (cartItem) {
                                cartItem.style.transition = 'all 0.3s ease';
                                cartItem.style.transform = 'translateX(-100%)';
                                cartItem.style.opacity = '0';

                                setTimeout(() => {
                                    cartItem.remove();
                                    updateUI();
                                }, 300);
                            }

                            showToast('Item removed from cart', 'success');

                            // Update cart counter in header
                            const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);
                            if (typeof updateCartCounter === 'function') {
                                updateCartCounter(totalItems);
                            } else {
                                const cartBadge = document.getElementById('cartBadge');
                                if (cartBadge) {
                                    cartBadge.textContent = totalItems;
                                    cartBadge.style.display = totalItems > 0 ? 'block' : 'none';
                                }
                            }

                            // Show empty cart message if no items left
                            if (cartItems.length === 0) {
                                showToast('Your cart is now empty', 'info');
                                setTimeout(() => {
                                    window.location.reload();
                                }, 1500);
                            }
                        } else {
                            showToast(data.message || 'Failed to remove item', 'error');
                        }
                    } catch (error) {
                        console.error('Error removing item:', error);
                        showToast('Something went wrong', 'error');
                    }
                }
            );
        }

        // Toast notification function
        function showToast(message, type = 'success') {
            // Remove existing toasts
            const existingToasts = document.querySelectorAll('.toast-notification');
            existingToasts.forEach(toast => toast.remove());

            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(toast);

            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);

            // Hide toast after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Confirmation toast function
        function showConfirmationToast(message, onConfirm) {
            // Remove existing toasts
            const existingToasts = document.querySelectorAll('.toast-notification, .confirmation-toast');
            existingToasts.forEach(toast => toast.remove());

            const confirmationToast = document.createElement('div');
            confirmationToast.className = 'confirmation-toast';
            confirmationToast.innerHTML = `
                <div class="confirmation-content">
                    <div class="confirmation-message">
                        <i class="fas fa-question-circle"></i>
                        <span>${message}</span>
                    </div>
                    <div class="confirmation-buttons">
                        <button class="confirm-btn" onclick="handleConfirm()">Yes</button>
                        <button class="cancel-btn" onclick="handleCancel()">Cancel</button>
                    </div>
                </div>
            `;

            // Add styles for confirmation toast
            const style = document.createElement('style');
            style.textContent = `
                .confirmation-toast {
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: white;
                    border-radius: 10px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    z-index: 10000;
                    opacity: 0;
                    transition: all 0.3s ease;
                    max-width: 400px;
                    width: 90%;
                }
                .confirmation-toast.show {
                    opacity: 1;
                }
                .confirmation-content {
                    padding: 2rem;
                }
                .confirmation-message {
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                    margin-bottom: 1.5rem;
                    font-size: 16px;
                    color: #333;
                }
                .confirmation-message i {
                    color: #ffc107;
                    font-size: 20px;
                }
                .confirmation-buttons {
                    display: flex;
                    gap: 1rem;
                    justify-content: flex-end;
                }
                .confirm-btn, .cancel-btn {
                    padding: 0.5rem 1.5rem;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-weight: 500;
                    transition: all 0.2s ease;
                }
                .confirm-btn {
                    background: #dc3545;
                    color: white;
                }
                .confirm-btn:hover {
                    background: #c82333;
                }
                .cancel-btn {
                    background: #6c757d;
                    color: white;
                }
                .cancel-btn:hover {
                    background: #5a6268;
                }
                .confirmation-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.5);
                    z-index: 9999;
                }
            `;
            document.head.appendChild(style);

            // Add overlay
            const overlay = document.createElement('div');
            overlay.className = 'confirmation-overlay';
            document.body.appendChild(overlay);
            document.body.appendChild(confirmationToast);

            // Global functions for buttons
            window.handleConfirm = () => {
                confirmationToast.remove();
                overlay.remove();
                style.remove();
                onConfirm();
                delete window.handleConfirm;
                delete window.handleCancel;
            };

            window.handleCancel = () => {
                confirmationToast.remove();
                overlay.remove();
                style.remove();
                delete window.handleConfirm;
                delete window.handleCancel;
            };

            // Show confirmation toast
            setTimeout(() => {
                confirmationToast.classList.add('show');
            }, 100);
        }

        // Empty cart with toast confirmation
        async function emptyCart() {
            // Show confirmation toast instead of browser alert
            showConfirmationToast(
                'Are you sure you want to empty your entire cart?',
                async () => {
                    try {
                        const response = await fetch('/empty-cart', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        const data = await response.json();
                        if (data.success) {
                            cartItems = [];
                            showToast('Cart emptied successfully', 'success');

                            // Update cart counter in header
                            if (typeof updateCartCounter === 'function') {
                                updateCartCounter(0);
                            } else {
                                const cartBadge = document.getElementById('cartBadge');
                                if (cartBadge) {
                                    cartBadge.textContent = '0';
                                    cartBadge.style.display = 'none';
                                }
                            }

                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            showToast(data.message || 'Failed to empty cart', 'error');
                        }
                    } catch (error) {
                        console.error('Error emptying cart:', error);
                        showToast('Something went wrong', 'error');
                    }
                }
            );
        }

        // Update UI
        function updateUI() {
            // Update quantity inputs and button states
            cartItems.forEach(item => {
                const cartItem = document.querySelector(`[data-item-id="${item.id}"]`);
                if (cartItem) {
                    const input = cartItem.querySelector('.qty-input');
                    const decreaseBtn = cartItem.querySelector('.qty-btn:first-child');
                    const increaseBtn = cartItem.querySelector('.qty-btn:last-child');

                    if (input) {
                        input.value = item.quantity;
                    }

                    // Update button states
                    if (decreaseBtn) {
                        decreaseBtn.disabled = item.quantity <= 1;
                    }

                    if (increaseBtn) {
                        increaseBtn.disabled = item.quantity >= 10;
                    }
                }
            });

            // Calculate and update subtotal (robust against NaN, use correct property)
            const subtotal = cartItems.reduce((total, item) => {
                const price = Number(item.price) || 0;
                const qty = Number(item.quantity) || 0;
                return total + (price * qty);
            }, 0);
            document.querySelector('.subtotal').textContent = `₹${subtotal.toFixed(2)}`;

            // Update cart badge using the global function
            const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);
            if (typeof updateCartCounter === 'function') {
                updateCartCounter(totalItems);
            } else {
                // Fallback to direct element update
                const cartBadge = document.getElementById('cartBadge');
                if (cartBadge) {
                    cartBadge.textContent = totalItems;
                    cartBadge.style.display = totalItems > 0 ? 'block' : 'none';
                }
            }

            // If cart is empty, show empty message
            if (cartItems.length === 0) {
                document.querySelector('.cart-items').innerHTML = `
                    <div class="cart-header">
                        <h2 class="cart-title">Shopping Cart</h2>
                        <button class="empty-cart-btn" onclick="emptyCart()">
                            <i class="fas fa-trash"></i> Empty my Cart
                        </button>
                    </div>
                    <div class="empty-cart">
                        <i class="fas fa-shopping-cart"></i>
                        <h3>Your cart is empty</h3>
                        <p>Add some items to get started!</p>
                    </div>
                `;
            }
        }

        // Proceed to checkout
        function proceedToCheckout() {
            // Check if cart has items
            if (cartItems.length === 0) {
                showToast('Your cart is empty. Add some items to proceed.', 'error');
                return;
            }

            // Redirect to checkout page
            window.location.href = '/checkout';
        }

        // Continue shopping
        function continueShopping() {
            window.location.href = '/shop';
        }

        // Add smooth animations on load
        document.addEventListener('DOMContentLoaded', function() {
            const items = document.querySelectorAll('.cart-item');
            items.forEach((item, index) => {
                item.style.opacity = '0';
                item.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    item.style.transition = 'all 0.5s ease';
                    item.style.opacity = '1';
                    item.style.transform = 'translateY(0)';
                }, index * 100);
            });
        });
        
    </script>
</body>
</html>