<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Categories Management - 1NOTONE Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles/admin/category.css">
</head>
<body>
    <%- include("../partials/admin/header") %>
    
    <!-- Enhanced Breadcrumb Navigation -->
    <div class="breadcrumb-container">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="/admin/dashboard">
                        <i class="fas fa-home"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li class="breadcrumb-separator">/</li>
                <li class="breadcrumb-item active">
                    <i class="fas fa-tags"></i>
                    <span>Categories</span>
                </li>
            </ol>
        </nav>
    </div>
    <!-- Main Container -->
    <div class="main-container">
        <!-- Page Header -->
        <div class="page-header">
            <div class="header-content">
                <div class="header-info">
                    <h1 class="page-title">
                        <i class="fas fa-tags"></i>
                        Categories Management
                    </h1>
                    <p class="page-subtitle">Organize and manage your product categories efficiently</p>
                </div>
                <div class="header-actions">
                    <button class="btn-primary" onclick="showAddModal()">
                        <i class="fas fa-plus"></i>
                        <span>Add Category</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon total">
                    <i class="fas fa-layer-group"></i>
                </div>
                <div class="stat-content">
                    <h3><%= cat.length %></h3>
                    <p>Total Categories</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon active">
                    <i class="fas fa-eye"></i>
                </div>
                <div class="stat-content">
                    <h3><%= cat.filter(c => c.isListed).length %></h3>
                    <p>Active Categories</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon offers">
                    <i class="fas fa-percentage"></i>
                </div>
                <div class="stat-content">
                    <h3><%= cat.filter(c => c.categoryOffer && c.categoryOffer > 0).length %></h3>
                    <p>With Offers</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon inactive">
                    <i class="fas fa-eye-slash"></i>
                </div>
                <div class="stat-content">
                    <h3><%= cat.filter(c => !c.isListed).length %></h3>
                    <p>Inactive Categories</p>
                </div>
            </div>
        </div>

        <!-- Search and Filter Section -->
        <div class="controls-section">
            <div class="search-container">
                <form action="/admin/category/" method="get" class="search-form">
                    <div class="search-input-group">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" placeholder="Search categories by name or description..." name="search" value="<%=search%>">
                        <button type="submit" class="search-btn">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Categories Table -->
        <div class="table-card">
            <div class="table-header">
                <h3>
                    <i class="fas fa-list"></i>
                    Categories List
                </h3>
                <div class="table-actions">
                    <span class="results-count">Showing <%= cat.length %> categories</span>
                </div>
            </div>
            
            <div class="table-container">
                <% if (cat.length > 0) { %>
                    <table class="categories-table">
                        <thead>
                            <tr>
                                <th>
                                    <i class="fas fa-tag"></i>
                                    Category
                                </th>
                                <th>
                                    <i class="fas fa-align-left"></i>
                                    Description
                                </th>
                                <th>
                                    <i class="fas fa-percentage"></i>
                                    Offer
                                </th>
                                <th>
                                    <i class="fas fa-cog"></i>
                                    Offer Actions
                                </th>
                                <th>
                                    <i class="fas fa-info-circle"></i>
                                    Status
                                </th>
                                <th>
                                    <i class="fas fa-toggle-on"></i>
                                    Visibility
                                </th>
                                <th>
                                    <i class="fas fa-tools"></i>
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cat.reverse().forEach((category, index) => { %>
                                <tr class="category-row" data-category-id="<%= category._id %>">
                                    <td>
                                        <div class="category-info">
                                            <div class="category-name"><%= category.name %></div>
                                            
                                        </div>
                                    </td>
                                    <td>
                                        <div class="description-cell">
                                            <p class="description-text"><%= category.description %></p>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="offer-display">
                                            <% if (category.categoryOffer && category.categoryOffer > 0) { %>
                                                <span class="offer-badge active">
                                                    <i class="fas fa-tag"></i>
                                                    <%= category.categoryOffer %>% OFF
                                                </span>
                                            <% } else { %>
                                                <span class="offer-badge inactive">
                                                    <i class="fas fa-minus"></i>
                                                    No Offer
                                                </span>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="offer-actions">
                                            <button class="action-btn offer-btn" onclick="openOfferModal('<%= category._id %>', '<%= category.name %>', <%= category.categoryOffer || 0 %>)">
                                                <i class="fas fa-<%= category.categoryOffer && category.categoryOffer > 0 ? 'edit' : 'plus' %>"></i>
                                                <%= category.categoryOffer && category.categoryOffer > 0 ? 'Edit' : 'Add' %>
                                            </button>
                                            <% if (category.categoryOffer && category.categoryOffer > 0) { %>
                                                <button class="action-btn remove-btn" onclick="removeOffer('<%= category._id %>', '<%= category.name %>')">
                                                    <i class="fas fa-times"></i>
                                                    Remove
                                                </button>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td>
                                        <% if (category.isListed) { %>
                                            <span class="status-badge active">
                                                <i class="fas fa-check-circle"></i>
                                                Active
                                            </span>
                                        <% } else { %>
                                            <span class="status-badge inactive">
                                                <i class="fas fa-times-circle"></i>
                                                Inactive
                                            </span>
                                        <% } %>
                                    </td>
                                    <td>
                                        <div class="visibility-toggle">
                                            <% if (category.isListed) { %>
                                                <button class="toggle-btn unlist" onclick="confirmUnlist('<%= category._id %>', '<%= category.name %>')">
                                                    <i class="fas fa-eye-slash"></i>
                                                    Hide
                                                </button>
                                            <% } else { %>
                                                <button class="toggle-btn list" onclick="confirmList('<%= category._id %>', '<%= category.name %>')">
                                                    <i class="fas fa-eye"></i>
                                                    Show
                                                </button>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <button class="action-btn edit-btn" onclick="showEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')">
                                                <i class="fas fa-edit"></i>
                                                Edit
                                            </button>
                                            <button class="action-btn delete-btn" onclick="deleteCategory('<%= category._id %>', '<%= category.name %>')">
                                                <i class="fas fa-trash"></i>
                                                Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                <% } else { %>
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="fas fa-tags"></i>
                        </div>
                        <h3>No Categories Found</h3>
                        <p>Get started by creating your first category</p>
                        <button class="btn-primary" onclick="showAddModal()">
                            <i class="fas fa-plus"></i>
                            Add First Category
                        </button>
                    </div>
                <% } %>
            </div>

            <!-- Enhanced Pagination -->
            <% if (totalPages > 1) { %>
                <div class="pagination-container">
                    <div class="pagination-info">
                        <span>Page <%= currentPage %> of <%= totalPages %></span>
                    </div>
                    <div class="pagination-controls">
                        <% if (currentPage > 1) { %>
                            <a href="?page=1&search=<%= search %>" class="page-btn first">
                                <i class="fas fa-angle-double-left"></i>
                            </a>
                            <a href="?page=<%= currentPage - 1 %>&search=<%= search %>" class="page-btn prev">
                                <i class="fas fa-angle-left"></i>
                                Previous
                            </a>
                        <% } %>
                        
                        <div class="page-numbers">
                            <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                                <% if (i === currentPage) { %>
                                    <span class="page-number active"><%= i %></span>
                                <% } else { %>
                                    <a href="?page=<%= i %>&search=<%= search %>" class="page-number"><%= i %></a>
                                <% } %>
                            <% } %>
                        </div>
                        
                        <% if (currentPage < totalPages) { %>
                            <a href="?page=<%= currentPage + 1 %>&search=<%= search %>" class="page-btn next">
                                Next
                                <i class="fas fa-angle-right"></i>
                            </a>
                            <a href="?page=<%= totalPages %>&search=<%= search %>" class="page-btn last">
                                <i class="fas fa-angle-double-right"></i>
                            </a>
                        <% } %>
                    </div>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Add Category Modal -->
    <div id="addModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Add New Category</h2>
                <button class="close" onclick="closeAddModal()">&times;</button>
            </div>
            <form onsubmit="handleFormSubmit(event)">
                <div class="form-group">
                    <label for="categoryName" class="form-label">Category Name</label>
                    <input type="text" id="categoryName" name="name" class="form-control" placeholder="Enter category name">
                    <div id="name-error" class="error-message"></div>
                </div>
                <div class="form-group">
                    <label for="categoryDescription" class="form-label">Description</label>
                    <textarea id="descriptionId" name="description" class="form-control" rows="4" placeholder="Enter category description"></textarea>
                    <div id="description-error" class="error-message"></div>
                </div>
                <button type="submit" class="btn-submit">
                    <i class="fas fa-plus"></i>
                    Add Category
                </button>
            </form>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Edit Category</h2>
                <button class="close" onclick="closeEditModal()">&times;</button>
            </div>
            <form onsubmit="handleEditFormSubmit(event)">
                <input type="hidden" id="editCategoryId" name="categoryId">
                <div class="form-group">
                    <label for="editCategoryName" class="form-label">Category Name</label>
                    <input type="text" id="editCategoryName" name="categoryName" class="form-control" placeholder="Enter category name">
                    <div id="edit-name-error" class="error-message"></div>
                </div>
                <div class="form-group">
                    <label for="editCategoryDescription" class="form-label">Description</label>
                    <textarea id="editCategoryDescription" name="description" class="form-control" rows="4" placeholder="Enter category description"></textarea>
                    <div id="edit-description-error" class="error-message"></div>
                </div>
                <button type="submit" class="btn-submit">
                    <i class="fas fa-save"></i>
                    Update Category
                </button>
            </form>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <script>
        // Modal functions
        function showAddModal() {
            const modal = document.getElementById('addModal');
            modal.style.display = 'block';
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
        }

        function closeAddModal() {
            const modal = document.getElementById('addModal');
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
            clearForm();
        }

        function clearForm() {
            document.getElementById('categoryName').value = '';
            document.getElementById('descriptionId').value = '';
            clearErrorMessages();
        }

        // Edit Modal functions
        function showEditModal(categoryId, categoryName, categoryDescription) {
            const modal = document.getElementById('editModal');
            
            // Populate the form with current values
            document.getElementById('editCategoryId').value = categoryId;
            document.getElementById('editCategoryName').value = categoryName;
            document.getElementById('editCategoryDescription').value = categoryDescription;
            
            // Clear any previous error messages
            clearEditErrorMessages();
            
            modal.style.display = 'block';
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
        }

        function closeEditModal() {
            const modal = document.getElementById('editModal');
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
            clearEditForm();
        }

        function clearEditForm() {
            document.getElementById('editCategoryId').value = '';
            document.getElementById('editCategoryName').value = '';
            document.getElementById('editCategoryDescription').value = '';
            clearEditErrorMessages();
        }

        function clearEditErrorMessages() {
            const errorElements = ['edit-name-error', 'edit-description-error'];
            errorElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.innerText = "";
                    element.style.display = "none";
                }
            });
            
            // Remove error classes from edit form controls
            document.querySelectorAll('#editModal .form-control').forEach(control => {
                control.classList.remove('error');
            });
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const addModal = document.getElementById('addModal');
            const editModal = document.getElementById('editModal');
            
            if (event.target === addModal) {
                closeAddModal();
            } else if (event.target === editModal) {
                closeEditModal();
            }
        }

        // Delete Category Function
        function deleteCategory(categoryId, categoryName) {
            Swal.fire({
                title: 'Are you sure?',
                text: `Do you want to delete the category "${categoryName}"? This action cannot be undone!`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/category/delete`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ id: categoryId })
                    })
                    .then(response => {
                        console.log('Response status:', response.status);
                        console.log('Response headers:', response.headers);
                        
                        // Check if response is actually JSON
                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('application/json')) {
                            throw new Error('Server returned non-JSON response');
                        }
                        
                        if (!response.ok) {
                            return response.text().then(text => {
                                console.log('Error response:', text);
                                throw new Error('Failed to delete category');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: data.message || 'Category has been deleted successfully.',
                            confirmButtonColor: '#667eea'
                        }).then(() => {
                            location.reload();
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: error.message || 'An error occurred while deleting the category.',
                            confirmButtonColor: '#ef4444'
                        });
                    });
                }
            });
        }

        // Confirm Unlist Category Function
        function confirmUnlist(categoryId, categoryName) {
            Swal.fire({
                title: 'Unlist Category?',
                text: `Are you sure you want to unlist the category "${categoryName}"? It will be hidden from users but not deleted.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#f59e0b',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, unlist it!',
                cancelButtonText: 'Cancel'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/category/list?id=${categoryId}`, {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json'
                            }
                        });

                        const data = await response.json();
                        window.location.reload()
                        if (data.success) {
                            // Update the UI without page refresh
                            updateCategoryStatus(categoryId, false);

                            Swal.fire({
                                icon: 'success',
                                title: 'Unlisted!',
                                text: data.message || 'Category has been unlisted successfully.',
                                confirmButtonColor: '#667eea',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            throw new Error(data.message || 'Failed to unlist category');
                        }
                    } catch (error) {
                        console.error('Error unlisting category:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: error.message || 'Failed to unlist category. Please try again.',
                            confirmButtonColor: '#ef4444'
                        });
                    }
                }
            });
        }

        // Confirm List Category Function
        function confirmList(categoryId, categoryName) {
            Swal.fire({
                title: 'List Category?',
                text: `Are you sure you want to list the category "${categoryName}"? It will be visible to users again.`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, list it!',
                cancelButtonText: 'Cancel'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/category/unlist?id=${categoryId}`, {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json'
                            }
                        });

                        const data = await response.json();
                        window.location.reload()
                        if (data.success) {
                            // Update the UI without page refresh
                            updateCategoryStatus(categoryId, true);

                            Swal.fire({
                                icon: 'success',
                                title: 'Listed!',
                                text: data.message || 'Category has been listed successfully.',
                                confirmButtonColor: '#667eea',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            throw new Error(data.message || 'Failed to list category');
                        }
                    } catch (error) {
                        console.error('Error listing category:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: error.message || 'Failed to list category. Please try again.',
                            confirmButtonColor: '#ef4444'
                        });
                    }
                }
            });
        }

        // Function to update category status in the UI without page refresh
        function updateCategoryStatus(categoryId, isListed) {
            // Find the table row for this category
            const rows = document.querySelectorAll('tbody tr');

            rows.forEach(row => {
                const editButton = row.querySelector(`a[href*="editCategory?id=${categoryId}"]`);
                if (editButton) {
                    // Update status badge
                    const statusCell = row.cells[4]; // Status column
                    const statusBadge = statusCell.querySelector('.status-badge');

                    if (isListed) {
                        statusBadge.className = 'status-badge status-listed';
                        statusBadge.innerHTML = '<i class="fas fa-check-circle"></i> Listed';
                    } else {
                        statusBadge.className = 'status-badge status-unlisted';
                        statusBadge.innerHTML = '<i class="fas fa-times-circle"></i> Unlisted';
                    }

                    // Update list/unlist button
                    const actionCell = row.cells[5]; // List/Unlist column
                    const actionButton = actionCell.querySelector('button');

                    if (isListed) {
                        actionButton.className = 'btn btn-unlist';
                        actionButton.onclick = () => confirmUnlist(categoryId, row.cells[0].textContent.trim());
                        actionButton.innerHTML = '<i class="fas fa-eye-slash"></i> Unlist';
                    } else {
                        actionButton.className = 'btn btn-list';
                        actionButton.onclick = () => confirmList(categoryId, row.cells[0].textContent.trim());
                        actionButton.innerHTML = '<i class="fas fa-eye"></i> List';
                    }
                }
            });
        }

        // Form submission
        function handleFormSubmit(event) {
            event.preventDefault();
            console.log("Form submitted 👌");
            
            if (!validateForm()) {
                console.log("Form not valid ❌");
                return;
            }
            
            const name = document.getElementsByName("name")[0].value.trim();
            const description = document.getElementById("descriptionId").value.trim();
            
            fetch("/admin/category/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name, description })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message);
                    });
                }
                return response.json();
            })
            .then(data => {
                Swal.fire({
                    icon: "success",
                    title: "Success!",
                    text: data.message,
                    confirmButtonText: "OK",
                    confirmButtonColor: "#667eea"
                }).then(() => {
                    closeAddModal();
                    location.reload();
                });
            })
            .catch(error => {
                if (error.message === 'Category already exists') {
                    Swal.fire({
                        icon: "error",
                        title: "Oops!",
                        text: "Category already exists",
                        confirmButtonColor: "#ef4444"
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops!",
                        text: "An error occurred while adding the category",
                        confirmButtonColor: "#ef4444"
                    });
                }
            });
        }

        // Edit form submission
        function handleEditFormSubmit(event) {
            event.preventDefault();
            console.log("Edit form submitted 👌");
            
            if (!validateEditForm()) {
                console.log("Edit form not valid ❌");
                return;
            }
            
            const categoryId = document.getElementById("editCategoryId").value;
            const categoryName = document.getElementById("editCategoryName").value.trim();
            const description = document.getElementById("editCategoryDescription").value.trim();
            
            fetch(`/admin/category/edit/${categoryId}`, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: JSON.stringify({ categoryName, description })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Failed to update category');
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    if (data.noChanges) {
                        // No changes detected - show info message
                        Swal.fire({
                            icon: "info",
                            title: "No Changes Made",
                            text: "No changes were detected. The category information remains the same.",
                            confirmButtonText: "OK",
                            confirmButtonColor: "#667eea"
                        }).then(() => {
                            closeEditModal();
                        });
                    } else {
                        // Show success message and reload
                        Swal.fire({
                            icon: "success",
                            title: "Success!",
                            text: data.message,
                            confirmButtonText: "OK",
                            confirmButtonColor: "#667eea"
                        }).then(() => {
                            closeEditModal();
                            location.reload();
                        });
                    }
                } else {
                    throw new Error(data.error || 'Failed to update category');
                }
            })
            .catch(error => {
                if (error.message.includes('already exists')) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops!",
                        text: "Category with this name already exists",
                        confirmButtonColor: "#ef4444"
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops!",
                        text: error.message || "An error occurred while updating the category",
                        confirmButtonColor: "#ef4444"
                    });
                }
            });
        }

        // Edit form validation
        function validateEditForm() {
            console.log("Edit validation started ✅");
            clearEditErrorMessages();
            
            const name = document.getElementById("editCategoryName").value.trim();
            const description = document.getElementById("editCategoryDescription").value.trim();
            let isValid = true;

            if (name === "") {
                displayEditErrorMessage("edit-name-error", "Please enter a category name");
                document.getElementById("editCategoryName").classList.add("error");
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayEditErrorMessage("edit-name-error", "Name should only contain letters and spaces");
                document.getElementById("editCategoryName").classList.add("error");
                isValid = false;
            } else {
                document.getElementById("editCategoryName").classList.remove("error");
            }

            if (description === "") {
                displayEditErrorMessage("edit-description-error", "Please enter a description");
                document.getElementById("editCategoryDescription").classList.add("error");
                isValid = false;
            } else {
                document.getElementById("editCategoryDescription").classList.remove("error");
            }

            return isValid;
        }

        function displayEditErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }
        }

        // Add validation to prevent leading whitespace in category name fields
        document.getElementById('categoryName').addEventListener('input', function() {
            if (this.value.startsWith(' ')) {
                this.value = this.value.trimStart();
            }
        });

        // Add the same validation for edit form when it's loaded
        document.addEventListener('DOMContentLoaded', function() {
            const editCategoryName = document.getElementById('editCategoryName');
            if (editCategoryName) {
                editCategoryName.addEventListener('input', function() {
                    if (this.value.startsWith(' ')) {
                        this.value = this.value.trimStart();
                    }
                });
            }
        });

        // Form validation
        function validateForm() {
            console.log("Validation started ✅");
            clearErrorMessages();
            
            const name = document.getElementsByName("name")[0].value.trim();
            const description = document.getElementById("descriptionId").value.trim();
            let isValid = true;

            if (name === "") {
                displayErrorMessage("name-error", "Please enter a category name");
                document.getElementById("categoryName").classList.add("error");
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage("name-error", "Name should only contain letters and spaces");
                document.getElementById("categoryName").classList.add("error");
                isValid = false;
            } else {
                document.getElementById("categoryName").classList.remove("error");
            }

            if (description === "") {
                displayErrorMessage("description-error", "Please enter a description");
                document.getElementById("descriptionId").classList.add("error");
                isValid = false;
            } else {
                document.getElementById("descriptionId").classList.remove("error");
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName("error-message");
            Array.from(errorElements).forEach((element) => {
                element.innerText = "";
                element.style.display = "none";
            });
            
            // Remove error classes from form controls
            document.querySelectorAll('.form-control').forEach(control => {
                control.classList.remove('error');
            });
        }

        </script>

        <!-- Category Offer Modal -->
        <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="offerModalLabel">Add Category Offer</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="offerForm">
                            <input type="hidden" id="categoryId" name="categoryId">

                            <div class="mb-3">
                                <label for="offerPercentage" class="form-label">Offer Percentage (%)</label>
                                <input type="number" class="form-control" id="offerPercentage" name="offerPercentage"
                                       min="0" max="90" step="1" required>
                                <div class="form-text">Enter a percentage between 0 and 90</div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="saveOffer()">Save Offer</button>
                    </div>
                </div>
            </div>
        </div>

        <script>
        // Open offer modal
        function openOfferModal(categoryId, categoryName, currentOffer) {
            document.getElementById('categoryId').value = categoryId;
            document.getElementById('offerPercentage').value = currentOffer || '';

            // Update modal title based on whether it's adding or editing
            const modalTitle = document.getElementById('offerModalLabel');
            modalTitle.textContent = currentOffer > 0 ? 'Edit Category Offer' : 'Add Category Offer';

            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('offerModal'));
            modal.show();
        }

        // Save offer function
        async function saveOffer() {
            try {
                const categoryId = document.getElementById('categoryId').value;
                const offerPercentage = document.getElementById('offerPercentage').value;

                // Validate input
                if (!offerPercentage || offerPercentage < 0 || offerPercentage > 90) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Invalid Input',
                        text: 'Please enter a valid offer percentage between 0 and 90',
                        confirmButtonColor: '#667eea'
                    });
                    return;
                }

                const response = await fetch('/admin/category/offer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        categoryId: categoryId,
                        offerPercentage: parseFloat(offerPercentage)
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('offerModal'));
                    modal.hide();

                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Category offer saved successfully!',
                        confirmButtonColor: '#667eea'
                    }).then(() => {
                        // Reload page to show updated offer
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to save offer',
                        confirmButtonColor: '#ef4444'
                    });
                }
            } catch (error) {
                console.error('Error saving offer:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error saving offer. Please try again.',
                    confirmButtonColor: '#ef4444'
                });
            }
        }

        // Remove offer function
        async function removeOffer(categoryId, categoryName) {
            try {
                // Show confirmation dialog
                const result = await Swal.fire({
                    title: 'Remove Offer?',
                    text: `Are you sure you want to remove the offer from "${categoryName}"?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#ef4444',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    const response = await fetch('/admin/category/offer', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            categoryId: categoryId
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Removed!',
                            text: 'Category offer has been removed successfully!',
                            confirmButtonColor: '#667eea'
                        }).then(() => {
                            // Reload page to show updated offer
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to remove offer',
                            confirmButtonColor: '#ef4444'
                        });
                    }
                }
            } catch (error) {
                console.error('Error removing offer:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error removing offer. Please try again.',
                    confirmButtonColor: '#ef4444'
                });
            }
        }
        </script>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
</body>
</html>