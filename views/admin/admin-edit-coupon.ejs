<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Coupon - Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <style>
        /* Complete CSS for the Edit Coupon Page */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}

.container {
    max-width: 800px;
    margin: 0 auto;
}

/* Breadcrumb Navigation Styles */
.breadcrumb-nav {
    margin-bottom: 20px;
    padding: 0;
    background: transparent;
}

.breadcrumb {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    list-style: none;
    padding: 14px 24px;
    margin: 0;
    font-size: 14px;
    background: rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(15px);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.breadcrumb-item {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb-item:hover {
    color: white;
}

.breadcrumb-item.active {
    color: white;
    font-weight: 500;
}

.breadcrumb-item + .breadcrumb-item::before {
    content: ">";
    margin: 0 8px;
    color: rgba(255, 255, 255, 0.6);
}

/* Main Form Container */
.form-container {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.form-header {
    text-align: center;
    margin-bottom: 40px;
}

.form-header h2 {
    color: #2d3748;
    font-weight: 700;
    font-size: 2rem;
    margin-bottom: 8px;
}

.form-header p {
    color: #718096;
    font-size: 1rem;
}

/* Form Styles */
.form-group {
    margin-bottom: 25px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    color: #2d3748;
    font-weight: 600;
    font-size: 14px;
}

.form-control {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    font-size: 14px;
    transition: all 0.3s ease;
    background: white;
}

.form-control:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-control.is-invalid {
    border-color: #e53e3e;
}

.invalid-feedback {
    display: block;
    color: #e53e3e;
    font-size: 12px;
    margin-top: 5px;
}

/* Switch Toggle Styles */
.form-check {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

.form-check-input {
    width: 50px;
    height: 25px;
    margin-right: 12px;
    background-color: #cbd5e0;
    border: none;
    border-radius: 25px;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
}

.form-check-input:checked {
    background-color: #667eea;
}

.form-check-input::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background: white;
    top: 2px;
    left: 2px;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.form-check-input:checked::before {
    transform: translateX(25px);
}

.form-check-label {
    color: #2d3748;
    font-weight: 500;
    cursor: pointer;
}

/* Button Styles */
.btn-container {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-top: 40px;
}

.btn {
    padding: 12px 30px;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
    background: #e2e8f0;
    color: #4a5568;
}

.btn-secondary:hover {
    background: #cbd5e0;
    transform: translateY(-2px);
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    .form-container {
        padding: 25px;
        margin: 10px;
    }
    
    .btn-container {
        flex-direction: column;
    }
    
    .btn {
        width: 100%;
        justify-content: center;
    }
}

/* Loading State */
.btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
}

.loading {
    display: none;
    margin-left: 8px;
}

.btn:disabled .loading {
    display: inline-block;
}

/* Discount Type Radio Buttons */
.discount-type-container {
    display: flex;
    gap: 20px;
    margin-top: 8px;
}

.form-check-inline {
    display: flex;
    align-items: center;
    gap: 8px;
}

.form-check-inline .form-check-input {
    width: 18px;
    height: 18px;
    margin: 0;
}

.form-check-inline .form-check-label {
    margin: 0;
    font-weight: 500;
    color: #4a5568;
    cursor: pointer;
}

/* Input Group for Dynamic Discount Field */
.input-group {
    display: flex;
    align-items: stretch;
}

.input-group-text {
    background: #f7fafc;
    border: 2px solid #e2e8f0;
    border-right: none;
    padding: 12px 16px;
    border-radius: 12px 0 0 12px;
    font-weight: 600;
    color: #4a5568;
    min-width: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.input-group .form-control {
    border-radius: 0 12px 12px 0;
    border-left: none;
}

.input-group .form-control:focus {
    border-left: none;
}

/* Category and Product Selection */
.category-selection, .product-selection {
    margin-top: 15px;
    padding: 15px;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    background: #f7fafc;
    max-height: 200px;
    overflow-y: auto;
}

.category-list, .product-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 10px;
    margin-top: 10px;
}

.category-item, .product-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    transition: all 0.3s ease;
}

.category-item:hover, .product-item:hover {
    border-color: #667eea;
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.1);
}

.category-item input, .product-item input {
    margin: 0;
}

.category-item label, .product-item label {
    margin: 0;
    cursor: pointer;
    font-size: 13px;
    color: #4a5568;
}

.search-container {
    margin-bottom: 15px;
}

.search-container .form-control {
    border-radius: 8px;
    font-size: 13px;
}

.usage-limits-section {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
}

.usage-limits-section .section-title {
    color: #495057;
    font-weight: 600;
    margin-bottom: 15px;
    padding-bottom: 8px;
    border-bottom: 2px solid #dee2e6;
}

.usage-limits-section .form-group {
    margin-bottom: 15px;
}

.usage-limits-section .form-text {
    font-size: 0.875rem;
    margin-top: 5px;
}
    </style>
</head>
<body>
    <div class="container">
        <!-- Breadcrumb Navigation -->
        <nav class="breadcrumb-nav">
            <ol class="breadcrumb">
                <li><a href="/admin/dashboard" class="breadcrumb-item">Dashboard</a></li>
                <li><a href="/admin/coupons" class="breadcrumb-item">Coupons</a></li>
                <li class="breadcrumb-item active">Edit Coupon</li>
            </ol>
        </nav>

        <!-- Main Form Container -->
        <div class="form-container">
            <div class="form-header">
                <h2><i class="fas fa-edit"></i> Edit Coupon</h2>
                <p>Update coupon details and settings</p>
            </div>

            <form id="editCouponForm">
                <input type="hidden" id="couponId" value="<%= coupon._id %>">
                
                <div class="form-group">
                    <label for="name" class="form-label">
                        <i class="fas fa-tag"></i> Coupon Code *
                    </label>
                    <input type="text" 
                           class="form-control" 
                           id="name" 
                           name="name" 
                           placeholder="Enter coupon code (e.g., SAVE20)" 
                           value="<%= coupon.name %>"
                           required>
                    <div class="invalid-feedback" id="nameError"></div>
                </div>

                <!-- Discount Type Selection -->
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-percentage"></i> Discount Type *
                    </label>
                    <div class="discount-type-container">
                        <div class="form-check-inline">
                            <input type="radio"
                                   class="form-check-input"
                                   id="discountTypeFlat"
                                   name="discountType"
                                   value="flat"
                                   <%= (coupon.discountType === 'flat' || !coupon.discountType) ? 'checked' : '' %>
                                   onchange="updateDiscountField()">
                            <label class="form-check-label" for="discountTypeFlat">
                                <i class="fas fa-rupee-sign"></i> Flat Amount (₹)
                            </label>
                        </div>
                        <div class="form-check-inline">
                            <input type="radio"
                                   class="form-check-input"
                                   id="discountTypePercentage"
                                   name="discountType"
                                   value="percentage"
                                   <%= coupon.discountType === 'percentage' ? 'checked' : '' %>
                                   onchange="updateDiscountField()">
                            <label class="form-check-label" for="discountTypePercentage">
                                <i class="fas fa-percentage"></i> Percentage (%)
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Dynamic Discount Amount Field -->
                <div class="form-group">
                    <label for="offerPrice" class="form-label">
                        <i class="fas fa-rupee-sign" id="discountIcon"></i> <span id="discountLabel">Discount Amount</span> *
                    </label>
                    <div class="input-group">
                        <span class="input-group-text" id="discountSymbol">₹</span>
                        <input type="number"
                               class="form-control"
                               id="offerPrice"
                               name="offerPrice"
                               placeholder="Enter discount amount"
                               value="<%= coupon.offerPrice %>"
                               min="1"
                               step="0.01"
                               required>
                    </div>
                    <div class="invalid-feedback" id="offerPriceError"></div>
                </div>

                <div class="form-group">
                    <label for="minimumPrice" class="form-label">
                        <i class="fas fa-shopping-cart"></i> Minimum Order Amount *
                    </label>
                    <input type="number"
                           class="form-control"
                           id="minimumPrice"
                           name="minimumPrice"
                           placeholder="Enter minimum order amount"
                           value="<%= coupon.minimumPrice %>"
                           min="0"
                           step="0.01"
                           required>
                    <div class="invalid-feedback" id="minimumPriceError"></div>
                </div>

                <!-- Start Date Field -->
                <div class="form-group">
                    <label for="startDate" class="form-label">
                        <i class="fas fa-calendar-plus"></i> Start Date *
                    </label>
                    <input type="date"
                           class="form-control"
                           id="startDate"
                           name="startDate"
                           value="<%= coupon.startDate ? coupon.startDate.toISOString().split('T')[0] : new Date().toISOString().split('T')[0] %>"
                           required>
                    <div class="invalid-feedback" id="startDateError"></div>
                </div>

                <div class="form-group">
                    <label for="expireOn" class="form-label">
                        <i class="fas fa-calendar-alt"></i> Expiration Date *
                    </label>
                    <input type="date"
                           class="form-control"
                           id="expireOn"
                           name="expireOn"
                           value="<%= coupon.expireOn.toISOString().split('T')[0] %>"
                           required>
                    <div class="invalid-feedback" id="expireOnError"></div>
                </div>

                <!-- Category Selection -->
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-tags"></i> Applicable Categories *
                    </label>
                    <div class="form-check">
                        <input type="checkbox"
                               class="form-check-input"
                               id="isAllCategories"
                               name="isAllCategories"
                               <%= (coupon.isAllCategories !== false) ? 'checked' : '' %>
                               onchange="toggleCategorySelection()">
                        <label class="form-check-label" for="isAllCategories">
                            <i class="fas fa-globe"></i> Apply to All Categories
                        </label>
                    </div>
                    <div id="categorySelection" class="category-selection" style="display: <%= (coupon.isAllCategories !== false) ? 'none' : 'block' %>;">
                        <div class="category-list" id="categoryList">
                            <!-- Categories will be loaded dynamically -->
                        </div>
                    </div>
                </div>

                <!-- Product Selection -->
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-box"></i> Applicable Products *
                    </label>
                    <div class="form-check">
                        <input type="checkbox"
                               class="form-check-input"
                               id="isAllProducts"
                               name="isAllProducts"
                               <%= (coupon.isAllProducts !== false) ? 'checked' : '' %>
                               onchange="toggleProductSelection()">
                        <label class="form-check-label" for="isAllProducts">
                            <i class="fas fa-globe"></i> Apply to All Products
                        </label>
                    </div>
                    <div id="productSelection" class="product-selection" style="display: <%= (coupon.isAllProducts !== false) ? 'none' : 'block' %>;">
                        <div class="search-container">
                            <input type="text"
                                   class="form-control"
                                   id="productSearch"
                                   placeholder="Search products..."
                                   onkeyup="searchProducts()">
                        </div>
                        <div class="product-list" id="productList">
                            <!-- Products will be loaded dynamically -->
                        </div>
                    </div>
                </div>

                <!-- Usage Limits Section -->
                <div class="usage-limits-section">
                    <h6 class="section-title">
                        <i class="fas fa-chart-line"></i> Usage Limits
                    </h6>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="maxUsesPerUser" class="form-label">
                                    <i class="fas fa-user"></i> Maximum Uses Per User
                                </label>
                                <input type="number"
                                       class="form-control"
                                       id="maxUsesPerUser"
                                       name="maxUsesPerUser"
                                       min="1"
                                       value="<%= coupon.maxUsesPerUser || 1 %>"
                                       required>
                                <small class="form-text text-muted">
                                    How many times a single user can use this coupon (minimum: 1)
                                </small>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="totalUsageLimit" class="form-label">
                                    <i class="fas fa-users"></i> Total Usage Limit
                                </label>
                                <input type="number"
                                       class="form-control"
                                       id="totalUsageLimit"
                                       name="totalUsageLimit"
                                       min="1"
                                       value="<%= coupon.totalUsageLimit || '' %>"
                                       placeholder="Leave empty for unlimited">
                                <small class="form-text text-muted">
                                    Maximum total number of users who can use this coupon (optional)
                                    <% if (coupon.currentUsageCount > 0) { %>
                                        <br><strong>Current usage: <%= coupon.currentUsageCount %> users</strong>
                                    <% } %>
                                </small>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-check">
                    <input type="checkbox"
                           class="form-check-input"
                           id="islist"
                           name="islist"
                           <%= coupon.islist ? 'checked' : '' %>>
                    <label class="form-check-label" for="islist">
                        <i class="fas fa-toggle-on"></i> Active Status
                    </label>
                </div>

                <div class="btn-container">
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-save"></i> Update Coupon
                        <i class="fas fa-spinner fa-spin loading"></i>
                    </button>
                    <a href="/admin/coupons" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>

    <script>
        let categories = [];
        let products = [];
        const couponData = {
            applicableCategories: <%- JSON.stringify(coupon.applicableCategories || []) %>,
            applicableProducts: <%- JSON.stringify(coupon.applicableProducts || []) %>
        };

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum dates
            const today = new Date().toISOString().split('T')[0];
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const minExpireDate = tomorrow.toISOString().split('T')[0];

            document.getElementById('startDate').setAttribute('min', today);
            document.getElementById('expireOn').setAttribute('min', minExpireDate);

            // Load categories and products
            loadCategories();
            loadProducts();

            // Initialize discount field based on current type
            updateDiscountField();

            // Add date validation
            document.getElementById('startDate').addEventListener('change', validateDates);
            document.getElementById('expireOn').addEventListener('change', validateDates);

            // Add usage limits validation
            document.getElementById('maxUsesPerUser').addEventListener('input', validateUsageLimits);
            document.getElementById('totalUsageLimit').addEventListener('input', validateUsageLimits);
        });

        // Update discount field based on type selection
        function updateDiscountField() {
            const isFlat = document.getElementById('discountTypeFlat').checked;
            const discountSymbol = document.getElementById('discountSymbol');
            const discountIcon = document.getElementById('discountIcon');
            const discountLabel = document.getElementById('discountLabel');
            const offerPriceInput = document.getElementById('offerPrice');

            if (isFlat) {
                discountSymbol.textContent = '₹';
                discountIcon.className = 'fas fa-rupee-sign';
                discountLabel.textContent = 'Discount Amount';
                offerPriceInput.placeholder = 'Enter discount amount';
                offerPriceInput.setAttribute('min', '1');
                offerPriceInput.setAttribute('max', '999999');
            } else {
                discountSymbol.textContent = '%';
                discountIcon.className = 'fas fa-percentage';
                discountLabel.textContent = 'Discount Percentage';
                offerPriceInput.placeholder = 'Enter discount percentage';
                offerPriceInput.setAttribute('min', '1');
                offerPriceInput.setAttribute('max', '100');
            }
        }

        // Validate start and end dates
        function validateDates() {
            const startDate = new Date(document.getElementById('startDate').value);
            const expireDate = new Date(document.getElementById('expireOn').value);

            if (startDate && expireDate && startDate >= expireDate) {
                document.getElementById('expireOnError').textContent = 'Expiration date must be after start date';
                document.getElementById('expireOn').classList.add('is-invalid');
                return false;
            } else {
                document.getElementById('expireOnError').textContent = '';
                document.getElementById('expireOn').classList.remove('is-invalid');
                return true;
            }
        }

        // Toggle category selection
        function toggleCategorySelection() {
            const isAllCategories = document.getElementById('isAllCategories').checked;
            const categorySelection = document.getElementById('categorySelection');

            if (isAllCategories) {
                categorySelection.style.display = 'none';
                // Uncheck all category checkboxes
                const categoryCheckboxes = categorySelection.querySelectorAll('input[type="checkbox"]');
                categoryCheckboxes.forEach(cb => cb.checked = false);
            } else {
                categorySelection.style.display = 'block';
            }
        }

        // Toggle product selection
        function toggleProductSelection() {
            const isAllProducts = document.getElementById('isAllProducts').checked;
            const productSelection = document.getElementById('productSelection');

            if (isAllProducts) {
                productSelection.style.display = 'none';
                // Uncheck all product checkboxes
                const productCheckboxes = productSelection.querySelectorAll('input[type="checkbox"]');
                productCheckboxes.forEach(cb => cb.checked = false);
            } else {
                productSelection.style.display = 'block';
            }
        }

        // Load categories from server
        async function loadCategories() {
            try {
                const response = await fetch('/admin/get-categories');
                const result = await response.json();

                if (result.success) {
                    categories = result.categories;
                    renderCategories();
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        // Load products from server
        async function loadProducts() {
            try {
                const response = await fetch('/admin/get-products');
                const result = await response.json();

                if (result.success) {
                    products = result.products;
                    renderProducts();
                }
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        // Render categories with pre-selection
        function renderCategories() {
            const categoryList = document.getElementById('categoryList');
            categoryList.innerHTML = '';

            categories.forEach(category => {
                const isSelected = couponData.applicableCategories.some(catId => catId.toString() === category._id.toString());
                const categoryItem = document.createElement('div');
                categoryItem.className = 'category-item';
                categoryItem.innerHTML = `
                    <input type="checkbox" id="cat_${category._id}" name="applicableCategories" value="${category._id}" ${isSelected ? 'checked' : ''}>
                    <label for="cat_${category._id}">${category.name}</label>
                `;
                categoryList.appendChild(categoryItem);
            });
        }

        // Render products with pre-selection
        function renderProducts() {
            const productList = document.getElementById('productList');
            productList.innerHTML = '';

            products.forEach(product => {
                const isSelected = couponData.applicableProducts.some(prodId => prodId.toString() === product._id.toString());
                const productItem = document.createElement('div');
                productItem.className = 'product-item';
                productItem.innerHTML = `
                    <input type="checkbox" id="prod_${product._id}" name="applicableProducts" value="${product._id}" ${isSelected ? 'checked' : ''}>
                    <label for="prod_${product._id}">${product.productName}</label>
                `;
                productList.appendChild(productItem);
            });
        }

        // Search products
        function searchProducts() {
            const searchTerm = document.getElementById('productSearch').value.toLowerCase();
            const filteredProducts = products.filter(product =>
                product.productName.toLowerCase().includes(searchTerm)
            );

            const productList = document.getElementById('productList');
            productList.innerHTML = '';

            filteredProducts.forEach(product => {
                const isSelected = couponData.applicableProducts.some(prodId => prodId.toString() === product._id.toString());
                const productItem = document.createElement('div');
                productItem.className = 'product-item';
                productItem.innerHTML = `
                    <input type="checkbox" id="prod_${product._id}" name="applicableProducts" value="${product._id}" ${isSelected ? 'checked' : ''}>
                    <label for="prod_${product._id}">${product.productName}</label>
                `;
                productList.appendChild(productItem);
            });
        }

        // Form submission handler
        document.getElementById('editCouponForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // Validate dates first
            if (!validateDates()) {
                return;
            }

            const submitBtn = document.getElementById('submitBtn');
            const formData = new FormData(this);
            const couponId = document.getElementById('couponId').value;

            // Convert FormData to regular object
            const data = {};
            for (let [key, value] of formData.entries()) {
                if (key === 'islist' || key === 'isAllCategories' || key === 'isAllProducts') {
                    data[key] = true;
                } else if (key === 'applicableCategories' || key === 'applicableProducts') {
                    if (!data[key]) data[key] = [];
                    data[key].push(value);
                } else {
                    data[key] = value;
                }
            }

            // Handle unchecked checkboxes
            if (!formData.has('islist')) data.islist = false;
            if (!formData.has('isAllCategories')) data.isAllCategories = false;
            if (!formData.has('isAllProducts')) data.isAllProducts = false;

            // Validate category/product selection
            if (!data.isAllCategories && (!data.applicableCategories || data.applicableCategories.length === 0)) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Please select at least one category or choose "Apply to All Categories"',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            if (!data.isAllProducts && (!data.applicableProducts || data.applicableProducts.length === 0)) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Please select at least one product or choose "Apply to All Products"',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            // Validate usage limits
            if (data.maxUsesPerUser && parseInt(data.maxUsesPerUser) < 1) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Maximum uses per user must be at least 1',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            if (data.totalUsageLimit && parseInt(data.totalUsageLimit) < 1) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Total usage limit must be at least 1',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            // Validate total usage limit against current usage
            const currentUsage = <%= coupon.currentUsageCount || 0 %>;
            if (data.totalUsageLimit && parseInt(data.totalUsageLimit) < currentUsage) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: `Total usage limit cannot be less than current usage (${currentUsage} users)`,
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            // Clear previous errors
            clearErrors();

            // Disable submit button and show loading
            submitBtn.disabled = true;
            
            try {
                const response = await fetch(`/admin/edit-coupon/${couponId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    await Swal.fire({
                        title: 'Success!',
                        text: result.message,
                        icon: 'success',
                        confirmButtonColor: '#667eea'
                    });
                    window.location.href = '/admin/coupons';
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message,
                        icon: 'error',
                        confirmButtonColor: '#667eea'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Something went wrong. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
            } finally {
                submitBtn.disabled = false;
            }
        });
        
        function clearErrors() {
            const errorElements = document.querySelectorAll('.invalid-feedback');
            const inputElements = document.querySelectorAll('.form-control');
            
            errorElements.forEach(el => el.textContent = '');
            inputElements.forEach(el => el.classList.remove('is-invalid'));
        }
    </script>
</body>
</html>
