<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet"/>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <style>
        /* Complete CSS for the Edit Product Page */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

/* Breadcrumb Navigation Styles */
.breadcrumb-nav {
    margin-bottom: 20px;
    padding: 0;
    background: transparent;
}

.breadcrumb {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    list-style: none;
    padding: 14px 24px;
    margin: 0;
    font-size: 14px;
    background: rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(15px);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15), 
                0 2px 8px rgba(255, 255, 255, 0.1) inset;
}

.breadcrumb-item {
    display: flex;
    align-items: center;
}

.breadcrumb-item a {
    text-decoration: none;
    color: #ffffff;
    padding: 8px 14px;
    border-radius: 8px;
    transition: all 0.3s ease-in-out;
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.breadcrumb-item a:hover {
    color: #ffffff;
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
    text-decoration: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.breadcrumb-item a:focus {
    outline: 2px solid rgba(255, 255, 255, 0.7);
    outline-offset: 2px;
}

.breadcrumb-item.active {
    color: rgba(255, 255, 255, 0.8);
    font-weight: 500;
    padding: 8px 14px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.breadcrumb-separator {
    margin: 0 10px;
    color: rgba(255, 255, 255, 0.7);
    font-weight: 400;
    font-size: 16px;
    user-select: none;
}

/* Icon styles */
.breadcrumb-item i {
    font-size: 13px;
    margin-right: 4px;
}

/* Responsive design */
@media (max-width: 768px) {
    .breadcrumb {
        font-size: 13px;
        padding: 10px 12px;
    }
    
    .breadcrumb-item a,
    .breadcrumb-item.active {
        padding: 3px 6px;
    }
    
    .breadcrumb-separator {
        margin: 0 6px;
    }
    
    .breadcrumb-item i {
        font-size: 12px;
    }
}

@media (max-width: 480px) {
    .breadcrumb {
        font-size: 12px;
        padding: 8px 10px;
    }
    
    .breadcrumb-separator {
        margin: 0 4px;
    }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .breadcrumb {
        background: rgba(255, 255, 255, 0.1);
        border-color: rgba(255, 255, 255, 0.15);
    }
    
    .breadcrumb-item a {
        color: rgba(255, 255, 255, 0.85);
    }
    
    .breadcrumb-item a:hover {
        color: #ffffff;
        background: rgba(255, 255, 255, 0.15);
    }
    
    .breadcrumb-item.active {
        color: rgba(255, 255, 255, 0.6);
    }
    
    .breadcrumb-separator {
        color: rgba(255, 255, 255, 0.5);
    }
}

/* Alternative style variations for gradient backgrounds */
.breadcrumb-nav.glass .breadcrumb {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.18);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.breadcrumb-nav.minimal .breadcrumb {
    background: transparent;
    border: none;
    box-shadow: none;
    backdrop-filter: none;
    padding: 8px 0;
}

.breadcrumb-nav.minimal .breadcrumb-item a:hover {
    background: rgba(255, 255, 255, 0.15);
    text-decoration: none;
}

.breadcrumb-nav.solid .breadcrumb {
    background: rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: white;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            color: rgba(255,255,255,0.9);
            font-size: 1.1rem;
        }

        .form-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .form-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 30px;
            text-align: center;
        }

        .form-header h2 {
            color: white;
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .form-header p {
            color: rgba(255,255,255,0.9);
        }

        .form-body {
            padding: 40px;
        }

        .form-grid {
            display: grid;
            gap: 25px;
        }

        .form-group {
            position: relative;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
            font-size: 0.95rem;
        }

        /* Enhanced Size Checkbox Styles */
        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            margin-top: 8px;
        }

        .checkbox-group label {
            display: flex;
            align-items: center;
            cursor: pointer;
            border: 1.5px solid #d1d5db;
            border-radius: 8px;
            padding: 10px 16px;
            transition: all 0.3s ease;
            background-color: #f9fafb;
            position: relative;
            overflow: hidden;
            min-width: 80px;
            justify-content: center;
        }

        .checkbox-group label:hover {
            border-color: #667eea;
            background-color: #f0f4ff;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);
        }

        .checkbox-group input[type="checkbox"] {
            display: none;
        }

        .checkbox-group span {
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
        }

        .checkbox-group input[type="checkbox"]:checked + span {
            color: #ffffff;
            font-weight: 600;
        }

        .checkbox-group label::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transform: scale(0);
            transition: transform 0.3s ease;
            border-radius: 6px;
            z-index: 0;
        }

        .checkbox-group label:has(input[type="checkbox"]:checked)::before {
            transform: scale(1);
        }

        .checkbox-group label:has(input[type="checkbox"]:checked) {
            border-color: #667eea;
            background-color: transparent;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.25);
        }

        .checkbox-group label:has(input[type="checkbox"]:checked) span {
            color: #ffffff;
            font-weight: 600;
        }

        .checkbox-group label:focus-within {
            outline: 2px solid rgba(102, 126, 234, 0.5);
            outline-offset: 2px;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f9fafb;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-select {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 12px center;
            background-repeat: no-repeat;
            background-size: 16px;
            padding-right: 40px;
            appearance: none;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .textarea-control {
            min-height: 120px;
            resize: vertical;
        }

        /* Product Variants Section */
        .product-variants-section {
            background: #f8fafc;
            border-radius: 16px;
            padding: 30px;
            margin-top: 30px;
            border: 1px solid #e5e7eb;
        }

        .product-variants-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .product-variants-header h3 {
            color: #374151;
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .product-variants-header p {
            color: #6b7280;
            font-size: 0.9rem;
        }

        .variants-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .variant-item {
            background: white;
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #e5e7eb;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .variant-item h4 {
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f3f4f6;
        }

        .variant-field {
            margin-bottom: 15px;
        }

        .variant-field label {
            display: block;
            font-size: 0.85rem;
            font-weight: 500;
            color: #6b7280;
            margin-bottom: 5px;
        }

        .variant-field input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }

        .variant-field input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
        }

        .image-upload-section {
            background: #f8fafc;
            border-radius: 16px;
            padding: 30px;
            margin-top: 30px;
            border: 2px dashed #d1d5db;
            transition: all 0.3s ease;
        }

        .image-upload-section:hover {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .image-upload-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .image-upload-header h3 {
            color: #374151;
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .image-upload-header p {
            color: #6b7280;
            font-size: 0.9rem;
        }

        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 12px;
            min-height: 80px;
            align-items: center;
            justify-content: center;
        }

        .thumbnail {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .thumbnail:hover {
            transform: scale(1.05);
        }

        .thumbnail img {
            width: 60px;
            height: 60px;
            object-fit: cover;
        }

        .remove-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            cursor: pointer;
            font-weight: bold;
        }

        .image-input-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .image-input-item {
            background: white;
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #e5e7eb;
        }

        .image-preview {
            width: 100%;
            height: 150px;
            background: #f3f4f6;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
            overflow: hidden;
        }

        .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: cover;
        }

        .image-preview.empty {
            border: 2px dashed #d1d5db;
            color: #9ca3af;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input {
            position: absolute;
            left: -9999px;
        }

        .file-input-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
            width: 100%;
        }

        .file-input-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .image-cropper {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-top: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .image-cropper img {
            max-width: 100%;
            max-height: 200px;
            object-fit: contain;
        }

        .crop-button {
            background: #10b981;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            margin-top: 10px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .crop-button:hover {
            background: #059669;
        }

        .submit-section {
            margin-top: 40px;
            text-align: center;
            padding-top: 30px;
            border-top: 1px solid #e5e7eb;
        }

        .submit-button {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: none;
            padding: 16px 40px;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .submit-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(16, 185, 129, 0.4);
        }

        .submit-button:active {
            transform: translateY(0);
        }

        .error-message {
            color: #ef4444;
            font-size: 0.85rem;
            margin-top: 5px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }

        .loading .submit-button {
            background: #9ca3af;
        }

        @media (max-width: 768px) {
            .form-body {
                padding: 20px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .image-input-group {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }

        /* Custom animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .form-container {
            animation: fadeInUp 0.6s ease-out;
        }

        .form-group {
            animation: fadeInUp 0.6s ease-out;
            animation-fill-mode: both;
        }

        .form-group:nth-child(1) { animation-delay: 0.1s; }
        .form-group:nth-child(2) { animation-delay: 0.2s; }
        .form-group:nth-child(3) { animation-delay: 0.3s; }
        .form-group:nth-child(4) { animation-delay: 0.4s; }
    </style>
</head>
<body>
    <div class="container">
        <nav class="breadcrumb-nav" aria-label="breadcrumb" style="margin-bottom: 20px;">
        <ol class="breadcrumb" style="display: flex; list-style: none; padding: 0; font-size: 14px;">
            <li class="breadcrumb-item">
                <a href="/admin/dashboard" style="text-decoration: none; color: #007bff;">
                    <i class="fas fa-home"></i> Dashboard
                </a>
            </li>
            <li class="breadcrumb-separator" style="margin: 0 5px;">/</li>
            <li class="breadcrumb-item">
                <a href="/admin/products" style="text-decoration: none; color: #007bff;">
                    Products
                </a>
            </li>
            <li class="breadcrumb-separator" style="margin: 0 5px;">/</li>
            <li class="breadcrumb-item active" style="color: #6c757d;">
                Edit Product
            </li>
        </ol>
    </nav>
        <div class="header">
            <h1><i class="fas fa-edit"></i> Edit Product</h1>
            <p>Update and manage your product inventory with ease</p>
        </div>

        <div class="form-container">
            <div class="form-header">
                <h2>Product Information</h2>
                <p>Update the details below to modify your product</p>
            </div>

            <div class="form-body">
                <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" id="productForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="product_name" class="form-label">
                                <i class="fas fa-box"></i> Product Name
                            </label>
                            <input type="text" placeholder="Enter product name" name="productName" value="<%=product.productName%>" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        
                        <input type="hidden" id="productId" value="<%=product._id%>">
                        
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-align-left"></i> Full Description
                            </label>
                            <textarea placeholder="Describe your product in detail..."  id="descriptionid" name="description" class="form-control textarea-control" rows="4"><%=product.description%></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-gift"></i> Product Offer (%)
                                </label>
                                <input placeholder="0" name="productOffer" value="<%=product.productOffer || 0%>" type="number" min="0" max="100" class="form-control">
                                <div id="productOffer-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-palette"></i> Color
                                </label>
                                <input name="color" type="text" value="<%=product.color%>" class="form-control" placeholder="Enter color">
                                <div id="color-error" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-list"></i> Category
                                </label>
                                <select class="form-control form-select" name="category">
                                    <option value="">Select a category</option>
                                    <%for(let i=0;i<cat.length;i++){%>
                                    <option value="<%=cat[i]._id%>" <%= product.category.toString() === cat[i]._id.toString() ? 'selected' : '' %>>
                                        <%=cat[i].name%>
                                    </option>
                                    <%}%>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-ruler-combined"></i> Available Sizes
                            </label>
                           <div class="checkbox-group">
    <% const selectedSizes = product.variant ? product.variant.map(v => v.size) : []; %>

    <% const allSizes = ['6', '7', '8', '9', '10']; %>
    <% allSizes.forEach(size => { %>
        <label>
            <input
                type="checkbox"
                name="sizes"
                value="<%= size %>"
                onchange="toggleSizeVariant('<%= size %>', this.checked)"
                <%= selectedSizes.includes(size) ? 'checked' : '' %> >
            <span>Size <%= size %></span>
        </label>
    <% }) %>
</div>
                            <div id="sizes-error" class="error-message"></div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-tags"></i> Tags (comma separated)
                                </label>
                                <input name="tags" type="text" class="form-control" placeholder="e.g. casual, comfortable, trendy" value="<%= product.tags ? product.tags.join(', ') : '' %>">
                                <div id="tags-error" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-info-circle"></i> Status
                                </label>
                                <select class="form-control form-select" name="status">
                                    <option value="Available" <%= product.status === 'Available' ? 'selected' : '' %>>Available</option>
                                    <option value="out of stock" <%= product.status === 'out of stock' ? 'selected' : '' %>>Out of Stock</option>
                                    <option value="Discountinued" <%= product.status === 'Discountinued' ? 'selected' : '' %>>Discontinued</option>
                                </select>
                                <div id="status-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Product Variants Section -->
                    <div class="product-variants-section" id="productVariantsSection" style="display: none;">
                        <div class="product-variants-header">
                            <h3><i class="fas fa-layer-group"></i> Product Variants</h3>
                            <p>Enter price and quantity for each size. Leave empty for unavailable sizes.</p>
                        </div>
                        <div class="variants-grid" id="variantsGrid">
                            <!-- Size variants will be dynamically added here -->
                        </div>
                        <div id="variants-error" class="error-message"></div>
                    </div>

                    <div class="image-upload-section">
                        <div class="image-upload-header">
                            <h3><i class="fas fa-images"></i> Product Images</h3>
                            <p>Maintain exactly 3 images total. You can delete existing images and upload new ones.</p>
                        </div>

                        <div class="thumbnails-container" id="addedImagesContainer">
                            <p style="color: #9ca3af; font-style: italic;">No images selected</p>
                        </div>

                       <%for(let i=0;i<product.productImage.length;i++){%>
                          <div class="col-md-12" data-image-id="<%= product.productImage[i] %>">
                                           <div class="mb-4">
                                               <div class="col-12">
                                                   <td>
                                                       <input type="hidden" value="<%=product.productImage[i]%>" id="imageDatas">
                                                       <img class="rounded" style="width: 50px; height: 60px;"
                                                           src="/uploads/product-images/<%=product.productImage[i]%>"
                                                           alt="">
                                                       <i onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>')" style="position: absolute; margin-left: .5rem; cursor: pointer;" class="fa-thin fa-x"></i>
                                                   </td>
                                               </div>
                                              
                                           </div>
                                       </div>
                                         <%}%>

                        <div class="image-input-group">
                             
                            <div class="image-input-item">
                                <div class="image-preview empty" id="preview1">
                                    <i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>
                                </div>
                                <div class="file-input-wrapper">
                                    <input class="file-input"  type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event); viewImage(event, 1);">
                                    <label for="input1" class="file-input-button">
                                        <i class="fas fa-upload"></i> Choose Image 1
                                    </label>
                                </div>

                                
                                <div id="cropperContainer1"  class="image-cropper" style="display:none;">
                                   
                                    <img src="" id="croppedImg1" alt="">
                                    <button type="button" id="saveButton1" class="crop-button">
                                        <i  class="fas fa-crop"></i> Crop & Save
                                    </button>
                                </div>
                            </div>

                          
                            <div class="image-input-item">
                                <div class="image-preview empty" id="preview2">
                                    <i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>
                                </div>
                                <div class="file-input-wrapper">
                                    <input class="file-input" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event); viewImage(event, 2);">
                                    <label for="input2" class="file-input-button">
                                        <i class="fas fa-upload"></i> Choose Image 2
                                    </label>
                                </div>
                                <div id="cropperContainer2" class="image-cropper" style="display:none;">
                                    <img src="" id="croppedImg2" alt="">
                                    <button type="button" id="saveButton2" class="crop-button">
                                        <i class="fas fa-crop"></i> Crop & Save
                                    </button>
                                </div>
                            </div>

                              <div class="image-input-item">
                                <div class="image-preview empty" id="preview3">
                                    <i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>
                                </div>
                                <div class="file-input-wrapper">
                                    <input class="file-input" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event); viewImage(event, 3);">
                                    <label for="input3" class="file-input-button">
                                        <i class="fas fa-upload"></i> Choose Image 3
                                    </label>
                                </div>
                                <div id="cropperContainer3" class="image-cropper" style="display:none;">
                                    <img src="" id="croppedImg3" alt="">
                                    <button type="button" id="saveButton3" class="crop-button">
                                        <i class="fas fa-crop"></i> Crop & Save
                                    </button>
                                </div>
                            </div>

                           
                        </div>
                        <div id="images-error" class="error-message"></div>
                    </div>

                    <div class="submit-section">
                        <button class="submit-button" type="button" onclick="validateAndSubmit()">
                            <i class="fas fa-save"></i> Update Product
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>
      const croppers = {};
const selectedSizes = [];
const sizeVariants = {};

// Initialize existing variants from product data
function initializeExistingVariants() {
    const existingVariants = <%- JSON.stringify(product.variant || []) %>;
    console.log('🔍 DEBUG: Initializing variants:', existingVariants);

    // Clear existing data
    selectedSizes.length = 0;
    Object.keys(sizeVariants).forEach(key => delete sizeVariants[key]);

    if (!Array.isArray(existingVariants) || existingVariants.length === 0) {
        console.log('🔍 DEBUG: No variants found');
        return;
    }

    // Process each variant
    existingVariants.forEach(variant => {
        const size = variant.size;
        if (!selectedSizes.includes(size)) {
            selectedSizes.push(size);
        }

        // Store variant data with proper type conversion
        sizeVariants[size] = {
            price: variant.varientPrice ? String(variant.varientPrice) : '',
            quantity: variant.varientquantity ? String(variant.varientquantity) : ''
        };

        // Check the corresponding checkbox
        const checkbox = document.querySelector(`input[name="sizes"][value="${size}"]`);
        if (checkbox) {
            checkbox.checked = true;
        }
    });

    // Update the variants section
    if (selectedSizes.length > 0) {
        updateVariantsSection();
    }
}

// Toggle size variant section
function toggleSizeVariant(size, isChecked) {
    if (isChecked) {
        if (!selectedSizes.includes(size)) {
            selectedSizes.push(size);
            addSizeVariant(size);
        }
    } else {
        const index = selectedSizes.indexOf(size);
        if (index > -1) {
            selectedSizes.splice(index, 1);
        }
        removeSizeVariant(size);
        delete sizeVariants[size];
    }
    updateVariantsSection();
}

// Add size variant
function addSizeVariant(size) {
    // Check if variant data exists in existing variants
    const existingVariants = <%- JSON.stringify(product.variant || []) %>;
    const variant = existingVariants.find(v => v.size === size);

    if (!sizeVariants[size]) {
        sizeVariants[size] = {
            price: variant ? String(variant.varientPrice || '') : '',
            quantity: variant ? String(variant.varientquantity || '') : ''
        };
    }
}

// Remove size variant
function removeSizeVariant(size) {
    const variantElement = document.getElementById(`variant-${size}`);
    if (variantElement) {
        variantElement.remove();
    }
}

// Update variants section visibility and content
function updateVariantsSection() {
    const variantsSection = document.getElementById('productVariantsSection');
    const variantsGrid = document.getElementById('variantsGrid');

    if (!variantsSection || !variantsGrid) {
        console.log('🔍 DEBUG: Missing DOM elements');
        return;
    }

    if (selectedSizes.length > 0) {
        variantsSection.style.display = 'block';
        variantsGrid.innerHTML = '';

        selectedSizes.forEach(size => {
            const variant = sizeVariants[size] || { price: '', quantity: '' };
            console.log(`🔍 DEBUG: Rendering variant for size ${size}:`, variant);

            // Escape values to prevent HTML injection
            const escapedPrice = String(variant.price || '').replace(/"/g, '&quot;');
            const escapedQuantity = String(variant.quantity || '').replace(/"/g, '&quot;');

            const variantHTML = `
                <div class="variant-item" id="variant-${size}">
                    <h4>Size ${size}</h4>
                    <div class="variant-field">
                        <label>Price</label>
                        <input type="text" placeholder="0.00" name="variant_price_${size}"
                               value="${escapedPrice}" onchange="updateSizeVariant('${size}', 'price', this.value)">
                        <div id="variant-price-${size}-error" class="error-message"></div>
                    </div>
                    <div class="variant-field">
                        <label>Quantity</label>
                        <input type="number" placeholder="0" name="variant_quantity_${size}" min="0"
                               value="${escapedQuantity}" onchange="updateSizeVariant('${size}', 'quantity', this.value)">
                        <div id="variant-quantity-${size}-error" class="error-message"></div>
                    </div>
                </div>
            `;
            variantsGrid.innerHTML += variantHTML;
        });

        // Verify input values after rendering
        setTimeout(() => {
            selectedSizes.forEach(size => {
                const priceInput = document.querySelector(`input[name="variant_price_${size}"]`);
                const quantityInput = document.querySelector(`input[name="variant_quantity_${size}"]`);
                if (priceInput) priceInput.value = sizeVariants[size].price || '';
                if (quantityInput) quantityInput.value = sizeVariants[size].quantity || '';
            });
        }, 100);
    } else {
        variantsSection.style.display = 'none';
    }
}

// Update size variant data
function updateSizeVariant(size, field, value) {
    if (!sizeVariants[size]) {
        sizeVariants[size] = { price: '', quantity: '' };
    }
    sizeVariants[size][field] = value;
}

async function validateAndSubmit() {
    if (validateForm()) {
        document.body.classList.add('loading');

        Swal.fire({
            title: 'Updating Product...',
            text: 'Please wait while we update your product',
            icon: 'info',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        try {
            const productId = document.getElementById('productId').value;
            const form = document.getElementById('productForm');
            const formData = new FormData(form);

            // Sync current form values with sizeVariants object before submission
            selectedSizes.forEach(size => {
                const priceInput = document.getElementsByName(`variant_price_${size}`)[0];
                const quantityInput = document.getElementsByName(`variant_quantity_${size}`)[0];

                if (sizeVariants[size]) {
                    sizeVariants[size].price = priceInput.value;
                    sizeVariants[size].quantity = quantityInput.value;
                }
            });

            // Add size variants data
            formData.append('sizeVariants', JSON.stringify(sizeVariants));

            const response = await fetch(`/admin/editProduct/${productId}`, {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            if (response.ok) {
                await Swal.fire({
                    title: 'Success!',
                    text: `Product has been updated successfully on ${new Date(data.updatedOn || Date.now()).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}`,
                    icon: 'success',
                    confirmButtonText: 'Great!',
                    confirmButtonColor: '#10b981',
                    timer: 1000,
                    timerProgressBar: true
                });
                window.location.href = '/admin/products';
            } else {
                throw new Error(data.error || 'Failed to update product');
            }
        } catch (error) {
            console.error(`Error at ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}:`, error);
            Swal.fire({
                title: 'Oops!',
                text: error.message || 'Something went wrong while updating the product',
                icon: 'error',
                confirmButtonText: 'Try Again',
                confirmButtonColor: '#ef4444'
            });
        } finally {
            document.body.classList.remove('loading');
        }
    }
}

// Preview image functions
function viewImage1(event) {
    updateImagePreview(event, 1);
}

function viewImage2(event) {
    updateImagePreview(event, 2);
}

function viewImage3(event) {
    updateImagePreview(event, 3);
}

function updateImagePreview(event, index) {
    const preview = document.getElementById(`preview${index}`);
    if (event.target.files && event.target.files[0]) {
        const file = event.target.files[0];
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.innerHTML = `<img src="${e.target.result}" alt="Preview ${index}">`;
            preview.classList.remove('empty');
        };
        reader.readAsDataURL(file);
    }
}

// Initialize Cropper
function viewImage(event, index) {
    let input = event.target;
    if (!input.files || !input.files[0]) return;

    let reader = new FileReader();
    reader.onload = function () {
        let image = document.getElementById("croppedImg" + index);
        image.src = reader.result;

        // Destroy existing Cropper if any
        if (croppers[index]) {
            croppers[index].destroy();
        }

        // Initialize new Cropper
        croppers[index] = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true,
            fillColor: '#ffffff'
        });

        // Show cropper container
        let cropperContainer = document.querySelector("#cropperContainer" + index);
        cropperContainer.style.display = 'block';

        // Handle save button
        let saveButton = document.querySelector("#saveButton" + index);
        saveButton.addEventListener("click", function () {
            let croppedCanvas = croppers[index].getCroppedCanvas({
                fillColor: '#ffffff'
            });
            
            let timestamp = new Date().getTime();
            let fileName = `cropped-img-${timestamp}-${index}.png`;

            croppedCanvas.toBlob(blob => {
                let input = document.getElementById('input' + index);
                let imgFile = new File([blob], fileName, blob);
                let fileList = new DataTransfer();
                fileList.items.add(imgFile);
                input.files = fileList.files;

                // Update thumbnails
                handleFileSelect({ target: input });

                // Update preview
                const preview = document.getElementById(`preview${index}`);
                preview.innerHTML = `<img src="${croppedCanvas.toDataURL()}" alt="Cropped ${index}">`;

                // Hide and clean up
                cropperContainer.style.display = 'none';
                croppers[index].destroy();
                delete croppers[index];

                // Success feedback
                Swal.fire({
                    title: 'Image Cropped!',
                    text: 'Your image has been cropped successfully',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false,
                    toast: true,
                    position: 'top-end'
                });
            }, 'image/jpeg');
        }, { once: true });
    };
    reader.readAsDataURL(input.files[0]);
}

// Handle thumbnails
const selectedImages = [];
['input1', 'input2', 'input3'].forEach(id => {
    document.getElementById(id).addEventListener("change", handleFileSelect);
});

function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    const files = event.target.files;

    if (files.length > 0) {
        // Clear the "no images" message
        addedImagesContainer.innerHTML = "";
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (!selectedImages.some(img => img.name === file.name)) {
                selectedImages.push(file);
            }

            const thumbnail = document.createElement("div");
            thumbnail.classList.add("thumbnail");

            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            img.alt = "thumbnail";

            const removeIcon = document.createElement("span");
            removeIcon.classList.add("remove-icon");
            removeIcon.innerHTML = "×";
            removeIcon.addEventListener("click", function () {
                const index = selectedImages.findIndex(img => img.name === file.name);
                if (index !== -1) {
                    selectedImages.splice(index, 1);
                }
                thumbnail.remove();
                
                // Show "no images" message if no images left
                if (selectedImages.length === 0) {
                    addedImagesContainer.innerHTML = '<p style="color: #9ca3af; font-style: italic;">No images selected</p>';
                }
            });

            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }
    }
}

function resetImagePreviews() {
    for (let i = 1; i <= 3; i++) {
        const preview = document.getElementById(`preview${i}`);
        preview.innerHTML = `<i class="fas fa-camera" style="font-size: 2rem; color: #d1d5db;"></i>`;
        preview.classList.add('empty');
    }
    
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = '<p style="color: #9ca3af; font-style: italic;">No images selected</p>';
    
    selectedImages.length = 0;
}

// Form validation
function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementById('descriptionid').value;
    const productOffer = document.getElementsByName('productOffer')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const images = document.getElementById('input1');
    let isValid = true;

    if (!name || name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    if (!description || description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } 

    if (productOffer && (!/^\d+$/.test(productOffer) || parseInt(productOffer) < 0 || parseInt(productOffer) > 100)) {
        displayErrorMessage('productOffer-error', 'Product offer must be between 0 and 100.');
        isValid = false;
    }

    if (!color || color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    if (!category || category.trim() === "") {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    // Validate sizes
    if (selectedSizes.length === 0) {
        displayErrorMessage('sizes-error', 'Please select at least one size.');
        isValid = false;
    }

    // Validate size variants
    for (const size of selectedSizes) {
        const priceInput = document.querySelector(`input[name="variant_price_${size}"]`);
        const quantityInput = document.querySelector(`input[name="variant_quantity_${size}"]`);

        if (priceInput && (!priceInput.value || !/^\d+(\.\d{1,2})?$/.test(priceInput.value) || parseFloat(priceInput.value) <= 0)) {
            displayErrorMessage(`variant-price-${size}-error`, 'Please enter a valid price for this size.');
            isValid = false;
        }

        if (quantityInput && (!quantityInput.value || !/^\d+$/.test(quantityInput.value) || parseInt(quantityInput.value) < 0)) {
            displayErrorMessage(`variant-quantity-${size}-error`, 'Please enter a valid quantity for this size.');
            isValid = false;
        }
    }

    // Validate that total images (existing + new) equals 3
    const imageInputs = ['input1', 'input2', 'input3'];
    let newImageCount = 0;
    
    imageInputs.forEach(inputId => {
        const input = document.getElementById(inputId);
        if (input && input.files && input.files.length > 0) {
            newImageCount++;
        }
    });

    // Count existing images that are still displayed (not deleted)
    const existingImages = document.querySelectorAll('[data-image-id]');
    const existingImageCount = existingImages.length;
    const totalImageCount = existingImageCount + newImageCount;

    if (totalImageCount !== 3) {
        displayErrorMessage('images-error', `Total images must be exactly 3. You have ${existingImageCount} existing images and ${newImageCount} new images selected (total: ${totalImageCount}).`);
        isValid = false;
    }

    if (!isValid) {
        Swal.fire({
            title: 'Validation Error!',
            text: 'Please fix the errors in the form before submitting.',
            icon: 'warning',
            confirmButtonText: 'OK',
            confirmButtonColor: '#f59e0b'
        });
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        if (element) element.innerText = '';
    });
}

// Manual initialization function for testing
window.manualInitVariants = function() {
    console.log('🔍 DEBUG: Manual initialization triggered');
    initializeExistingVariants();
};

// Enhanced interactions
document.addEventListener('DOMContentLoaded', function() {
    console.log('🔍 DEBUG: DOMContentLoaded event fired');
    console.log('🔍 DEBUG: Document readyState:', document.readyState);
    // Initialize existing variants with a delay to ensure DOM is ready
    setTimeout(() => {
        console.log('🔍 DEBUG: DOM ready, initializing variants...');
        initializeExistingVariants();
    }, 100);

    // Also try immediate initialization in case DOM is already ready
    if (document.readyState === 'complete') {
        console.log('🔍 DEBUG: Document already complete, initializing variants immediately...');
        initializeExistingVariants();
    }

    // Add focus effects to form controls
    const formControls = document.querySelectorAll('.form-control');
    formControls.forEach(control => {
        control.addEventListener('focus', function() {
            this.parentElement.classList.add('focused');
        });

        control.addEventListener('blur', function() {
            this.parentElement.classList.remove('focused');
        });
    });

    // Add hover effects to image upload areas
    const imageInputItems = document.querySelectorAll('.image-input-item');
    imageInputItems.forEach(item => {
        item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.1)';
        });

        item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
        });
    });
});

// Additional fallback for window load event
window.addEventListener('load', function() {
    console.log('🔍 DEBUG: Window loaded, ensuring variants are initialized...');
    console.log('🔍 DEBUG: Current selectedSizes length:', selectedSizes.length);
    // Only initialize if not already done
    if (selectedSizes.length === 0) {
        console.log('🔍 DEBUG: No sizes selected, initializing...');
        initializeExistingVariants();
    } else {
        console.log('🔍 DEBUG: Sizes already selected, skipping initialization');
    }
});

function showImageUploadSuccess(count) {
    Swal.fire({
        title: 'Image Uploaded!',
        text: `${count} image${count > 1 ? 's' : ''} uploaded successfully`,
        icon: 'success',
        timer: 1500,
        showConfirmButton: false,
        toast: true,
        position: 'top-end'
    });
}

// Add drag and drop functionality
const imageUploadSection = document.querySelector('.image-upload-section');

['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    imageUploadSection.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

['dragenter', 'dragover'].forEach(eventName => {
    imageUploadSection.addEventListener(eventName, highlight, false);
});

['dragleave', 'drop'].forEach(eventName => {
    imageUploadSection.addEventListener(eventName, unhighlight, false);
});

function highlight(e) {
    imageUploadSection.style.borderColor = '#667eea';
    imageUploadSection.style.backgroundColor = '#f0f4ff';
}

function unhighlight(e) {
    imageUploadSection.style.borderColor = '#d1d5db';
    imageUploadSection.style.backgroundColor = '#f8fafc';
}

imageUploadSection.addEventListener('drop', handleDrop, false);

function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    
    if (files.length > 0) {
        // Find the first empty input field
        for (let i = 1; i <= 3; i++) {
            const input = document.getElementById(`input${i}`);
            if (!input.files || input.files.length === 0) {
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(files[0]);
                input.files = dataTransfer.files;
                
                // Trigger the change event
                const event = new Event('change', { bubbles: true });
                input.dispatchEvent(event);
                
                showImageUploadSuccess(1);
                break;
            }
        }
    }
}

function deleteSingleImage(imageId, productId) {
    console.log(imageId, productId);
    Swal.fire({
        title: 'Delete Image?',
        text: 'This action cannot be undone!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#6b7280',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire({
                title: 'Deleting...',
                text: 'Please wait while we delete the image',
                icon: 'info',
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => Swal.showLoading()
            });
            fetch('/admin/deleteImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    _method: 'DELETE',
                    imageNameToServer: imageId,
                    productIdToServer: productId
                })
            })
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return response.json();
            })
            .then(data => {
                if (data.status) {
                    const imageElement = document.querySelector(`[data-image-id="${imageId}"]`);
                    if (imageElement) imageElement.remove();
                    const imageCounter = document.querySelector('.image-counter');
                    if (imageCounter) {
                        let currentCount = parseInt(imageCounter.textContent) || 0;
                        if (currentCount > 0) imageCounter.textContent = currentCount - 1;
                    }
                    Swal.fire({
                        title: 'Deleted!',
                        text: 'Image has been successfully deleted.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    window.dispatchEvent(new CustomEvent('imageDeleted', {
                        detail: { imageId, productId }
                    }));
                } else {
                    throw new Error(data.message || 'Failed to delete image');
                }
            })
            .catch(error => {
                console.error('Error deleting image:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to delete image. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#ef4444'
                });
            });
        }
    });
}
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
</body>
</html>