<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Coupon - Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <style>
        /* Complete CSS for the Add Coupon Page */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}

.container {
    max-width: 800px;
    margin: 0 auto;
}

/* Breadcrumb Navigation Styles */
.breadcrumb-nav {
    margin-bottom: 20px;
    padding: 0;
    background: transparent;
}

.breadcrumb {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    list-style: none;
    padding: 14px 24px;
    margin: 0;
    font-size: 14px;
    background: rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(15px);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.breadcrumb-item {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb-item:hover {
    color: white;
}

.breadcrumb-item.active {
    color: white;
    font-weight: 500;
}

.breadcrumb-item + .breadcrumb-item::before {
    content: ">";
    margin: 0 8px;
    color: rgba(255, 255, 255, 0.6);
}

/* Main Form Container */
.form-container {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.form-header {
    text-align: center;
    margin-bottom: 40px;
}

.form-header h2 {
    color: #2d3748;
    font-weight: 700;
    font-size: 2rem;
    margin-bottom: 8px;
}

.form-header p {
    color: #718096;
    font-size: 1rem;
}

/* Form Styles */
.form-group {
    margin-bottom: 25px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    color: #2d3748;
    font-weight: 600;
    font-size: 14px;
}

.form-control {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    font-size: 14px;
    transition: all 0.3s ease;
    background: white;
}

.form-control:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-control.is-invalid {
    border-color: #e53e3e;
}

.invalid-feedback {
    display: block;
    color: #e53e3e;
    font-size: 12px;
    margin-top: 5px;
}

/* Switch Toggle Styles */
.form-check {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

.form-check-input {
    appearance: none;
    width: 50px;
    height: 25px;
    background-color: #cbd5e0;
    border-radius: 25px;
    position: relative;
    transition: background-color 0.3s ease;
    cursor: pointer;
}

.form-check-input:checked {
    background-color: #667eea;
}

/* .form-check-input::before {
     content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background: white;
    top: 2px;
    left: 2px;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);

} */

.form-check-input:checked::before {
    transform: translateX(25px);
}


.form-check-label {
    color: #2d3748;
    font-weight: 500;
    cursor: pointer;
}

/* Button Styles */
.btn-container {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-top: 40px;
}

.btn {
    padding: 12px 30px;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
    background: #e2e8f0;
    color: #4a5568;
}

.btn-secondary:hover {
    background: #cbd5e0;
    transform: translateY(-2px);
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    .form-container {
        padding: 25px;
        margin: 10px;
    }
    
    .btn-container {
        flex-direction: column;
    }
    
    .btn {
        width: 100%;
        justify-content: center;
    }
}

/* Loading State */
.btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
}

.loading {
    display: none;
    margin-left: 8px;
}

.btn:disabled .loading {
    display: inline-block;
}   

/* Discount Type Radio Buttons */
.discount-type-container {
    display: flex;
    gap: 20px;
    margin-top: 8px;
}

.form-check-inline {
    display: flex;
    align-items: center;
    gap: 8px;
}

/* .form-check-inline .form-check-input {
    width: 18px;
    height: 18px;
    margin: 0;
} */

.form-check-inline .form-check-label {
    margin: 0;
    font-weight: 500;
    color: #4a5568;
    cursor: pointer;
}

/* Input Group for Dynamic Discount Field */
.input-group {
    display: flex;
    align-items: stretch;
}

.input-group-text {
    background: #f7fafc;
    border: 2px solid #e2e8f0;
    border-right: none;
    padding: 12px 16px;
    border-radius: 12px 0 0 12px;
    font-weight: 600;
    color: #4a5568;
    min-width: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.input-group .form-control {
    border-radius: 0 12px 12px 0;
    border-left: none;
}

.input-group .form-control:focus {
    border-left: none;
}

/* Category and Product Selection */
.category-selection, .product-selection {
    margin-top: 15px;
    padding: 15px;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    background: #f7fafc;
    max-height: 200px;
    overflow-y: auto;
}

.category-list, .product-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 10px;
    margin-top: 10px;
}

.category-item, .product-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    transition: all 0.3s ease;
}

.category-item:hover, .product-item:hover {
    border-color: #667eea;
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.1);
}

.category-item input, .product-item input {
    margin: 0;
}

.category-item label, .product-item label {
    margin: 0;
    cursor: pointer;
    font-size: 13px;
    color: #4a5568;
}

.search-container {
    margin-bottom: 15px;
}

.search-container .form-control {
    border-radius: 8px;
    font-size: 13px;
}

.usage-limits-section {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
}

.usage-limits-section .section-title {
    color: #495057;
    font-weight: 600;
    margin-bottom: 15px;
    padding-bottom: 8px;
    border-bottom: 2px solid #dee2e6;
}

.usage-limits-section .form-group {
    margin-bottom: 15px;
}

.usage-limits-section .form-text {
    font-size: 0.875rem;
    margin-top: 5px;
}

/* Custom Date Input Styling */
.date-input-container {
    position: relative;
    display: inline-block;
    width: 100%;
}

.date-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
}

.date-input-wrapper .calendar-icon {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6b7280;
    pointer-events: auto;
    z-index: 2;
    font-size: 1rem;
    cursor: pointer;
}

.date-input-wrapper.has-custom-calendar .form-control {
    cursor: pointer;
    padding-right: 2.5rem;
}

/* Custom Calendar Popup Styling */
.custom-calendar {
    position: fixed;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    z-index: 10000;
    padding: 1rem;
    display: none;
    min-width: 280px;
    max-width: 320px;
    font-family: 'Inter', sans-serif;
}

.custom-calendar.show {
    display: block;
    animation: calendarFadeIn 0.2s ease-out;
}

@keyframes calendarFadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid #f3f4f6;
}

.calendar-nav-btn {
    background: none;
    border: none;
    color: #6b7280;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
}

.calendar-nav-btn:hover {
    background: #f3f4f6;
    color: #667eea;
}

.calendar-nav-btn:active {
    transform: scale(0.95);
}

.calendar-month-year {
    font-weight: 600;
    color: #374151;
    font-size: 1rem;
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: background 0.2s ease;
}

.calendar-month-year:hover {
    background: #f3f4f6;
}

.calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.25rem;
    margin-bottom: 0.5rem;
}

.calendar-weekday {
    text-align: center;
    font-size: 0.75rem;
    font-weight: 600;
    color: #6b7280;
    padding: 0.5rem 0;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.25rem;
}

.calendar-day {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    cursor: pointer;
    border-radius: 6px;
    transition: all 0.2s ease;
    position: relative;
    background: transparent;
    border: none;
    color: #374151;
    font-weight: 500;
}

.calendar-day:hover {
    background: #f3f4f6;
    color: #667eea;
}

.calendar-day.other-month {
    color: #d1d5db;
}

.calendar-day.other-month:hover {
    background: #f9fafb;
    color: #9ca3af;
}

.calendar-day.selected {
    background: #667eea;
    color: white;
    font-weight: 600;
}

.calendar-day.selected:hover {
    background: #5856eb;
}

.calendar-day.today {
    background: #eff6ff;
    color: #2563eb;
    font-weight: 600;
}

.calendar-day.today:hover {
    background: #dbeafe;
}

.calendar-day.today.selected {
    background: #667eea;
    color: white;
}

.calendar-day.disabled {
    color: #d1d5db;
    cursor: not-allowed;
    background: #f9fafb;
}

.calendar-day.disabled:hover {
    background: #f9fafb;
    color: #d1d5db;
}

.calendar-footer {
    margin-top: 1rem;
    padding-top: 0.75rem;
    border-top: 1px solid #f3f4f6;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.calendar-today-btn {
    background: none;
    border: 1px solid #d1d5db;
    color: #6b7280;
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
}

.calendar-today-btn:hover {
    border-color: #667eea;
    color: #667eea;
    background: #f8faff;
}

.calendar-clear-btn {
    background: none;
    border: none;
    color: #dc2626;
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
}

.calendar-clear-btn:hover {
    background: #fef2f2;
    color: #b91c1c;
}

/* Responsive Calendar Styles */
@media (max-width: 768px) {
    .custom-calendar {
        min-width: 260px;
        padding: 0.75rem;
    }

    .calendar-day {
        font-size: 0.8rem;
    }

    .calendar-weekday {
        font-size: 0.7rem;
        padding: 0.375rem 0;
    }

    .calendar-month-year {
        font-size: 0.9rem;
        padding: 0.375rem 0.75rem;
    }

    .calendar-nav-btn {
        width: 1.75rem;
        height: 1.75rem;
        font-size: 1rem;
    }
}
    </style>
</head>
<body>
    <div class="container">
        <!-- Breadcrumb Navigation -->
        <nav class="breadcrumb-nav">
            <ol class="breadcrumb">
                <li><a href="/admin/dashboard" class="breadcrumb-item">Dashboard</a></li>
                <li><a href="/admin/coupons" class="breadcrumb-item">Coupons</a></li>
                <li class="breadcrumb-item active">Add Coupon</li>
            </ol>
        </nav>

        <!-- Main Form Container -->
        <div class="form-container">
            <div class="form-header">
                <h2><i class="fas fa-ticket-alt"></i> Add New Coupon</h2>
                <p>Create a new discount coupon for your customers</p>
            </div>

            <form id="addCouponForm">
                <div class="form-group">
                    <label for="name" class="form-label">
                        <i class="fas fa-tag"></i> Coupon Code *
                    </label>
                    <input type="text" 
                           class="form-control" 
                           id="name" 
                           name="name" 
                           placeholder="Enter coupon code " 
                           required>
                    <div class="invalid-feedback" id="nameError"></div>
                </div>

                <!-- Discount Type Selection -->
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-percentage"></i> Discount Type *
                    </label>
                    <div class="discount-type-container">
                        <div class="form-check-inline">
                            <input type="radio"
                                   class="form-check-input"
                                   id="discountTypeFlat"
                                   name="discountType"
                                   value="flat"
                                   checked
                                   onchange="updateDiscountField()">
                            <label class="form-check-label" for="discountTypeFlat">
                                <i class="fas fa-rupee-sign"></i> Flat Amount (₹)
                            </label>
                        </div>
                        <div class="form-check-inline">
                            <input type="radio"
                                   class="form-check-input"
                                   id="discountTypePercentage"
                                   name="discountType"
                                   value="percentage"
                                   onchange="updateDiscountField()">
                            <label class="form-check-label" for="discountTypePercentage">
                                <i class="fas fa-percentage"></i> Percentage (%)
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Dynamic Discount Amount Field -->
                <div class="form-group">
                    <label for="offerPrice" class="form-label">
                        <i class="fas fa-rupee-sign" id="discountIcon"></i> <span id="discountLabel">Discount Amount</span> *
                    </label>
                    <div class="input-group">
                        <span class="input-group-text" id="discountSymbol">₹</span>
                        <input type="number"
                               class="form-control"
                               id="offerPrice"
                               name="offerPrice"
                               placeholder="Enter discount amount"
                               min="1"
                               step="0.01"
                               required>
                    </div>
                    <div class="invalid-feedback" id="offerPriceError"></div>
                </div>

                <div class="form-group">
                    <label for="minimumPrice" class="form-label">
                        <i class="fas fa-shopping-cart"></i> Minimum Order Amount *
                    </label>
                    <input type="number"
                           class="form-control"
                           id="minimumPrice"
                           name="minimumPrice"
                           placeholder="Enter minimum order amount"
                           min="0"
                           step="0.01"
                           required>
                    <div class="invalid-feedback" id="minimumPriceError"></div>
                </div>

                <!-- Start Date Field -->
                <div class="form-group">
                    <label for="startDate" class="form-label">
                        <i class="fas fa-calendar-plus"></i> Start Date *
                    </label>
                    <div class="date-input-container">
                        <div class="date-input-wrapper has-custom-calendar">
                            <input type="text" class="form-control" id="startDate" name="startDate" placeholder="Select start date" readonly required>
                            <i class="fas fa-calendar-alt calendar-icon"></i>
                        </div>
                        <div class="custom-calendar" id="startDateCalendar">
                            <div class="calendar-header">
                                <button type="button" class="calendar-nav-btn" id="startPrevMonth">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <div class="calendar-month-year" id="startMonthYear"></div>
                                <button type="button" class="calendar-nav-btn" id="startNextMonth">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                            <div class="calendar-weekdays">
                                <div class="calendar-weekday">Sun</div>
                                <div class="calendar-weekday">Mon</div>
                                <div class="calendar-weekday">Tue</div>
                                <div class="calendar-weekday">Wed</div>
                                <div class="calendar-weekday">Thu</div>
                                <div class="calendar-weekday">Fri</div>
                                <div class="calendar-weekday">Sat</div>
                            </div>
                            <div class="calendar-days" id="startCalendarDays"></div>
                            <div class="calendar-footer">
                                <button type="button" class="calendar-today-btn" id="startTodayBtn">Today</button>
                                <button type="button" class="calendar-clear-btn" id="startClearBtn">Clear</button>
                            </div>
                        </div>
                    </div>
                    <div class="invalid-feedback" id="startDateError"></div>
                </div>

                <div class="form-group">
                    <label for="expireOn" class="form-label">
                        <i class="fas fa-calendar-alt"></i> Expiration Date *
                    </label>
                    <div class="date-input-container">
                        <div class="date-input-wrapper has-custom-calendar">
                            <input type="text" class="form-control" id="expireOn" name="expireOn" placeholder="Select expiration date" readonly required>
                            <i class="fas fa-calendar-alt calendar-icon"></i>
                        </div>
                        <div class="custom-calendar" id="expireOnCalendar">
                            <div class="calendar-header">
                                <button type="button" class="calendar-nav-btn" id="expirePrevMonth">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <div class="calendar-month-year" id="expireMonthYear"></div>
                                <button type="button" class="calendar-nav-btn" id="expireNextMonth">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                            <div class="calendar-weekdays">
                                <div class="calendar-weekday">Sun</div>
                                <div class="calendar-weekday">Mon</div>
                                <div class="calendar-weekday">Tue</div>
                                <div class="calendar-weekday">Wed</div>
                                <div class="calendar-weekday">Thu</div>
                                <div class="calendar-weekday">Fri</div>
                                <div class="calendar-weekday">Sat</div>
                            </div>
                            <div class="calendar-days" id="expireCalendarDays"></div>
                            <div class="calendar-footer">
                                <button type="button" class="calendar-today-btn" id="expireTodayBtn">Today</button>
                                <button type="button" class="calendar-clear-btn" id="expireClearBtn">Clear</button>
                            </div>
                        </div>
                    </div>
                    <div class="invalid-feedback" id="expireOnError"></div>
                </div>

                <!-- Category Selection -->
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-tags"></i> Applicable Categories *
                    </label>
                    <div class="form-check">
                        <input type="checkbox"
                               class="form-check-input"
                               id="isAllCategories"
                               name="isAllCategories"
                               checked
                               onchange="toggleCategorySelection()">
                        <label class="form-check-label" for="isAllCategories">
                            <i class="fas fa-globe"></i> Apply to All Categories
                        </label>
                    </div>
                    <div id="categorySelection" class="category-selection" style="display: none;">
                        <div class="category-list" id="categoryList">
                            <!-- Categories will be loaded dynamically -->
                        </div>
                    </div>
                </div>

                <!-- Product Selection -->
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-box"></i> Applicable Products *
                    </label>
                    <div class="form-check">
                        <input type="checkbox"
                               class="form-check-input"
                               id="isAllProducts"
                               name="isAllProducts"
                               checked
                               onchange="toggleProductSelection()">
                        <label class="form-check-label" for="isAllProducts">
                            <i class="fas fa-globe"></i> Apply to All Products
                        </label>
                    </div>
                    <div id="productSelection" class="product-selection" style="display: none;">
                        <div class="search-container">
                            <input type="text"
                                   class="form-control"
                                   id="productSearch"
                                   placeholder="Search products..."
                                   onkeyup="searchProducts()">
                        </div>
                        <div class="product-list" id="productList">
                            <!-- Products will be loaded dynamically -->
                        </div>
                    </div>
                </div>

                <!-- Usage Limits Section -->
                <div class="usage-limits-section">
                    <h6 class="section-title">
                        <i class="fas fa-chart-line"></i> Usage Limits
                    </h6>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="maxUsesPerUser" class="form-label">
                                    <i class="fas fa-user"></i> Maximum Uses Per User
                                </label>
                                <input type="number"
                                       class="form-control"
                                       id="maxUsesPerUser"
                                       name="maxUsesPerUser"
                                       min="1"
                                       value="1"
                                       required>
                                <small class="form-text text-muted">
                                    How many times a single user can use this coupon (minimum: 1)
                                </small>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="totalUsageLimit" class="form-label">
                                    <i class="fas fa-users"></i> Total Usage Limit
                                </label>
                                <input type="number"
                                       class="form-control"
                                       id="totalUsageLimit"
                                       name="totalUsageLimit"
                                       min="1"
                                       placeholder="Leave empty for unlimited">
                                <small class="form-text text-muted">
                                    Maximum total number of users who can use this coupon (optional)
                                </small>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-check">
                    <input type="checkbox"
                           class="form-check-input"
                           id="islist"
                           name="islist"
                           checked>
                    <label class="form-check-label" for="islist">
                        <i class="fas fa-toggle-on"></i> Active Status
                    </label>
                </div>

                <div class="btn-container">
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-plus"></i> Create Coupon
                        <i class="fas fa-spinner fa-spin loading"></i>
                    </button>
                    <a href="/admin/coupons" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>

    <script>
        let categories = [];
        let products = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum dates
            const today = new Date().toISOString().split('T')[0];
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const minExpireDate = tomorrow.toISOString().split('T')[0];

            document.getElementById('startDate').setAttribute('min', today);
            document.getElementById('expireOn').setAttribute('min', minExpireDate);

            // Set default start date to today
            document.getElementById('startDate').value = today;

            // Load categories and products
            loadCategories();
            loadProducts();

            // Add date validation
            document.getElementById('startDate').addEventListener('change', validateDates);
            document.getElementById('expireOn').addEventListener('change', validateDates);

            // Add usage limits validation
            document.getElementById('maxUsesPerUser').addEventListener('input', validateUsageLimits);
            document.getElementById('totalUsageLimit').addEventListener('input', validateUsageLimits);

            // Add percentage validation
            document.getElementById('offerPrice').addEventListener('input', validatePercentageInput);
        });

        // Update discount field based on type selection
        function updateDiscountField() {
            const isFlat = document.getElementById('discountTypeFlat').checked;
            const discountSymbol = document.getElementById('discountSymbol');
            const discountIcon = document.getElementById('discountIcon');
            const discountLabel = document.getElementById('discountLabel');
            const offerPriceInput = document.getElementById('offerPrice');

            if (isFlat) {
                discountSymbol.textContent = '₹';
                discountIcon.className = 'fas fa-rupee-sign';
                discountLabel.textContent = 'Discount Amount';
                offerPriceInput.placeholder = 'Enter discount amount';
                offerPriceInput.setAttribute('min', '1');
                offerPriceInput.setAttribute('max', '999999');
            } else {
                discountSymbol.textContent = '%';
                discountIcon.className = 'fas fa-percentage';
                discountLabel.textContent = 'Discount Percentage';
                offerPriceInput.placeholder = 'Enter discount percentage';
                offerPriceInput.setAttribute('min', '1');
                offerPriceInput.setAttribute('max', '100');
            }
        }

        // Validate start and end dates
        function validateDates() {
            const startDate = new Date(document.getElementById('startDate').value);
            const expireDate = new Date(document.getElementById('expireOn').value);

            if (startDate && expireDate && startDate >= expireDate) {
                document.getElementById('expireOnError').textContent = 'Expiration date must be after start date';
                document.getElementById('expireOn').classList.add('is-invalid');
                return false;
            } else {
                document.getElementById('expireOnError').textContent = '';
                document.getElementById('expireOn').classList.remove('is-invalid');
                return true;
            }
        }

        // Validate usage limits
        function validateUsageLimits() {
            const maxUsesPerUser = parseInt(document.getElementById('maxUsesPerUser').value);
            const totalUsageLimit = parseInt(document.getElementById('totalUsageLimit').value);
            const maxUsesPerUserInput = document.getElementById('maxUsesPerUser');
            const totalUsageLimitInput = document.getElementById('totalUsageLimit');

            // Clear previous errors
            maxUsesPerUserInput.classList.remove('is-invalid');
            totalUsageLimitInput.classList.remove('is-invalid');

            // If total usage limit is set and max uses per user is greater than total usage limit
            if (totalUsageLimit && maxUsesPerUser && maxUsesPerUser > totalUsageLimit) {
                maxUsesPerUserInput.classList.add('is-invalid');
                
                // Add error message after the max uses per user field
                let errorElement = maxUsesPerUserInput.parentNode.querySelector('.invalid-feedback');
                if (!errorElement) {
                    errorElement = document.createElement('div');
                    errorElement.className = 'invalid-feedback';
                    maxUsesPerUserInput.parentNode.appendChild(errorElement);
                }
                errorElement.textContent = 'Maximum uses per user cannot be greater than total usage limit';
                return false;
            } else {
                // Remove error message if validation passes
                let errorElement = maxUsesPerUserInput.parentNode.querySelector('.invalid-feedback');
                if (errorElement) {
                    errorElement.textContent = '';
                }
                return true;
            }
        }

        // Validate percentage input
        function validatePercentageInput() {
            const isPercentage = document.getElementById('discountTypePercentage').checked;
            const offerPriceInput = document.getElementById('offerPrice');
            const offerPriceError = document.getElementById('offerPriceError');
            const value = parseFloat(offerPriceInput.value);

            // Clear previous errors
            offerPriceInput.classList.remove('is-invalid');
            offerPriceError.textContent = '';

            // Only validate if percentage type is selected and value is entered
            if (isPercentage && value && value > 100) {
                offerPriceInput.classList.add('is-invalid');
                offerPriceError.textContent = 'Percentage discount cannot exceed 100%';
                return false;
            }

            return true;
        }

        // Toggle category selection
        function toggleCategorySelection() {
            const isAllCategories = document.getElementById('isAllCategories').checked;
            const categorySelection = document.getElementById('categorySelection');

            if (isAllCategories) {
                categorySelection.style.display = 'none';
                // Uncheck all category checkboxes
                const categoryCheckboxes = categorySelection.querySelectorAll('input[type="checkbox"]');
                categoryCheckboxes.forEach(cb => cb.checked = false);
            } else {
                categorySelection.style.display = 'block';
            }
        }

        // Toggle product selection
        function toggleProductSelection() {
            const isAllProducts = document.getElementById('isAllProducts').checked;
            const productSelection = document.getElementById('productSelection');

            if (isAllProducts) {
                productSelection.style.display = 'none';
                // Uncheck all product checkboxes
                const productCheckboxes = productSelection.querySelectorAll('input[type="checkbox"]');
                productCheckboxes.forEach(cb => cb.checked = false);
            } else {
                productSelection.style.display = 'block';
            }
        }

        // Load categories from server
        async function loadCategories() {
            try {
                const response = await fetch('/admin/get-categories');
                const result = await response.json();

                if (result.success) {
                    categories = result.categories;
                    renderCategories();
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        // Load products from server
        async function loadProducts() {
            try {
                const response = await fetch('/admin/get-products');
                const result = await response.json();

                if (result.success) {
                    products = result.products;
                    renderProducts();
                }
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        // Render categories
        function renderCategories() {
            const categoryList = document.getElementById('categoryList');
            categoryList.innerHTML = '';

            categories.forEach(category => {
                const categoryItem = document.createElement('div');
                categoryItem.className = 'category-item';
                categoryItem.innerHTML = `
                    <input type="checkbox" id="cat_${category._id}" name="applicableCategories" value="${category._id}">
                    <label for="cat_${category._id}">${category.name}</label>
                `;
                categoryList.appendChild(categoryItem);
            });
        }

        // Render products
        function renderProducts() {
            const productList = document.getElementById('productList');
            productList.innerHTML = '';

            products.forEach(product => {
                const productItem = document.createElement('div');
                productItem.className = 'product-item';
                productItem.innerHTML = `
                    <input type="checkbox" id="prod_${product._id}" name="applicableProducts" value="${product._id}">
                    <label for="prod_${product._id}">${product.productName}</label>
                `;
                productList.appendChild(productItem);
            });
        }

        // Search products
        function searchProducts() {
            const searchTerm = document.getElementById('productSearch').value.toLowerCase();
            const filteredProducts = products.filter(product =>
                product.productName.toLowerCase().includes(searchTerm)
            );

            const productList = document.getElementById('productList');
            productList.innerHTML = '';

            filteredProducts.forEach(product => {
                const productItem = document.createElement('div');
                productItem.className = 'product-item';
                productItem.innerHTML = `
                    <input type="checkbox" id="prod_${product._id}" name="applicableProducts" value="${product._id}">
                    <label for="prod_${product._id}">${product.productName}</label>
                `;
                productList.appendChild(productItem);
            });
        }

        // Form submission handler
        document.getElementById('addCouponForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // Validate dates first
            if (!validateDates()) {
                return;
            }

            // Validate usage limits
            if (!validateUsageLimits()) {
                return;
            }

            const submitBtn = document.getElementById('submitBtn');
            const formData = new FormData(this);

            // Convert FormData to regular object
            const data = {};
            for (let [key, value] of formData.entries()) {
                if (key === 'islist' || key === 'isAllCategories' || key === 'isAllProducts') {
                    data[key] = true;
                } else if (key === 'applicableCategories' || key === 'applicableProducts') {
                    if (!data[key]) data[key] = [];
                    data[key].push(value);
                } else {
                    data[key] = value;
                }
            }

            // Handle unchecked checkboxes
            if (!formData.has('islist')) data.islist = false;
            if (!formData.has('isAllCategories')) data.isAllCategories = false;
            if (!formData.has('isAllProducts')) data.isAllProducts = false;

            // Validate category/product selection
            if (!data.isAllCategories && (!data.applicableCategories || data.applicableCategories.length === 0)) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Please select at least one category or choose "Apply to All Categories"',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            if (!data.isAllProducts && (!data.applicableProducts || data.applicableProducts.length === 0)) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Please select at least one product or choose "Apply to All Products"',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            // Validate usage limits
            if (data.maxUsesPerUser && parseInt(data.maxUsesPerUser) < 1) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Maximum uses per user must be at least 1',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            if (data.totalUsageLimit && parseInt(data.totalUsageLimit) < 1) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Total usage limit must be at least 1',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            // Validate percentage discount
            if (data.discountType === 'percentage' && parseFloat(data.offerPrice) > 100) {
                Swal.fire({
                    title: 'Validation Error!',
                    text: 'Percentage discount cannot exceed 100%',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            // Clear previous errors
            clearErrors();

            // Disable submit button and show loading
            submitBtn.disabled = true;
            
            try {
                const response = await fetch('/admin/add-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    await Swal.fire({
                        title: 'Success!',
                        text: result.message,
                        icon: 'success',
                        confirmButtonColor: '#667eea'
                    });
                    window.location.href = '/admin/coupons';
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message,
                        icon: 'error',
                        confirmButtonColor: '#667eea'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Something went wrong. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#667eea'
                });
            } finally {
                submitBtn.disabled = false;
            }
        });
        
        function clearErrors() {
            const errorElements = document.querySelectorAll('.invalid-feedback');
            const inputElements = document.querySelectorAll('.form-control');
            
            errorElements.forEach(el => el.textContent = '');
            inputElements.forEach(el => el.classList.remove('is-invalid'));
        }

        // Custom Calendar Implementation
        class CustomCalendar {
            constructor(inputId, calendarId, options = {}) {
                this.inputId = inputId;
                this.calendarId = calendarId;
                this.input = document.getElementById(inputId);
                this.calendar = document.getElementById(calendarId);
                this.currentDate = new Date();
                this.selectedDate = null;
                this.maxDate = options.maxDate || null;
                this.minDate = options.minDate || new Date();
                this.onDateSelect = options.onDateSelect || null;
                
                this.monthNames = [
                    'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ];
                
                this.init();
            }
            
            init() {
                this.setupEventListeners();
                this.render();
            }
            
            setupEventListeners() {
                // Input click to show calendar
                this.input.addEventListener('click', () => this.show());
                
                // Calendar icon click
                const icon = this.input.parentElement.querySelector('.calendar-icon');
                if (icon) {
                    icon.addEventListener('click', () => this.show());
                }
                
                // Navigation buttons
                const prevBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '').replace('On', '')}PrevMonth`);
                const nextBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '').replace('On', '')}NextMonth`);
                
                if (prevBtn) prevBtn.addEventListener('click', () => this.previousMonth());
                if (nextBtn) nextBtn.addEventListener('click', () => this.nextMonth());
                
                // Today and Clear buttons
                const todayBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '').replace('On', '')}TodayBtn`);
                const clearBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '').replace('On', '')}ClearBtn`);
                
                if (todayBtn) todayBtn.addEventListener('click', () => this.selectToday());
                if (clearBtn) clearBtn.addEventListener('click', () => this.clear());
                
                // Click outside to close
                document.addEventListener('click', (e) => {
                    if (!this.input.contains(e.target) && !this.calendar.contains(e.target) && 
                        !this.input.parentElement.contains(e.target)) {
                        this.hide();
                    }
                });
                
                // Escape key to close
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && this.calendar.classList.contains('show')) {
                        this.hide();
                    }
                });
            }
            
            show() {
                // Hide other calendars
                document.querySelectorAll('.custom-calendar').forEach(cal => {
                    if (cal !== this.calendar) {
                        cal.classList.remove('show');
                    }
                });
                
                // Calculate position relative to input
                const inputRect = this.input.getBoundingClientRect();
                const viewportHeight = window.innerHeight;
                const viewportWidth = window.innerWidth;
                const calendarHeight = 380; // Approximate calendar height
                const calendarWidth = 280; // Minimum calendar width
                
                let top = inputRect.bottom + window.scrollY + 4;
                let left = inputRect.left + window.scrollX;
                
                // Check if calendar would go below viewport
                if (inputRect.bottom + calendarHeight > viewportHeight) {
                    // Position above the input instead
                    top = inputRect.top + window.scrollY - calendarHeight - 4;
                }
                
                // Check if calendar would go beyond right edge
                if (left + calendarWidth > viewportWidth) {
                    left = viewportWidth - calendarWidth - 20;
                }
                
                // Ensure calendar doesn't go beyond left edge
                if (left < 10) {
                    left = 10;
                }
                
                // Apply positioning
                this.calendar.style.top = `${top}px`;
                this.calendar.style.left = `${left}px`;
                
                this.calendar.classList.add('show');
                this.render();
            }
            
            hide() {
                this.calendar.classList.remove('show');
            }
            
            previousMonth() {
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                this.render();
            }
            
            nextMonth() {
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                this.render();
            }
            
            selectToday() {
                const today = new Date();
                if (this.isDateDisabled(today)) return;
                
                this.selectDate(today);
            }
            
            clear() {
                this.selectedDate = null;
                this.input.value = '';
                this.hide();
                if (this.onDateSelect) this.onDateSelect(null);
            }
            
            selectDate(date) {
                if (this.isDateDisabled(date)) return;
                
                this.selectedDate = new Date(date);
                this.input.value = this.formatDate(date);
                this.hide();
                
                if (this.onDateSelect) this.onDateSelect(date);
                
                // Trigger change event for validation
                this.input.dispatchEvent(new Event('change'));
            }
            
            formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }
            
            parseDate(dateString) {
                if (!dateString) return null;
                const parts = dateString.split('-');
                if (parts.length !== 3) return null;
                return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
            }
            
            isDateDisabled(date) {
                if (this.maxDate && date > this.maxDate) return true;
                if (this.minDate && date < this.minDate) return true;
                return false;
            }
            
            isSameDay(date1, date2) {
                if (!date1 || !date2) return false;
                return date1.getFullYear() === date2.getFullYear() &&
                       date1.getMonth() === date2.getMonth() &&
                       date1.getDate() === date2.getDate();
            }
            
            isToday(date) {
                const today = new Date();
                return this.isSameDay(date, today);
            }
            
            render() {
                this.renderHeader();
                this.renderDays();
            }
            
            renderHeader() {
                const monthYearElement = this.calendar.querySelector(`#${this.inputId.replace('Date', '').replace('On', '')}MonthYear`);
                if (monthYearElement) {
                    monthYearElement.textContent = `${this.monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}`;
                }
            }
            
            renderDays() {
                const daysContainer = this.calendar.querySelector(`#${this.inputId.replace('Date', '').replace('On', '')}CalendarDays`);
                if (!daysContainer) return;
                
                daysContainer.innerHTML = '';
                
                const year = this.currentDate.getFullYear();
                const month = this.currentDate.getMonth();
                
                // First day of the month
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                
                // Start from Sunday of the week containing the first day
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - startDate.getDay());
                
                // Generate 42 days (6 weeks)
                for (let i = 0; i < 42; i++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    
                    const dayElement = document.createElement('button');
                    dayElement.type = 'button';
                    dayElement.className = 'calendar-day';
                    dayElement.textContent = date.getDate();
                    
                    // Add classes based on date properties
                    if (date.getMonth() !== month) {
                        dayElement.classList.add('other-month');
                    }
                    
                    if (this.isToday(date)) {
                        dayElement.classList.add('today');
                    }
                    
                    if (this.selectedDate && this.isSameDay(date, this.selectedDate)) {
                        dayElement.classList.add('selected');
                    }
                    
                    if (this.isDateDisabled(date)) {
                        dayElement.classList.add('disabled');
                        dayElement.disabled = true;
                    } else {
                        dayElement.addEventListener('click', () => this.selectDate(date));
                    }
                    
                    daysContainer.appendChild(dayElement);
                }
            }
            
            setValue(dateString) {
                if (dateString) {
                    const date = this.parseDate(dateString);
                    if (date && !this.isDateDisabled(date)) {
                        this.selectedDate = date;
                        this.currentDate = new Date(date);
                        this.input.value = dateString;
                        this.render();
                    }
                } else {
                    this.clear();
                }
            }
            
            getValue() {
                return this.input.value;
            }
        }

        // Initialize calendars
        let startCalendar, expireCalendar;

        // Initialize custom calendars when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date();
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            startCalendar = new CustomCalendar('startDate', 'startDateCalendar', {
                minDate: today,
                onDateSelect: function(date) {
                    // Update expire calendar min date when start date is selected
                    if (date && expireCalendar) {
                        const nextDay = new Date(date);
                        nextDay.setDate(nextDay.getDate() + 1);
                        expireCalendar.minDate = nextDay;
                        expireCalendar.render();
                    }
                }
            });
            
            expireCalendar = new CustomCalendar('expireOn', 'expireOnCalendar', {
                minDate: tomorrow,
                onDateSelect: function(date) {
                    // Update start calendar max date when expire date is selected
                    if (date && startCalendar) {
                        const prevDay = new Date(date);
                        prevDay.setDate(prevDay.getDate() - 1);
                        startCalendar.maxDate = prevDay;
                        startCalendar.render();
                    }
                }
            });
            
            // Set default start date to today
            startCalendar.setValue(today.toISOString().split('T')[0]);
        });
    </script>
</body>
</html>
