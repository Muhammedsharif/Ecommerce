<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Basic HTML5 document structure -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Static title for product details page -->
    <title>Premium Running Shoe - 1NOTONE</title>
    <style>
        /* Global CSS Reset - Remove default browser styling */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Base body styling for the entire page */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #fff;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header Styles */
        .header {
            border-bottom: 1px solid #e5e5e5;
            background: white;
            position: sticky;
            top: 0;
            z-index: 50;
        }

        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px 0;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            color: #000;
        }

        .nav {
            display: none;
            gap: 32px;
        }

        .nav a {
            text-decoration: none;
            color: #666;
            font-weight: 500;
            transition: color 0.3s;
        }

        .nav a:hover {
            color: #000;
        }

        .header-icons {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .icon {
            width: 24px;
            height: 24px;
            cursor: pointer;
            transition: opacity 0.3s;
        }

        .icon:hover {
            opacity: 0.7;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            background: #e5e5e5;
            border-radius: 50%;
            cursor: pointer;
        }

        /* Main Content */
        .main-content {
            padding: 32px 0;
        }

        .product-section {
            display: grid;
            grid-template-columns: 1fr;
            gap: 48px;
            margin-bottom: 64px;
        }

        /* Product Images */
        .product-images {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .thumbnail-container {
            display: flex;
            gap: 8px;
            margin-bottom: 16px;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            border: 2px solid #e5e5e5;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .thumbnail:hover {
            border-color: #007bff;
            transform: scale(1.05);
        }

        .thumbnail.active {
            border-color: #007bff;
            box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .main-image {
            background: #f5f5f5;
            border-radius: 8px;
            overflow: hidden;
            aspect-ratio: 0.85;
            max-width: 350px;
            width: 350px;
            position: relative;
            cursor: crosshair;
            margin: 0 auto;
        }

        .main-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: none;
            display: block;
        }

        .zoom-indicator {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }

        .main-image:hover .zoom-indicator {
            opacity: 1;
        }

        /* Flipkart-style zoom container */
        .zoom-container {
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .zoom-lens {
            position: absolute;
            border: 2px solid #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.3);
            width: 100px;
            height: 100px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s ease;
            background: rgba(255,255,255,0.3);
            border-radius: 4px;
        }

        .zoom-result {
            position: absolute;
            left: 100%;
            top: 0;
            width: 600px;
            height: 400px;
            margin-left: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background: #fff;
            overflow: hidden;
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
            z-index: 1000;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .zoom-result img {
            position: absolute;
            width: auto;
            height: auto;
        }

        .main-image:hover .zoom-lens {
            opacity: 1;
        }

        .main-image:hover + .zoom-result {
            opacity: 1;
            visibility: visible;
        }

        /* Mobile responsive adjustments */
        @media (max-width: 768px) {
            .zoom-result {
                display: none;
            }
            
            .main-image {
                cursor: zoom-in;
            }
            
            .zoom-lens {
                display: none;
            }
        }

        /* Product Details */
        .product-details {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .product-title {
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .product-code {
            color: #666;
            margin-bottom: 8px;
        }

        .rating-container {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 16px;
        }

        .stars {
            display: flex;
            gap: 2px;
        }

        .star {
            width: 20px;
            height: 20px;
            fill: #fbbf24;
            color: #fbbf24;
        }

        .star.empty {
            fill: #e5e5e5;
            color: #e5e5e5;
        }

        .review-count {
            color: #666;
        }

        .price-container {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .current-price {
            font-size: 32px;
            font-weight: bold;
        }

        .original-price {
            font-size: 20px;
            color: #666;
            text-decoration: line-through;
        }

        .discount-badge {
            background: #ef4444;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }

        .stock-status {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .stock-indicator {
            width: 12px;
            height: 12px;
            background: #10b981;
            border-radius: 50%;
        }

        .stock-text {
            color: #10b981;
            font-weight: 500;
        }

        /* Size Selection */
        .size-options h3 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 10px;
            color: #333;
        }

        .size-buttons {
            display: flex;
            gap: 10px;
        }

        .size-buttons input[type="radio"] {
            display: none;
        }

        .size-buttons label {
            padding: 10px 18px;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: white;
            cursor: pointer;
            font-weight: 500;
            color: #333;
            transition: all 0.2s ease;
        }

        .size-buttons input[type="radio"]:checked + label {
            background-color: black;
            color: white;
            border-color: black;
        }

        /* Color Selection */
        .color-option {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    border: 1px solid #ccc;
    cursor: pointer;
}

        .color moments {
            width: 32px;
            height: 32px;
            border: 2px solid #d1d5db;
            border-radius: 50%;
            cursor: pointer;
            transition: border-color 0.3s;
        }

        /* .color-option:hover {
            border-color: #000;
        } */

        /* .color-black {
            background: #000;
        }

        .color-white {
            background: #fff;
        }

        .color-gray {
            background: #6b7280;
        } */

        /* Quantity */
       .quantity-controls {
  display: flex;
  align-items: center;
  gap: 10px;
}

.quantity-input {
  width: 50px;
  text-align: center;
  padding: 6px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 6px;
}

.minus-btn,
.plus-btn {
  width: 32px;
  height: 32px;
  border: none;
  background-color: #222;
  color: #fff;
  font-size: 18px;
  font-weight: bold;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.minus-btn:hover,
.plus-btn:hover {
  background-color: #444;
}

.minus-btn:disabled,
.plus-btn:disabled {
  background-color: #ccc;
  color: #666;
  cursor: not-allowed;
}

.minus-btn:disabled:hover,
.plus-btn:disabled:hover {
  background-color: #ccc;
}


        /* Buttons */
        .button-group {
            display: flex;
            gap: 16px;
            
        }

        .btn1 {
            padding: 12px 24px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            text-decoration: none;
           border: none; /* Fixed */
            background-color: rgb(250, 154, 0);
            color:#fff;
            
        }

         .btn2 {
            padding: 12px 24px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            text-decoration: none;
            border: none; /* Fixed */
            background-color: rgb(250, 108, 0);
            color:#fff;
            
        }

        

.btn1:hover,
.btn2:hover {
    box-shadow: 0 4px 16px rgba(116, 104, 104, 0.2); /* Smooth shadow */
    transform: translateY(-2px); /* Slight lift */
}

        .btn-ghost {
            background: transparent;
            color: #666;
            border: none;
            width: 100%;
        }

        .btn-ghost:hover {
            color: #000;
        }

        /* Tabs */
        .tabs {
            margin-bottom: 64px;
        }

        .tab-list {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            border-bottom: 1px solid #e5e5e5;
            margin-bottom: 24px;
        }

        .tab-trigger {
            padding: 16px;
            background: none;
            border: none;
            font-weight: 500;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.3s;
        }

        .tab-trigger.active {
            border-bottom-color: #000;
            color: #000;
        }

        .tab-trigger:hover {
            color: #000;
        }

        .tab-content {
            display: none;
            line-height: 1.7;
            color: #666;
        }

        .tab-content.active {
            display: block;
        }

        .tab-content p {
            margin-bottom: 8px;
        }

        /* Reviews */
        .reviews-section {
            margin-bottom: 64px;
        }

        .reviews-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 24px;
        }

        .reviews-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 32px;
        }

        .rating-summary {
            text-align: center;
        }

        .rating-number {
            font-size: 64px;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .rating-breakdown {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .rating-row {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .rating-bar {
            flex: 1;
            height: 8px;
            background: #e5e5e5;
            border-radius: 4px;
            overflow: hidden;
        }

        .rating-fill {
            height: 100%;
            background: #fbbf24;
            width: 0%;
        }

        .no-reviews {
            text-align: center;
            margin-top: 32px;
        }

        .no-reviews-icon {
            width: 64px;
            height: 64px;
            color: #9ca3af;
            margin: 0 auto 16px;
        }

        .no-reviews h3 {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        /* Similar Products */
        .similar-products {
            margin-bottom: 64px;
        }

        .similar-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 24px;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 16px;
        }

        .product-card {
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            padding: 12px;
            cursor: pointer;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            background-color: #fff;
        }

        .product-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }

        .product-image {
            background: #f5f5f5;
            border-radius: 8px;
            margin-bottom: 12px;
            aspect-ratio: 1;
            overflow: hidden;
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
            transition: transform 0.3s ease;
        }

        .product-card:hover .product-image img {
            transform: scale(1.05);
        }

        .product-name {
            font-weight: 500;
            font-size: 14px;
            margin-bottom: 8px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .product-price {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 4px;
        }

        .price-row {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .product-original-price {
            font-size: 12px;
            color: #666;
            text-decoration: line-through;
        }

        .product-discount {
            background: #ef4444;
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: bold;
        }

        /* Newsletter */
        .newsletter {
            text-align: center;
            margin-top: 64px;
            padding: 48px;
            background: #f9fafb;
            border-radius: 8px;
        }

        .newsletter h2 {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 16px;
        }

        .newsletter p {
            color: #666;
            margin-bottom: 24px;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
        }

        .newsletter-form {
            display: flex;
            max-width: 400px;
            margin: 0 auto;
        }

        .newsletter-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #d1d5db;
            border-radius: 4px 0 0 4px;
            border-right: none;
        }

        .newsletter-btn {
            background: #ef4444;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            font-weight: 500;
            transition: background 0.3s;
        }

        .newsletter-btn:hover {
            background: #dc2626;
        }

        /* Responsive Design */
        @media (min-width: 768px) {
            .nav {
                display: flex;
            }

            .product-section {
                grid-template-columns: 1fr 1fr;
            }

            .reviews-grid {
                grid-template-columns: 1fr 1fr;
            }

            .products-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        @media (min-width: 1024px) {
            .container {
                padding: 0 40px;
            }
        }

        /* Utility Classes */
        .hidden {
            display: none;
        }

        .text-center {
            text-align: center;
        }

        .mb-2 {
            margin-bottom: 8px;
        }

        .mb-4 {
            margin-bottom: 16px;
        }

        .mb-6 {
            margin-bottom: 24px;
        }

        .mb-8 {
            margin-bottom: 32px;
        }

        .mt-2 {
            margin-top: 8px;
        }

        .mt-4 {
            margin-top: 16px;
        }

        .mt-6 {
            margin-top: 24px;
        }

        .mt-8 {
            margin-top: 32px;
        }
    </style>
</head>

<body>
    <!-- Header -->
    <%- include("../partials/user/header") %>

    <!-- Breadcrumb Navigation -->
    <%- include("../partials/user/breadcrumb", {
        breadcrumbs: [
            { name: "Shop", url: "/shop" },
            { name: product.productName, url: "#" }
        ]
    }) %>

    <div class="container">
        <main class="main-content">
            <!-- Main Product Section -->
            <section class="product-section">
                <!-- Product Images -->
                <div class="product-images">
                    <div class="thumbnail-container">
                        <% for (let i = 0; i < product.productImage.length; i++) { %>
                        <div class="thumbnail <%= i === 0 ? 'active' : '' %>" data-image-index="<%= i %>">
                            <img src="/Uploads/product-images/<%=product.productImage[i]%>" alt="product image <%= i + 1 %>">
                        </div>
                        <% } %>
                    </div>
                    <div class="zoom-container">
                        <div class="main-image" id="productZoomContainer">
                            <img id="mainProductImage" src="/Uploads/product-images/<%=product.productImage[0]%>" alt="<%= product.productName %>">
                            <div class="zoom-lens" id="zoomLens"></div>
                            <!-- <div class="zoom-indicator">🔍 Hover to zoom</div> -->
                        </div>
                        <div class="zoom-result" id="zoomResult">
                            <img id="zoomResultImage" src="/Uploads/product-images/<%=product.productImage[0]%>" alt="<%= product.productName %>">
                        </div>
                    </div>
                </div>

                <!-- Product Details -->
                <div class="product-details">
                    <div>
                        <h1 class="product-title">
                            <%=product.productName%>
                        </h1>
                        <div class="rating-container">
                            <div class="stars">
                                <svg class="star" viewBox="0 0 24 24">
                                    <path
                                        d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                                </svg>
                                <svg class="star" viewBox="0 0 24 24">
                                    <path
                                        d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                                </svg>
                                <svg class="star" viewBox="0 0 24 24">
                                    <path
                                        d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                                </svg>
                                <svg class="star" viewBox="0 0 24 24">
                                    <path
                                        d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                                </svg>
                                <svg class="star" viewBox="0 0 24 24">
                                    <path
                                        d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                                </svg>
                            </div>
                            <span class="review-count">(0 reviews)</span>
                        </div>
                    </div>

                    <div class="price-container">
                        <%
                        // Get first variant for initial pricing display
                        const firstVariant = product.variant.sort((a, b) => {
                            const aNum = parseFloat(a.size);
                            const bNum = parseFloat(b.size);
                            if (!isNaN(aNum) && !isNaN(bNum)) {
                                return aNum - bNum;
                            }
                            return a.size.localeCompare(b.size);
                        })[0];

                        // Calculate discounted price for first variant
                        const variantPrice = firstVariant ? firstVariant.varientPrice : product.regularPrice;
                        const discountedPrice = totalOffer > 0 ?
                            Math.round(variantPrice - (variantPrice * totalOffer / 100)) :
                            variantPrice;
                        %>

                        <span class="current-price" id="total-price">₹<%= discountedPrice %></span>
                        <span class="original-price" id="total-price1">₹<%= variantPrice %></span>
                        <span class="discount-badge">
                            <%if(!totalOffer){%>
                                No Offers
                            <%}else{%>
                                <%=totalOffer%> % Offer
                            <%}%>
                        </span>
                    </div>

                    <div class="stock-status">
                        <div class="stock-indicator"></div>
                        <span class="stock-text"><%=quantity%> Items in Stock</span>
                    </div>

                    <!-- Size Selection -->
                    <div class="size-options">
    <h3>Size:</h3>
    <div class="size-buttons">
        <%
        // Sort variants by size for consistent ordering
        const sortedVariants = product.variant.sort((a, b) => {
            // Try to sort numerically first, then alphabetically
            const aNum = parseFloat(a.size);
            const bNum = parseFloat(b.size);
            if (!isNaN(aNum) && !isNaN(bNum)) {
                return aNum - bNum;
            }
            return a.size.localeCompare(b.size);
        });
        %>
        <% for (let i = 0; i < sortedVariants.length; i++) { %>
            <input
                type="radio"
                id="size-<%= sortedVariants[i].size %>"
                name="size"
                value="<%= sortedVariants[i].size %>"
                <%= i === 0 ? 'checked' : '' %>
                data-variant-price="<%= sortedVariants[i].varientPrice %>"
                data-variant-quantity="<%= sortedVariants[i].varientquantity %>"
            >
            <label for="size-<%= sortedVariants[i].size %>"><%= sortedVariants[i].size %></label>
        <% } %>
    </div>
</div>
                    


                    <!-- Color Selection -->
                    <div class="color-section">
                        <h3>Color:</h3>
                        <div class="color-options">
                          <div class="color-option" style="background-color: <%= color %>;"></div>
                        </div>
                    </div>  

                    <!-- Quantity -->
                    <div class="quantity-section">
                        <h3>Quantity:</h3>
                        <div class="quantity-controls">
                            <button class="minus-btn">-</button>
                            <input type="number" class="quantity-input" value="1" min="1">
                            <button class="plus-btn">+</button>
                        </div>
                    </div>

 
                    <!-- Action Buttons -->
                    <div class="button-group">
                        <button class="btn1" id="addToCartBtn" onclick="addToCart('<%=product._id%>', '<%=product.productName%>')">
                            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                <path
                                    d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01" />
                            </svg>
                            Add to Cart
                        </button>
                        <button class="btn2" onclick="proceedToCheckout()">⚡ Buy Now</button>
                    </div>

                    <button class="btn btn-ghost" onclick="addToWishlist('<%=product._id%>')">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                        </svg>
                        Add to Wishlist
                    </button>
                </div>
            </section>

            <!-- Product Information Tabs -->
            <section class="tabs">
                <div class="tab-list">
                    <button class="tab-trigger active" data-tab="description">DESCRIPTION</button>
                    <button class="tab-trigger" data-tab="details">DETAILS</button>
                    <button class="tab-trigger" data-tab="care">CARE INSTRUCTIONS</button>
                </div>

                <div class="tab-content active" id="description">
                    <p><%=product.description%></p>
                </div>

                <div class="tab-content" id="details">
                    <p><strong>Material:</strong> Synthetic mesh upper with rubber sole</p>
                    <p><strong>Closure:</strong> Lace-up</p>
                    <p><strong>Heel Height:</strong> 1.5 inches</p>
                    <p><strong>Weight:</strong> 280g (per shoe)</p>
                    <p><strong>Origin:</strong> Made in India</p>
                </div>

                <div class="tab-content" id="care">
                    <p>• Clean with a soft brush and mild soap</p>
                    <p>• Air dry at room temperature</p>
                    <p>• Avoid direct sunlight and heat sources</p>
                    <p>• Store in a cool, dry place</p>
                    <p>• Use shoe trees to maintain shape</p>
                </div>
            </section>

            <!-- Customer Reviews -->
            <section class="reviews-section">
                <h2 class="reviews-title">Customer Reviews</h2>
                <div class="reviews-grid">
                    <div class="rating-summary">
                        <div class="rating-number">0.0</div>
                        <div class="stars mb-2">
                            <svg class="star empty" viewBox="0 0 24 24">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <svg class="star empty" viewBox="0 0 24 24">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <svg class="star empty" viewBox="0 0 24 24">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <svg class="star empty" viewBox="0 0 24 24">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <svg class="star empty" viewBox="0 0 24 24">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                        </div>
                        <p>Based on 0 reviews</p>
                    </div>

                    <div class="rating-breakdown">
                        <div class="rating-row">
                            <svg class="star" viewBox="0 0 24 24" width="16" height="16">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <span>5</span>
                            <div class="rating-bar">
                                <div class="rating-fill"></div>
                            </div>
                            <span>0%</span>
                        </div>
                        <div class="rating-row">
                            <svg class="star" viewBox="0 0 24 24" width="16" height="16">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <span>4</span>
                            <div class="rating-bar">
                                <div class="rating-fill"></div>
                            </div>
                            <span>0%</span>
                        </div>
                        <div class="rating-row">
                            <svg class="star" viewBox="0 0 24 24" width="16" height="16">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <span>3</span>
                            <div class="rating-bar">
                                <div class="rating-fill"></div>
                            </div>
                            <span>0%</span>
                        </div>
                        <div class="rating-row">
                            <svg class="star" viewBox="0 0 24 24" width="16" height="16">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <span>2</span>
                            <div class="rating-bar">
                                <div class="rating-fill"></div>
                            </div>
                            <span>0%</span>
                        </div>
                        <div class="rating-row">
                            <svg class="star" viewBox="0 0 24 24" width="16" height="16">
                                <path
                                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                            </svg>
                            <span>1</span>
                            <div class="rating-bar">
                                <div class="rating-fill"></div>
                            </div>
                            <span>0%</span>
                        </div>
                    </div>

                    <div class="no-reviews">
                        <svg class="no-reviews-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                        <h3>No Reviews Yet</h3>
                        <p>Be the first to review this product</p>
                    </div>
                </section>

                <!-- Similar Products -->
                <section class="similar-products">
                    <h2 class="similar-title">Similar Products</h2>
                    <div class="products-grid">
                        <% for (let i = 0; i < similarProducts.length; i++) { %>
                        <%
                        // Calculate lowest variant price for similar product
                        const currentProduct = similarProducts[i];
                        let lowestPrice = currentProduct.regularPrice;
                        let lowestVariantPrice = currentProduct.regularPrice;

                        if (currentProduct.variant && currentProduct.variant.length > 0) {
                            // Find the lowest variant price
                            lowestVariantPrice = Math.min(...currentProduct.variant.map(v => v.varientPrice));
                            lowestPrice = lowestVariantPrice;
                        }

                        // Calculate category and product offers for similar product
                        const productOfferPercent = currentProduct.productOffer || 0;
                        const categoryOfferPercent = currentProduct.category?.categoryOffer || 0;
                        const totalOfferPercent = Math.max(productOfferPercent, categoryOfferPercent);

                        // Calculate discounted price
                        const discountedPrice = totalOfferPercent > 0 ?
                            Math.round(lowestPrice - (lowestPrice * totalOfferPercent / 100)) :
                            lowestPrice;
                        %>
                        <div class="product-card">
                            <div class="product-image">
                                <a href="/productDetails?id=<%=currentProduct._id%>">
                                    <img src="/Uploads/product-images/<%= currentProduct.productImage[0] %>" alt="<%= currentProduct.productName %>">
                                </a>
                            </div>
                            <h3 class="product-name"><%= currentProduct.productName %></h3>
                            <div class="product-price">₹<%= discountedPrice %></div>
                            <div class="price-row">
                                <span class="product-original-price">₹<%= lowestPrice %></span>
                                <% if (totalOfferPercent > 0) { %>
                                    <span class="product-discount"><%= totalOfferPercent %>% OFF</span>
                                <% } else { %>
                                    <span class="product-discount">No Offers</span>
                                <% } %>
                            </div>
                        </div>
                        <% } %>
                    </div>
                </section>

                <!-- Newsletter Section -->
                <section class="newsletter">
                    <h2>Get Exclusive Offers & Updates</h2>
                    <p>Subscribe to our newsletter for exclusive deals, new arrivals, and fashion tips.</p>
                    <form class="newsletter-form">
                        <input type="email" class="newsletter-input" placeholder="Enter your email" required>
                        <button type="submit" class="newsletter-btn">Subscribe</button>
                    </form>
                </section>
            </main>
        </div>
        <%- include("../partials/user/footer") %>

       <script>
            document.addEventListener("DOMContentLoaded", () => {
                // Tab functionality
                const tabTriggers = document.querySelectorAll(".tab-trigger");
                const tabContents = document.querySelectorAll(".tab-content");

                tabTriggers.forEach((trigger) => {
                    trigger.addEventListener("click", function () {
                        const targetTab = this.getAttribute("data-tab");

                        tabTriggers.forEach((t) => t.classList.remove("active"));
                        tabContents.forEach((c) => c.classList.remove("active"));

                        this.classList.add("active");
                        document.getElementById(targetTab).classList.add("active");
                    });
                });

         

                // Enhanced thumbnail selection with smooth transitions
                const thumbnails = document.querySelectorAll(".thumbnail");
                const mainImage = document.querySelector(".main-image img");
                const zoomContainer = document.getElementById('productZoomContainer');

                thumbnails.forEach((thumbnail, index) => {
                    thumbnail.addEventListener("click", function () {
                        // Remove active class from all thumbnails
                        thumbnails.forEach((t) => t.classList.remove("active"));

                        // Add active class to clicked thumbnail
                        this.classList.add("active");

                        // Get new image source
                        const newSrc = this.querySelector("img").src;

                        // Add fade effect during image change
                        mainImage.style.opacity = '0.5';

                        setTimeout(() => {
                            mainImage.src = newSrc;
                            mainImage.style.opacity = '1';

                            // Reset zoom if image was zoomed
                            if (zoomContainer.classList.contains('zoomed')) {
                                zoomContainer.classList.remove('zoomed');
                            }
                        }, 150);
                    });
                });

                // DOM element selection for size selection and price adjustment functionality
                const sizeInputs = document.querySelectorAll('input[name="size"]');
                const currentPriceElement = document.querySelector(".current-price");
                const regularPriceElement = document.querySelector(".original-price");
                const quantityInput = document.querySelector(".quantity-input");
                const discountBadge = document.querySelector(".discount-badge");

                // Get product data from server using EJS template injection
                const variants = <%- JSON.stringify(product.variant || []) %>;
                const productOffer = <%- product.productOffer || 0 %>;
                const categoryOffer = <%- (product.category && product.category.categoryOffer) || 0 %>;
                const totalOfferPercent = Math.max(productOffer, categoryOffer);

                // Sort variants by size for consistent ordering (same logic as server-side)
                const sortedVariants = variants.sort((a, b) => {
                    const aNum = parseFloat(a.size);
                    const bNum = parseFloat(b.size);
                    if (!isNaN(aNum) && !isNaN(bNum)) {
                        return aNum - bNum;
                    }
                    return a.size.localeCompare(b.size);
                });

                // Create a map for quick variant lookup by size for efficient price calculations
                const variantMap = {};
                sortedVariants.forEach(variant => {
                    variantMap[variant.size] = variant;
                });

                // Function to calculate discounted price
                function calculateDiscountedPrice(originalPrice, offerPercent) {
                    if (offerPercent > 0) {
                        const discountAmount = (originalPrice * offerPercent) / 100;
                        return Math.round(originalPrice - discountAmount);
                    }
                    return originalPrice;
                }

                // Function to update prices and totals
                function updatePricesAndTotals(selectedVariant) {
                    const quantity = parseInt(quantityInput.value) || 1;
                    const regularPrice = selectedVariant ? selectedVariant.varientPrice : <%- product.regularPrice || 0 %>;
                    const discountedPrice = selectedVariant ? calculateDiscountedPrice(selectedVariant.varientPrice, totalOfferPercent) : calculateDiscountedPrice(<%- product.regularPrice || 0 %>, totalOfferPercent);

                    // Update unit prices
                    currentPriceElement.textContent = `₹${discountedPrice.toLocaleString('en-IN')}`;
                    regularPriceElement.textContent = `₹${regularPrice.toLocaleString('en-IN')}`;

                    // Update total prices
                    const totalDiscountedPrice = discountedPrice * quantity;
                    const totalRegularPrice = regularPrice * quantity;

                    currentPriceElement.textContent = `₹${totalDiscountedPrice.toLocaleString('en-IN')}`;
                    regularPriceElement.textContent = `₹${totalRegularPrice.toLocaleString('en-IN')}`;

                    // Update discount badge
                    if (totalOfferPercent > 0) {
                        discountBadge.textContent = `${totalOfferPercent}% Offer`;
                    } else {
                        discountBadge.textContent = 'No Offers';
                    }
                }

                // Initialize page with first size selected and proper pricing
                function initializePage() {
                    const firstSizeInput = document.querySelector('input[name="size"]:checked');
                    if (firstSizeInput && sortedVariants.length > 0) {
                        const firstVariant = sortedVariants[0];

                        // Update prices based on first variant
                        updatePricesAndTotals(firstVariant);

                        // Update stock display
                        const stockText = document.querySelector('.stock-text');
                        if (stockText) {
                            stockText.textContent = `${firstVariant.varientquantity || 0} Items in Stock`;
                        }

                        // Initialize quantity controls
                        const currentQty = parseInt(quantityInput.value) || 1;
                        const maxStock = firstVariant.varientquantity || 0;

                        // Set initial button states
                        const minusBtn = document.querySelector(".minus-btn");
                        const plusBtn = document.querySelector(".plus-btn");

                        if (minusBtn) minusBtn.disabled = currentQty <= 1;
                        if (plusBtn) plusBtn.disabled = currentQty >= maxStock;

                        // Set max attribute on quantity input
                        quantityInput.setAttribute('max', maxStock);
                    }
                }

                // Size selection event listener
                sizeInputs.forEach((input) => {
                    input.addEventListener("change", function () {
                        const selectedSize = this.value;
                        const selectedVariant = variantMap[selectedSize];

                        // Update prices based on selected variant
                        updatePricesAndTotals(selectedVariant);

                        // Update stock display
                        const stockText = document.querySelector('.stock-text');
                        if (stockText && selectedVariant) {
                            stockText.textContent = `${selectedVariant.varientquantity || 0} Items in Stock`;
                        }

                        // Reset quantity to 1 and update button states when size changes
                        const currentQty = 1;
                        quantityInput.value = currentQty;
                        
                        // Update quantity input max attribute
                        const maxStock = selectedVariant ? selectedVariant.varientquantity : 0;
                        quantityInput.setAttribute('max', maxStock);

                        // Update button states based on new variant
                        const minusBtn = document.querySelector(".minus-btn");
                        const plusBtn = document.querySelector(".plus-btn");
                        
                        if (minusBtn) {
                            minusBtn.disabled = currentQty <= 1;
                        }
                        
                        if (plusBtn) {
                            plusBtn.disabled = currentQty >= maxStock || maxStock === 0;
                        }

                        // Update stock text color if out of stock
                        if (stockText) {
                            if (maxStock === 0) {
                                stockText.style.color = '#e74c3c';
                                stockText.textContent = 'Out of Stock';
                            } else {
                                stockText.style.color = '#10b981';
                            }
                        }
                    });
                });

                // Initialize the page when DOM is ready
                initializePage();

                // Enhanced quantity controls with stock validation
                const minusBtn = document.querySelector(".minus-btn");
                const plusBtn = document.querySelector(".plus-btn");

                // Function to validate and update quantity
                function validateAndUpdateQuantity(newQty, selectedVariant) {
                    const maxStock = selectedVariant ? selectedVariant.varientquantity : 0;

                    if (newQty < 1) {
                        newQty = 1;
                    } else if (newQty > maxStock) {
                        newQty = maxStock;
                        // Show stock limit message
                        const stockText = document.querySelector('.stock-text');
                        if (stockText) {
                            stockText.style.color = '#e74c3c';
                            setTimeout(() => {
                                stockText.style.color = '';
                            }, 2000);
                        }
                    }

                    quantityInput.value = newQty;
                    updatePricesAndTotals(selectedVariant);

                    // Update button states
                    minusBtn.disabled = newQty <= 1;
                    plusBtn.disabled = newQty >= maxStock;

                    return newQty;
                }

                // Function to get currently selected variant
                function getCurrentSelectedVariant() {
                    const selectedSize = document.querySelector('input[name="size"]:checked')?.value;
                    return selectedSize ? variantMap[selectedSize] : null;
                }

                // Minus button event listener
                if (minusBtn) {
                    minusBtn.addEventListener("click", (e) => {
                        e.preventDefault();
                        let qty = parseInt(quantityInput.value) || 1;
                        const selectedVariant = getCurrentSelectedVariant();
                        validateAndUpdateQuantity(qty - 1, selectedVariant);
                    });
                }

                // Plus button event listener
                if (plusBtn) {
                    plusBtn.addEventListener("click", (e) => {
                        e.preventDefault();
                        let qty = parseInt(quantityInput.value) || 1;
                        const selectedVariant = getCurrentSelectedVariant();
                        validateAndUpdateQuantity(qty + 1, selectedVariant);
                    });
                }

                // Handle direct input changes
                if (quantityInput) {
                    quantityInput.addEventListener("input", (e) => {
                        let qty = parseInt(e.target.value) || 1;
                        const selectedVariant = getCurrentSelectedVariant();
                        validateAndUpdateQuantity(qty, selectedVariant);
                    });

                    // Handle blur event to ensure valid value
                    quantityInput.addEventListener("blur", (e) => {
                        let qty = parseInt(e.target.value) || 1;
                        const selectedVariant = getCurrentSelectedVariant();
                        validateAndUpdateQuantity(qty, selectedVariant);
                    });

                    // Prevent non-numeric input
                    quantityInput.addEventListener("keypress", (e) => {
                        if (!/[0-9]/.test(e.key) && !['Backspace', 'Delete', 'Tab', 'Enter'].includes(e.key)) {
                            e.preventDefault();
                        }
                    });
                }

                // Initialize with default size
                const defaultSizeInput = document.querySelector('input[name="size"]:checked');
                if (defaultSizeInput) {
                    const defaultSize = defaultSizeInput.value;
                    const defaultVariant = variantMap[defaultSize];
                    updatePricesAndTotals(defaultVariant);
                } else {
                    // Fallback to product-level pricing
                    updatePricesAndTotals(null);
                }

                // Newsletter form
                const newsletterForm = document.querySelector(".newsletter-form");
                newsletterForm.addEventListener("submit", function (e) {
                    e.preventDefault();
                    const email = this.querySelector(".newsletter-input").value;
                    alert("Thank you for subscribing with email: " + email);
                    this.reset();
                });

                // Flipkart-style zoom functionality
                const zoomLens = document.getElementById('zoomLens');
                const zoomResult = document.getElementById('zoomResult');
                const zoomResultImage = document.getElementById('zoomResultImage');

                if (zoomContainer && mainImage && zoomLens && zoomResult && zoomResultImage) {
                    // Initialize zoom functionality
                    function initializeZoom() {
                        // Set up the zoom result image
                        zoomResultImage.src = mainImage.src;
                        
                        // Calculate zoom ratio
                        const zoomRatio = 2.5; // How much to magnify
                        
                        // Set zoom result image size
                        const mainImageRect = mainImage.getBoundingClientRect();
                        const resultWidth = zoomResult.offsetWidth;
                        const resultHeight = zoomResult.offsetHeight;
                        
                        zoomResultImage.style.width = (mainImageRect.width * zoomRatio) + 'px';
                        zoomResultImage.style.height = (mainImageRect.height * zoomRatio) + 'px';
                    }

                    // Mouse enter event
                    zoomContainer.addEventListener('mouseenter', function() {
                        initializeZoom();
                        zoomLens.style.opacity = '1';
                        zoomResult.style.opacity = '1';
                        zoomResult.style.visibility = 'visible';
                    });

                    // Mouse leave event
                    zoomContainer.addEventListener('mouseleave', function() {
                        zoomLens.style.opacity = '0';
                        zoomResult.style.opacity = '0';
                        zoomResult.style.visibility = 'hidden';
                    });

                    // Mouse move event for lens tracking
                    zoomContainer.addEventListener('mousemove', function(e) {
                        const rect = zoomContainer.getBoundingClientRect();
                        const x = e.clientX - rect.left;
                        const y = e.clientY - rect.top;
                        
                        // Calculate lens position
                        const lensWidth = zoomLens.offsetWidth;
                        const lensHeight = zoomLens.offsetHeight;
                        
                        let lensX = x - (lensWidth / 2);
                        let lensY = y - (lensHeight / 2);
                        
                        // Keep lens within image bounds
                        if (lensX < 0) lensX = 0;
                        if (lensY < 0) lensY = 0;
                        if (lensX > rect.width - lensWidth) lensX = rect.width - lensWidth;
                        if (lensY > rect.height - lensHeight) lensY = rect.height - lensHeight;
                        
                        // Position the lens
                        zoomLens.style.left = lensX + 'px';
                        zoomLens.style.top = lensY + 'px';
                        
                        // Calculate zoom result position
                        const zoomRatio = 2.5;
                        const resultWidth = zoomResult.offsetWidth;
                        const resultHeight = zoomResult.offsetHeight;
                        
                        // Calculate the position of the zoomed image
                        const zoomedImageX = -(lensX * zoomRatio);
                        const zoomedImageY = -(lensY * zoomRatio);
                        
                        // Position the zoomed image
                        zoomResultImage.style.left = zoomedImageX + 'px';
                        zoomResultImage.style.top = zoomedImageY + 'px';
                    });

                    // Update zoom when thumbnail changes
                    thumbnails.forEach((thumbnail) => {
                        thumbnail.addEventListener("click", function () {
                            const newSrc = this.querySelector("img").src;
                            setTimeout(() => {
                                zoomResultImage.src = newSrc;
                                initializeZoom();
                            }, 200);
                        });
                    });

                    // Initialize on page load
                    initializeZoom();
                }
            });

            // Add to Cart functionality
            async function addToCart(productId, productName) {
                try {
                    const button = document.getElementById('addToCartBtn');
                    const quantityInput = document.querySelector('.quantity-input');
                    const quantity = parseInt(quantityInput.value) || 1;

                    // Get selected size
                    const selectedSizeElement = document.querySelector('input[name="size"]:checked');
                    const selectedSize = selectedSizeElement ? selectedSizeElement.value : null;

                    // Validate size selection
                    if (!selectedSize) {
                        showToast('Please select a size before adding to cart', 'error');
                        // Highlight size section to draw attention
                        const sizeSection = document.querySelector('.size-options');
                        if (sizeSection) {
                            sizeSection.style.border = '2px solid #ef4444';
                            sizeSection.style.borderRadius = '8px';
                            sizeSection.style.padding = '10px';
                            setTimeout(() => {
                                sizeSection.style.border = '';
                                sizeSection.style.borderRadius = '';
                                sizeSection.style.padding = '';
                            }, 3000);
                        }
                        return;
                    }

                    // Get selected color
                    const selectedColor = "<%=color%>";

                    // Disable button temporarily
                    button.disabled = true;
                    const originalHTML = button.innerHTML;
                    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';

                    // Make multiple requests for the selected quantity
                    let successCount = 0;
                    let errorMessage = '';
                    let lastCartCount = 0;

                    for (let i = 0; i < quantity; i++) {
                        try {
                            const response = await fetch("/cart/add", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    productId: productId,
                                    size: selectedSize,
                                    color: selectedColor
                                })
                            });

                            const data = await response.json();
                            if (data.success) {
                                successCount++;
                                lastCartCount = data.length;
                            } else {
                                errorMessage = data.message || "Failed to add to cart";
                                break;
                            }
                        } catch (error) {
                            errorMessage = "Failed to add to cart. Please try again.";
                            break;
                        }
                    }

                    if (successCount > 0) {
                        const message = successCount === quantity
                            ? `${quantity} ${productName}${quantity > 1 ? 's' : ''} added to cart successfully!`
                            : `${successCount} of ${quantity} ${productName}${quantity > 1 ? 's' : ''} added to cart.`;

                        showToast(message, 'success');

                        // Update cart counter immediately
                        if (window.updateCartCounter) {
                            window.updateCartCounter(lastCartCount);
                        }

                        // Change button text temporarily
                        button.innerHTML = '<i class="fas fa-check"></i> Added!';
                        button.style.background = '#28a745';

                        setTimeout(() => {
                            button.innerHTML = originalHTML;
                            button.style.background = '';
                            button.disabled = false;
                        }, 2000);
                    } else {
                        showToast(errorMessage || "Failed to add to cart", 'error');
                        button.innerHTML = originalHTML;
                        button.disabled = false;
                    }
                } catch (error) {
                    console.error('Error adding to cart:', error);
                    showToast('Failed to add to cart. Please try again.', 'error');

                    const button = document.getElementById('addToCartBtn');
                    button.innerHTML = originalHTML;
                    button.disabled = false;
                }
            }

            // Add to Wishlist functionality
            function addToWishlist(productId) {
                if (!productId) {
                    showToast('Invalid product ID', 'error');
                    return;
                }

                fetch('/wishlist/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ productId: productId })
                    
                })
                .then(response => response.json())
                
                .then(response => {
                    if (response.status) {
                        showToast(response.message || 'Product added to wishlist!', 'success');
                        
                        // Update wishlist counter immediately
                        if (window.updateWishlistCounter && response.wishlistCount !== undefined) {
                            window.updateWishlistCounter(response.wishlistCount);
                        }
                        
                        // Update wishlist button text to show current state
                        const wishlistBtn = document.querySelector('.btn-ghost');
                        if (wishlistBtn) {
                            if (response.action === 'added') {
                                wishlistBtn.innerHTML = `
                                    <svg width="16" height="16" fill="currentColor" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                    </svg>
                                    Added to Wishlist
                                `;
                                wishlistBtn.style.color = '#ef4444';
                            } else {
                                wishlistBtn.innerHTML = `
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                    </svg>
                                    Add to Wishlist
                                `;
                                wishlistBtn.style.color = '';
                            }
                        }
                    } else {
                        showToast(response.message || 'Failed to add to wishlist', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error adding to wishlist:', error);
                    showToast('Failed to add to wishlist. Please try again.', 'error');
                });
            }

            // Toast notification function
            function showToast(message, type = 'info') {
                // Create toast if it doesn't exist
                let toast = document.getElementById('toast');
                if (!toast) {
                    toast = document.createElement('div');
                    toast.id = 'toast';
                    toast.style.cssText = `
                        position: fixed;
                        top: 650px;
                        right: 20px;
                        background: ${type === 'success' ? '#006400' : '#DC143C'};
                        color:#FFFFFF;
                        border-radius: 8px;
                        padding: 10px 20px;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                        z-index: 1000;
                        display: flex;
                        align-items: center;
                        gap: 10px;
                        min-width: 200px;
                        transform: translateX(100%);
                        transition: transform 0.3s ease;
                    `;
                    document.body.appendChild(toast);
                }

                const emoji = {
                    success: '✅',
                    error: '❌',
                    info: 'ℹ️'
                };

                const borderColor = {
                    success: '#006400',
                    error: '#DC143C',
                    info: '#007bff'
                };

                toast.innerHTML = `
                    <span style="font-size: 18px;">${emoji[type]}</span>
                    <span style="color: #fff; font-weight: 500;">${message}</span>
                `;
                toast.style.borderLeft = `5px solid ${borderColor[type]}`;
                toast.style.transform = 'translateX(0)';

                setTimeout(() => {
                    toast.style.transform = 'translateX(100%)';
                }, 3000);
            }
                   async function proceedToCheckout() {
            try {
                // Get selected size
                const selectedSizeElement = document.querySelector('input[name="size"]:checked');
                const selectedSize = selectedSizeElement ? selectedSizeElement.value : null;

                // Validate size selection
                if (!selectedSize) {
                    showToast('Please select a size before proceeding', 'error');
                    // Highlight size section to draw attention
                    const sizeSection = document.querySelector('.size-options');
                    if (sizeSection) {
                        sizeSection.style.border = '2px solid #ef4444';
                        sizeSection.style.borderRadius = '8px';
                        sizeSection.style.padding = '10px';
                        setTimeout(() => {
                            sizeSection.style.border = '';
                            sizeSection.style.borderRadius = '';
                            sizeSection.style.padding = '';
                        }, 3000);
                    }
                    return;
                }

                // Get quantity
                const quantityInput = document.querySelector('.quantity-input');
                const quantity = parseInt(quantityInput.value) || 1;

                // Get selected color
                const selectedColor = "<%=color%>";

                // Get product ID
                const productId = "<%=product._id%>";

                // Show loading state
                const buyNowButton = document.querySelector('.btn2');
                const originalHTML = buyNowButton.innerHTML;
                buyNowButton.disabled = true;
                buyNowButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

                // Send Buy Now request
                const response = await fetch('/buy-now', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId: productId,
                        size: selectedSize,
                        quantity: quantity,
                        color: selectedColor
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Redirect to checkout page
                    window.location.href = data.redirectUrl;
                } else {
                    // Handle error
                    if (data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    } else {
                        showToast(data.message || 'Failed to proceed to checkout', 'error');
                        buyNowButton.disabled = false;
                        buyNowButton.innerHTML = originalHTML;
                    }
                }

            } catch (error) {
                console.error('Error in Buy Now:', error);
                showToast('Something went wrong. Please try again.', 'error');
                
                // Reset button state
                const buyNowButton = document.querySelector('.btn2');
                buyNowButton.disabled = false;
                buyNowButton.innerHTML = '⚡ Buy Now';
            }
        }
        </script>
</body>

</html>
