<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Inter', sans-serif;
        }
        
        .card-custom {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: none;
            margin-bottom: 2rem;
        }
        
        .stats-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 2rem;
            text-align: center;
            border-left: 4px solid #6366f1;
        }
        
        .stats-number {
            font-size: 2rem;
            font-weight: bold;
            color: #6366f1;
            margin-bottom: 0.5rem;
        }
        
        .stats-label {
            color: #6b7280;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .filter-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .btn-report {
            background: #6366f1;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-weight: 600;
            transition: background 0.3s;
        }
        
        .btn-report:hover {
            background: #5856eb;
            color: white;
        }
        
        .btn-download {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.9rem;
            margin: 0 0.25rem;
            transition: background 0.3s;
        }
        
        .btn-download:hover {
            background: #059669;
            color: white;
        }
        
        .chart-container {
            position: relative;
            height: 400px;
            margin: 2rem 0;
        }
        
        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
        }
        
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 2rem;
        }
        
        .report-section {
            display: none;
        }
        
        .quick-filter-btn {
            background: #f3f4f6;
            color: #374151;
            border: 1px solid #d1d5db;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            margin: 0 0.25rem 0.5rem 0;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .quick-filter-btn:hover,
        .quick-filter-btn.active {
            background: #6366f1;
            color: white;
            border-color: #6366f1;
        }
        
        .date-range-section {
            display: none;
            margin-top: 1rem;
        }
        
        .custom-days-section {
            display: none;
            margin-top: 1rem;
        }

        /* Date validation error styles */
        .date-validation-error {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }

        /* Custom Date Input Styling */
        .date-input-container {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .date-input-wrapper {
            position: relative;
            display: flex;
            align-items: center;
        }

        .date-input-wrapper input[type="date"] {
            width: 100%;
            padding: 0.75rem 2.5rem 0.75rem 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.9rem;
            background-color: white;
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
        }

        .date-input-wrapper input[type="date"]:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .date-input-wrapper .calendar-icon {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
            pointer-events: none;
            z-index: 2;
            font-size: 1rem;
        }

        /* Hide default calendar icon in webkit browsers */
        input[type="date"]::-webkit-calendar-picker-indicator {
            opacity: 0;
            position: absolute;
            right: 0;
            width: 2.5rem;
            height: 100%;
            cursor: pointer;
        }

        /* Firefox date input styling */
        input[type="date"]::-moz-focus-inner {
            border: 0;
        }

        /* Custom calendar popup positioning and styling */
        input[type="date"]::-webkit-datetime-edit {
            padding: 0;
        }

        input[type="date"]::-webkit-datetime-edit-fields-wrapper {
            padding: 0;
        }

        input[type="date"]::-webkit-datetime-edit-text {
            color: #374151;
            padding: 0 0.25rem;
        }

        input[type="date"]::-webkit-datetime-edit-month-field,
        input[type="date"]::-webkit-datetime-edit-day-field,
        input[type="date"]::-webkit-datetime-edit-year-field {
            color: #374151;
            background: transparent;
            border: none;
            padding: 0 0.25rem;
        }

        input[type="date"]::-webkit-datetime-edit-month-field:focus,
        input[type="date"]::-webkit-datetime-edit-day-field:focus,
        input[type="date"]::-webkit-datetime-edit-year-field:focus {
            background: rgba(99, 102, 241, 0.1);
            outline: none;
            border-radius: 2px;
        }

        /* Ensure calendar popup appears above other elements */
        .date-range-section,
        .custom-days-section {
            position: relative;
            z-index: 1000;
        }

        .date-range-section .col-md-3,
        .custom-days-section .col-md-3 {
            position: relative;
            z-index: 1001;
        }

        /* Additional styling for better calendar appearance */
        .form-label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        /* Responsive date input styling */
        @media (max-width: 768px) {
            .date-input-wrapper input[type="date"] {
                padding: 0.6rem 2.25rem 0.6rem 0.6rem;
                font-size: 0.85rem;
            }
            
            .date-input-wrapper .calendar-icon {
                right: 0.6rem;
                font-size: 0.9rem;
            }
        }

        /* Enhanced focus states for better accessibility */
        .date-input-wrapper input[type="date"]:focus + .calendar-icon {
            color: #6366f1;
        }

        /* Custom styling for invalid date inputs */
        .date-input-wrapper input[type="date"].is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
        }

        .date-input-wrapper input[type="date"].is-invalid + .calendar-icon {
            color: #dc3545;
        }

        /* Ensure proper stacking context for calendar popups */
        .filter-section {
            position: relative;
            z-index: 100;
        }

        /* Override any conflicting Bootstrap styles */
        .date-range-section .form-control,
        .custom-days-section .form-control {
            position: relative;
            z-index: auto;
        }

        /* Additional calendar popup fixes for different browsers */
        input[type="date"] {
            position: relative;
            background-clip: padding-box;
        }

        /* Ensure calendar doesn't get clipped by parent containers */
        .date-range-section,
        .custom-days-section {
            overflow: visible;
        }

        .row {
            overflow: visible;
        }

        /* Custom number input styling for consistency */
        input[type="number"] {
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.9rem;
            background-color: white;
            transition: all 0.3s ease;
        }

        input[type="number"]:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        /* Custom Calendar Popup Styling */
        .custom-calendar {
            position: fixed;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            z-index: 10000;
            padding: 1rem;
            display: none;
            min-width: 280px;
            max-width: 320px;
            font-family: 'Inter', sans-serif;
        }

        .custom-calendar.show {
            display: block;
            animation: calendarFadeIn 0.2s ease-out;
        }

        @keyframes calendarFadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #f3f4f6;
        }

        .calendar-nav-btn {
            background: none;
            border: none;
            color: #6b7280;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 6px;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 2rem;
            height: 2rem;
        }

        .calendar-nav-btn:hover {
            background: #f3f4f6;
            color: #6366f1;
        }

        .calendar-nav-btn:active {
            transform: scale(0.95);
        }

        .calendar-month-year {
            font-weight: 600;
            color: #374151;
            font-size: 1rem;
            cursor: pointer;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            transition: background 0.2s ease;
        }

        .calendar-month-year:hover {
            background: #f3f4f6;
        }

        .calendar-weekdays {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 0.25rem;
            margin-bottom: 0.5rem;
        }

        .calendar-weekday {
            text-align: center;
            font-size: 0.75rem;
            font-weight: 600;
            color: #6b7280;
            padding: 0.5rem 0;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .calendar-days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 0.25rem;
        }

        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            cursor: pointer;
            border-radius: 6px;
            transition: all 0.2s ease;
            position: relative;
            background: transparent;
            border: none;
            color: #374151;
            font-weight: 500;
        }

        .calendar-day:hover {
            background: #f3f4f6;
            color: #6366f1;
        }

        .calendar-day.other-month {
            color: #d1d5db;
        }

        .calendar-day.other-month:hover {
            background: #f9fafb;
            color: #9ca3af;
        }

        .calendar-day.selected {
            background: #6366f1;
            color: white;
            font-weight: 600;
        }

        .calendar-day.selected:hover {
            background: #5856eb;
        }

        .calendar-day.today {
            background: #eff6ff;
            color: #2563eb;
            font-weight: 600;
        }

        .calendar-day.today:hover {
            background: #dbeafe;
        }

        .calendar-day.today.selected {
            background: #6366f1;
            color: white;
        }

        .calendar-day.disabled {
            color: #d1d5db;
            cursor: not-allowed;
            background: #f9fafb;
        }

        .calendar-day.disabled:hover {
            background: #f9fafb;
            color: #d1d5db;
        }

        .calendar-footer {
            margin-top: 1rem;
            padding-top: 0.75rem;
            border-top: 1px solid #f3f4f6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .calendar-today-btn {
            background: none;
            border: 1px solid #d1d5db;
            color: #6b7280;
            font-size: 0.75rem;
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
        }

        .calendar-today-btn:hover {
            border-color: #6366f1;
            color: #6366f1;
            background: #f8faff;
        }

        .calendar-clear-btn {
            background: none;
            border: none;
            color: #dc2626;
            font-size: 0.75rem;
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
        }

        .calendar-clear-btn:hover {
            background: #fef2f2;
            color: #b91c1c;
        }

        /* Month/Year Picker Styles */
        .calendar-picker {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: white;
            border-radius: 12px;
            padding: 1rem;
            display: none;
        }

        .calendar-picker.show {
            display: block;
        }

        .calendar-picker-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #f3f4f6;
        }

        .calendar-picker-title {
            font-weight: 600;
            color: #374151;
            font-size: 1rem;
        }

        .calendar-picker-close {
            background: none;
            border: none;
            color: #6b7280;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .calendar-picker-close:hover {
            background: #f3f4f6;
            color: #374151;
        }

        .calendar-picker-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
            max-height: 200px;
            overflow-y: auto;
        }

        .calendar-picker-item {
            padding: 0.75rem;
            text-align: center;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
            background: white;
            font-size: 0.875rem;
            font-weight: 500;
            color: #374151;
        }

        .calendar-picker-item:hover {
            border-color: #6366f1;
            background: #f8faff;
            color: #6366f1;
        }

        .calendar-picker-item.selected {
            background: #6366f1;
            color: white;
            border-color: #6366f1;
        }

        .calendar-picker-item.disabled {
            color: #d1d5db;
            cursor: not-allowed;
            background: #f9fafb;
        }

        .calendar-picker-item.disabled:hover {
            border-color: #e5e7eb;
            background: #f9fafb;
            color: #d1d5db;
        }

        /* Responsive Calendar Styles */
        @media (max-width: 768px) {
            .custom-calendar {
                min-width: 260px;
                padding: 0.75rem;
            }

            .calendar-day {
                font-size: 0.8rem;
            }

            .calendar-weekday {
                font-size: 0.7rem;
                padding: 0.375rem 0;
            }

            .calendar-month-year {
                font-size: 0.9rem;
                padding: 0.375rem 0.75rem;
            }

            .calendar-nav-btn {
                width: 1.75rem;
                height: 1.75rem;
                font-size: 1rem;
            }
        }

        /* Calendar overlay for mobile */
        .calendar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.1);
            z-index: 9998;
            display: none;
        }

        .calendar-overlay.show {
            display: block;
        }

        /* Enhanced date input styling for custom calendar */
        .date-input-wrapper.has-custom-calendar input[type="date"] {
            cursor: pointer;
        }

        .date-input-wrapper.has-custom-calendar input[type="date"]::-webkit-calendar-picker-indicator {
            display: none;
        }

        .date-input-wrapper.has-custom-calendar .calendar-icon {
            pointer-events: auto;
            cursor: pointer;
        }

        /* Calendar positioning adjustments */
        .date-input-container {
            position: relative;
        }

        .date-input-container.calendar-open .custom-calendar {
            display: block;
        }

        /* Smooth transitions for calendar interactions */
        .calendar-day,
        .calendar-nav-btn,
        .calendar-picker-item {
            transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* Focus styles for accessibility */
        .calendar-day:focus,
        .calendar-nav-btn:focus,
        .calendar-picker-item:focus {
            outline: 2px solid #6366f1;
            outline-offset: 2px;
        }

        /* Calendar loading state */
        .custom-calendar.loading {
            opacity: 0.7;
            pointer-events: none;
        }

        .custom-calendar.loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid #f3f4f6;
            border-top: 2px solid #6366f1;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/header') %>
    
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <h2 class="mb-4">
                    <i class="fas fa-chart-line text-primary"></i> Sales Report Dashboard
                </h2>
            </div>
        </div>
        
        <!-- Filter Section -->
        <div class="filter-section">
            <h5 class="mb-3">
                <i class="fas fa-filter"></i> Report Filters
            </h5>
            
            <!-- Quick Filter Buttons -->
            <div class="mb-3">
                <label class="form-label">Quick Filters:</label>
                <div>
                    <button class="quick-filter-btn" data-type="daily">Today</button>
                    <button class="quick-filter-btn" data-type="weekly">Last 7 Days</button>
                    <button class="quick-filter-btn" data-type="monthly">Last 30 Days</button>
                    <button class="quick-filter-btn" data-type="yearly">Last Year</button>
                    <button class="quick-filter-btn" data-type="custom">Custom Range</button>
                    <button class="quick-filter-btn" data-type="customDays">Custom Days</button>
                </div>
            </div>
            
            <!-- Custom Date Range -->
            <div class="date-range-section">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Start Date:</label>
                        <div class="date-input-container">
                            <div class="date-input-wrapper has-custom-calendar">
                                <input type="text" class="form-control" id="startDate" placeholder="Select start date" readonly>
                                <i class="fas fa-calendar-alt calendar-icon"></i>
                            </div>
                            <div class="custom-calendar" id="startDateCalendar">
                                <div class="calendar-header">
                                    <button type="button" class="calendar-nav-btn" id="startPrevMonth">
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                    <div class="calendar-month-year" id="startMonthYear"></div>
                                    <button type="button" class="calendar-nav-btn" id="startNextMonth">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                                <div class="calendar-weekdays">
                                    <div class="calendar-weekday">Sun</div>
                                    <div class="calendar-weekday">Mon</div>
                                    <div class="calendar-weekday">Tue</div>
                                    <div class="calendar-weekday">Wed</div>
                                    <div class="calendar-weekday">Thu</div>
                                    <div class="calendar-weekday">Fri</div>
                                    <div class="calendar-weekday">Sat</div>
                                </div>
                                <div class="calendar-days" id="startCalendarDays"></div>
                                <div class="calendar-footer">
                                    <button type="button" class="calendar-today-btn" id="startTodayBtn">Today</button>
                                    <button type="button" class="calendar-clear-btn" id="startClearBtn">Clear</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">End Date:</label>
                        <div class="date-input-container">
                            <div class="date-input-wrapper has-custom-calendar">
                                <input type="text" class="form-control" id="endDate" placeholder="Select end date" readonly>
                                <i class="fas fa-calendar-alt calendar-icon"></i>
                            </div>
                            <div class="custom-calendar" id="endDateCalendar">
                                <div class="calendar-header">
                                    <button type="button" class="calendar-nav-btn" id="endPrevMonth">
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                    <div class="calendar-month-year" id="endMonthYear"></div>
                                    <button type="button" class="calendar-nav-btn" id="endNextMonth">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                                <div class="calendar-weekdays">
                                    <div class="calendar-weekday">Sun</div>
                                    <div class="calendar-weekday">Mon</div>
                                    <div class="calendar-weekday">Tue</div>
                                    <div class="calendar-weekday">Wed</div>
                                    <div class="calendar-weekday">Thu</div>
                                    <div class="calendar-weekday">Fri</div>
                                    <div class="calendar-weekday">Sat</div>
                                </div>
                                <div class="calendar-days" id="endCalendarDays"></div>
                                <div class="calendar-footer">
                                    <button type="button" class="calendar-today-btn" id="endTodayBtn">Today</button>
                                    <button type="button" class="calendar-clear-btn" id="endClearBtn">Clear</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Custom Days -->
            <div class="custom-days-section">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Number of Days:</label>
                        <input type="number" class="form-control" id="customDays" min="1" max="365" placeholder="Enter days">
                    </div>
                </div>
            </div>
            
            <div class="mt-3">
                <button class="btn btn-report" onclick="generateReport()">
                    <i class="fas fa-chart-bar"></i> Generate Report
                </button>
                <button class="btn btn-secondary ms-2" onclick="clearFilters()">
                    <i class="fas fa-times"></i> Clear Filters
                </button>
            </div>
        </div>
        
        <!-- Loading Spinner -->
        <div class="loading-spinner" id="loadingSpinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Generating report...</p>
        </div>
        
        <!-- Report Section -->
        <div class="report-section" id="reportSection">
            <!-- Summary Statistics -->
            <div class="row mb-4" id="summaryStats">
                <!-- Stats cards will be populated here -->
            </div>
            
            <!-- Download Buttons -->
            <div class="mb-3">
                <h5>Download Report:</h5>
                <button class="btn btn-download" onclick="downloadReport('pdf')">
                    <i class="fas fa-file-pdf"></i> Download PDF
                </button>
                <button class="btn btn-download" onclick="downloadReport('excel')">
                    <i class="fas fa-file-excel"></i> Download Excel
                </button>
            </div>
            
            <!-- Charts Section -->
            <div class="row">
                <div class="col-md-8">
                    <div class="card-custom">
                        <div class="card-header bg-transparent">
                            <h5 class="mb-0">
                                <i class="fas fa-chart-line text-info"></i> Sales Trend
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container">
                                <canvas id="salesChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card-custom">
                        <div class="card-header bg-transparent">
                            <h5 class="mb-0">
                                <i class="fas fa-tags text-warning"></i> Coupon Usage
                            </h5>
                        </div>
                        <div class="card-body">
                            <div id="couponUsageList">
                                <!-- Coupon usage will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Recent Orders Table -->
            <div class="card-custom">
                <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list text-success"></i> Recent Orders
                    </h5>
                    <div class="d-flex align-items-center">
                        <label class="me-2">Show:</label>
                        <select class="form-select form-select-sm" id="limitSelect" style="width: auto;">
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                        <span class="ms-2">entries</span>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="ordersTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Products</th>
                                    <th>Quantity</th>
                                    <th>Amount</th>
                                    <th>Coupon</th>
                                    <th>Discount</th>
                                    <th>Net Amount</th>
                                    <th>Payment</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Orders will be populated here -->
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination Controls -->
                    <div class="d-flex justify-content-between align-items-center p-3" id="paginationContainer" style="display: none !important;">
                        <div class="pagination-info">
                            <span id="paginationInfo">Showing 0 to 0 of 0 orders</span>
                        </div>
                        <nav aria-label="Orders pagination">
                            <ul class="pagination pagination-sm mb-0" id="paginationControls">
                                <!-- Pagination buttons will be populated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    

    <script>
        let currentReportData = null;
        let salesChart = null;
        let currentPage = 1;
        let currentLimit = 10;

        // Quick filter button handlers
        document.querySelectorAll('.quick-filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                // Remove active class from all buttons
                document.querySelectorAll('.quick-filter-btn').forEach(b => b.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');

                const type = this.dataset.type;

                // Show/hide relevant sections
                document.querySelector('.date-range-section').style.display = type === 'custom' ? 'block' : 'none';
                document.querySelector('.custom-days-section').style.display = type === 'customDays' ? 'block' : 'none';
            });
        });

        // Limit select change handler
        document.getElementById('limitSelect').addEventListener('change', function() {
            currentLimit = parseInt(this.value);
            currentPage = 1; // Reset to first page
            if (currentReportData) {
                generateReport(currentPage, currentLimit);
            }
        });

        // Date validation function
        function validateDateRange(startDate, endDate) {
            const start = new Date(startDate);
            const end = new Date(endDate);
            const today = new Date();
            
            // Set today to end of day for comparison
            today.setHours(23, 59, 59, 999);
            
            // Check if dates are valid
            if (isNaN(start.getTime()) || isNaN(end.getTime())) {
                return {
                    isValid: false,
                    message: 'Please enter valid dates'
                };
            }
            
            // Check if start date is after end date
            if (start > end) {
                return {
                    isValid: false,
                    message: 'Start date cannot be later than end date'
                };
            }
            
            // Check if dates are in the future
            if (start > today || end > today) {
                return {
                    isValid: false,
                    message: 'Dates cannot be in the future'
                };
            }
            
            // Check if date range is too large (more than 2 years)
            const maxRangeMs = 2 * 365 * 24 * 60 * 60 * 1000; // 2 years in milliseconds
            if (end - start > maxRangeMs) {
                return {
                    isValid: false,
                    message: 'Date range cannot exceed 2 years'
                };
            }
            
            return {
                isValid: true,
                message: 'Valid date range'
            };
        }

        // Real-time date validation
        function addDateValidationListeners() {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            if (!startDateInput || !endDateInput) return;
            
            // Set max date to today for both inputs
            const today = new Date().toISOString().split('T')[0];
            startDateInput.setAttribute('max', today);
            endDateInput.setAttribute('max', today);
            
            function validateAndShowFeedback() {
                const startDate = startDateInput.value;
                const endDate = endDateInput.value;
                
                // Remove any existing error styling
                startDateInput.classList.remove('is-invalid');
                endDateInput.classList.remove('is-invalid');
                
                // Remove any existing error messages
                const existingErrors = document.querySelectorAll('.date-validation-error');
                existingErrors.forEach(error => error.remove());
                
                if (startDate && endDate) {
                    const validation = validateDateRange(startDate, endDate);
                    if (!validation.isValid) {
                        // Add error styling
                        if (new Date(startDate) > new Date(endDate)) {
                            startDateInput.classList.add('is-invalid');
                        }
                        endDateInput.classList.add('is-invalid');
                        
                        // Add error message
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'date-validation-error';
                        errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${validation.message}`;
                        endDateInput.parentNode.appendChild(errorDiv);
                    }
                }
            }
            
            startDateInput.addEventListener('change', validateAndShowFeedback);
            endDateInput.addEventListener('change', validateAndShowFeedback);
        }

        // Generate report function
        async function generateReport(page = 1, limit = null) {
            const activeBtn = document.querySelector('.quick-filter-btn.active');
            if (!activeBtn) {
                Swal.fire('Error', 'Please select a report type', 'error');
                return;
            }

            const reportType = activeBtn.dataset.type;
            let params = new URLSearchParams({ 
                reportType,
                page: page,
                limit: limit || currentLimit
            });

            // Add additional parameters based on report type
            if (reportType === 'custom') {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

                if (!startDate || !endDate) {
                    Swal.fire('Error', 'Please select both start and end dates', 'error');
                    return;
                }

                // Validate date range
                const validation = validateDateRange(startDate, endDate);
                if (!validation.isValid) {
                    Swal.fire('Error', validation.message, 'error');
                    return;
                }

                params.append('startDate', startDate);
                params.append('endDate', endDate);
            } else if (reportType === 'customDays') {
                const customDays = document.getElementById('customDays').value;

                if (!customDays || customDays < 1) {
                    Swal.fire('Error', 'Please enter a valid number of days', 'error');
                    return;
                }

                // Validate custom days range
                if (customDays > 730) { // 2 years
                    Swal.fire('Error', 'Number of days cannot exceed 730 (2 years)', 'error');
                    return;
                }

                params.append('customDays', customDays);
            }

            // Show loading spinner only for initial load
            if (page === 1) {
                document.getElementById('loadingSpinner').style.display = 'block';
                document.getElementById('reportSection').style.display = 'none';
            }

            try {
                const response = await fetch(`/admin/sales-report/data?${params}`);
                const data = await response.json();

                if (data.success) {
                    currentReportData = data.data;
                    currentPage = page;
                    displayReport(data.data);
                } else {
                    Swal.fire('Error', data.message || 'Failed to generate report', 'error');
                }
            } catch (error) {
                console.error('Error generating report:', error);
                Swal.fire('Error', 'Failed to generate report', 'error');
            } finally {
                if (page === 1) {
                    document.getElementById('loadingSpinner').style.display = 'none';
                }
            }
        }

        // Display report function
        function displayReport(data) {
            // Show report section
            document.getElementById('reportSection').style.display = 'block';

            // Update summary statistics (only on first page)
            if (currentPage === 1) {
                updateSummaryStats(data.summary);
                updateSalesChart(data.dailySales);
                updateCouponUsage(data.couponUsage);
            }

            // Update orders table and pagination
            updateOrdersTable(data.orders);
            updatePagination(data.pagination);
        }

        // Update summary statistics
        function updateSummaryStats(summary) {
            const statsContainer = document.getElementById('summaryStats');
            statsContainer.innerHTML = `
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">${summary.totalSalesCount}</div>
                        <div class="stats-label">Total Sales</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.totalOrderAmount.toFixed(0)}</div>
                        <div class="stats-label">Total Amount</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.totalDiscountAmount.toFixed(0)}</div>
                        <div class="stats-label">Total Discount</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.netRevenue.toFixed(0)}</div>
                        <div class="stats-label">Net Revenue</div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="stats-card">
                        <div class="stats-number">₹${summary.averageOrderValue.toFixed(0)}</div>
                        <div class="stats-label">Avg Order Value</div>
                    </div>
                </div>
            `;
        }

        // Update sales chart
        function updateSalesChart(dailySales) {
            const ctx = document.getElementById('salesChart').getContext('2d');

            if (salesChart) {
                salesChart.destroy();
            }

            const labels = dailySales.map(item => new Date(item.date).toLocaleDateString());
            const amounts = dailySales.map(item => item.amount);
            const counts = dailySales.map(item => item.count);

            salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Sales Amount (₹)',
                        data: amounts,
                        borderColor: '#6366f1',
                        backgroundColor: 'rgba(99, 102, 241, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y'
                    }, {
                        label: 'Order Count',
                        data: counts,
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Sales Amount (₹)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Order Count'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    }
                }
            });
        }

        // Update coupon usage
        function updateCouponUsage(couponUsage) {
            const container = document.getElementById('couponUsageList');

            if (couponUsage.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">No coupons used in this period</p>';
                return;
            }

            container.innerHTML = couponUsage.map(coupon => `
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                    <div>
                        <strong>${coupon.couponName}</strong>
                        <br>
                        <small class="text-muted">${coupon.count} uses</small>
                    </div>
                    <div class="text-end">
                        <span class="text-success">₹${coupon.totalDiscount.toFixed(0)}</span>
                    </div>
                </div>
            `).join('');
        }

        // Update orders table with new columns
        function updateOrdersTable(orders) {
            const tbody = document.querySelector('#ordersTable tbody');

            if (orders.length === 0) {
                tbody.innerHTML = '<tr><td colspan="10" class="text-center text-muted">No orders found</td></tr>';
                return;
            }

            tbody.innerHTML = orders.map(order => `
                <tr>
                    <td>#${order.orderId || order._id.slice(-6)}</td>
                    <td>${order.userId?.name || 'N/A'}</td>
                    <td title="${order.productNames || 'N/A'}">${(order.productNames || 'N/A').substring(0, 30)}${(order.productNames || '').length > 30 ? '...' : ''}</td>
                    <td>${order.totalQuantity || 0}</td>
                    <td>₹${(order.totalPrice || 0).toFixed(0)}</td>
                    <td>${order.couponCode || 'None'}</td>
                    <td>₹${(order.couponDiscount || 0).toFixed(0)}</td>
                    <td>₹${((order.totalPrice || 0) - (order.couponDiscount || 0)).toFixed(0)}</td>
                    <td>${order.paymentMethod || 'N/A'}</td>
                    <td>${new Date(order.createdOn).toLocaleDateString()}</td>
                </tr>
            `).join('');
        }

        // Update pagination
        function updatePagination(pagination) {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationInfo = document.getElementById('paginationInfo');
            const paginationControls = document.getElementById('paginationControls');

            if (!pagination || pagination.totalPages <= 1) {
                paginationContainer.style.display = 'none';
                return;
            }

            // Show pagination container
            paginationContainer.style.display = 'flex';

            // Update pagination info
            const startItem = ((pagination.currentPage - 1) * pagination.limit) + 1;
            const endItem = Math.min(pagination.currentPage * pagination.limit, pagination.totalOrders);
            paginationInfo.textContent = `Showing ${startItem} to ${endItem} of ${pagination.totalOrders} orders`;

            // Update pagination controls
            let paginationHTML = '';

            // Previous button
            if (pagination.hasPrevPage) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(${pagination.currentPage - 1}, ${pagination.limit}); return false;">
                        <i class="fas fa-chevron-left"></i> Previous
                    </a>
                </li>`;
            }

            // Page numbers
            const startPage = Math.max(1, pagination.currentPage - 2);
            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

            if (startPage > 1) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(1, ${pagination.limit}); return false;">1</a>
                </li>`;
                if (startPage > 2) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `<li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="generateReport(${i}, ${pagination.limit}); return false;">${i}</a>
                </li>`;
            }

            if (endPage < pagination.totalPages) {
                if (endPage < pagination.totalPages - 1) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(${pagination.totalPages}, ${pagination.limit}); return false;">${pagination.totalPages}</a>
                </li>`;
            }

            // Next button
            if (pagination.hasNextPage) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="#" onclick="generateReport(${pagination.currentPage + 1}, ${pagination.limit}); return false;">
                        Next <i class="fas fa-chevron-right"></i>
                    </a>
                </li>`;
            }

            paginationControls.innerHTML = paginationHTML;
        }

        // Download report function
        function downloadReport(format) {
            if (!currentReportData) {
                Swal.fire('Error', 'Please generate a report first', 'error');
                return;
            }

            const activeBtn = document.querySelector('.quick-filter-btn.active');
            const reportType = activeBtn.dataset.type;
            let params = new URLSearchParams({ reportType });

            // Add additional parameters based on report type
            if (reportType === 'custom') {
                params.append('startDate', document.getElementById('startDate').value);
                params.append('endDate', document.getElementById('endDate').value);
            } else if (reportType === 'customDays') {
                params.append('customDays', document.getElementById('customDays').value);
            }

            const url = `/admin/sales-report/download/${format}?${params}`;
            window.open(url, '_blank');
        }

        // Clear filters function
        function clearFilters() {
            document.querySelectorAll('.quick-filter-btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            document.getElementById('customDays').value = '';
            document.getElementById('limitSelect').value = '10';
            document.querySelector('.date-range-section').style.display = 'none';
            document.querySelector('.custom-days-section').style.display = 'none';
            document.getElementById('reportSection').style.display = 'none';
            document.getElementById('paginationContainer').style.display = 'none';
            currentReportData = null;
            currentPage = 1;
            currentLimit = 10;
        }

        // Custom Calendar Implementation
        class CustomCalendar {
            constructor(inputId, calendarId, options = {}) {
                this.inputId = inputId;
                this.calendarId = calendarId;
                this.input = document.getElementById(inputId);
                this.calendar = document.getElementById(calendarId);
                this.currentDate = new Date();
                this.selectedDate = null;
                this.maxDate = options.maxDate || new Date();
                this.minDate = options.minDate || null;
                this.onDateSelect = options.onDateSelect || null;
                
                this.monthNames = [
                    'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ];
                
                this.init();
            }
            
            init() {
                this.setupEventListeners();
                this.render();
            }
            
            setupEventListeners() {
                // Input click to show calendar
                this.input.addEventListener('click', () => this.show());
                
                // Calendar icon click
                const icon = this.input.parentElement.querySelector('.calendar-icon');
                if (icon) {
                    icon.addEventListener('click', () => this.show());
                }
                
                // Navigation buttons
                const prevBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '')}PrevMonth`);
                const nextBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '')}NextMonth`);
                
                if (prevBtn) prevBtn.addEventListener('click', () => this.previousMonth());
                if (nextBtn) nextBtn.addEventListener('click', () => this.nextMonth());
                
                // Today and Clear buttons
                const todayBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '')}TodayBtn`);
                const clearBtn = this.calendar.querySelector(`#${this.inputId.replace('Date', '')}ClearBtn`);
                
                if (todayBtn) todayBtn.addEventListener('click', () => this.selectToday());
                if (clearBtn) clearBtn.addEventListener('click', () => this.clear());
                
                // Click outside to close
                document.addEventListener('click', (e) => {
                    if (!this.input.contains(e.target) && !this.calendar.contains(e.target) && 
                        !this.input.parentElement.contains(e.target)) {
                        this.hide();
                    }
                });
                
                // Escape key to close
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && this.calendar.classList.contains('show')) {
                        this.hide();
                    }
                });
            }
            
            show() {
                // Hide other calendars
                document.querySelectorAll('.custom-calendar').forEach(cal => {
                    if (cal !== this.calendar) {
                        cal.classList.remove('show');
                    }
                });
                
                // Calculate position relative to input
                const inputRect = this.input.getBoundingClientRect();
                const viewportHeight = window.innerHeight;
                const viewportWidth = window.innerWidth;
                const calendarHeight = 380; // Approximate calendar height
                const calendarWidth = 280; // Minimum calendar width
                
                let top = inputRect.bottom + window.scrollY + 4;
                let left = inputRect.left + window.scrollX;
                
                // Check if calendar would go below viewport
                if (inputRect.bottom + calendarHeight > viewportHeight) {
                    // Position above the input instead
                    top = inputRect.top + window.scrollY - calendarHeight - 4;
                }
                
                // Check if calendar would go beyond right edge
                if (left + calendarWidth > viewportWidth) {
                    left = viewportWidth - calendarWidth - 20;
                }
                
                // Ensure calendar doesn't go beyond left edge
                if (left < 10) {
                    left = 10;
                }
                
                // Apply positioning
                this.calendar.style.top = `${top}px`;
                this.calendar.style.left = `${left}px`;
                
                this.calendar.classList.add('show');
                this.render();
            }
            
            hide() {
                this.calendar.classList.remove('show');
            }
            
            previousMonth() {
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                this.render();
            }
            
            nextMonth() {
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                this.render();
            }
            
            selectToday() {
                const today = new Date();
                if (this.isDateDisabled(today)) return;
                
                this.selectDate(today);
            }
            
            clear() {
                this.selectedDate = null;
                this.input.value = '';
                this.hide();
                if (this.onDateSelect) this.onDateSelect(null);
            }
            
            selectDate(date) {
                if (this.isDateDisabled(date)) return;
                
                this.selectedDate = new Date(date);
                this.input.value = this.formatDate(date);
                this.hide();
                
                if (this.onDateSelect) this.onDateSelect(date);
            }
            
            formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }
            
            parseDate(dateString) {
                if (!dateString) return null;
                const parts = dateString.split('-');
                if (parts.length !== 3) return null;
                return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
            }
            
            isDateDisabled(date) {
                if (this.maxDate && date > this.maxDate) return true;
                if (this.minDate && date < this.minDate) return true;
                return false;
            }
            
            isSameDay(date1, date2) {
                if (!date1 || !date2) return false;
                return date1.getFullYear() === date2.getFullYear() &&
                       date1.getMonth() === date2.getMonth() &&
                       date1.getDate() === date2.getDate();
            }
            
            isToday(date) {
                const today = new Date();
                return this.isSameDay(date, today);
            }
            
            render() {
                this.renderHeader();
                this.renderDays();
            }
            
            renderHeader() {
                const monthYearElement = this.calendar.querySelector(`#${this.inputId.replace('Date', '')}MonthYear`);
                if (monthYearElement) {
                    monthYearElement.textContent = `${this.monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}`;
                }
            }
            
            renderDays() {
                const daysContainer = this.calendar.querySelector(`#${this.inputId.replace('Date', '')}CalendarDays`);
                if (!daysContainer) return;
                
                daysContainer.innerHTML = '';
                
                const year = this.currentDate.getFullYear();
                const month = this.currentDate.getMonth();
                
                // First day of the month
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                
                // Start from Sunday of the week containing the first day
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - startDate.getDay());
                
                // Generate 42 days (6 weeks)
                for (let i = 0; i < 42; i++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    
                    const dayElement = document.createElement('button');
                    dayElement.type = 'button';
                    dayElement.className = 'calendar-day';
                    dayElement.textContent = date.getDate();
                    
                    // Add classes based on date properties
                    if (date.getMonth() !== month) {
                        dayElement.classList.add('other-month');
                    }
                    
                    if (this.isToday(date)) {
                        dayElement.classList.add('today');
                    }
                    
                    if (this.selectedDate && this.isSameDay(date, this.selectedDate)) {
                        dayElement.classList.add('selected');
                    }
                    
                    if (this.isDateDisabled(date)) {
                        dayElement.classList.add('disabled');
                        dayElement.disabled = true;
                    } else {
                        dayElement.addEventListener('click', () => this.selectDate(date));
                    }
                    
                    daysContainer.appendChild(dayElement);
                }
            }
            
            setValue(dateString) {
                if (dateString) {
                    const date = this.parseDate(dateString);
                    if (date && !this.isDateDisabled(date)) {
                        this.selectedDate = date;
                        this.currentDate = new Date(date);
                        this.input.value = dateString;
                        this.render();
                    }
                } else {
                    this.clear();
                }
            }
            
            getValue() {
                return this.input.value;
            }
        }

        // Initialize calendars
        let startCalendar, endCalendar;

        // Updated date validation function for custom calendars
        function validateDateRange(startDate, endDate) {
            if (!startDate || !endDate) {
                return {
                    isValid: true,
                    message: 'Valid date range'
                };
            }

            const start = new Date(startDate);
            const end = new Date(endDate);
            const today = new Date();
            
            // Set today to end of day for comparison
            today.setHours(23, 59, 59, 999);
            
            // Check if dates are valid
            if (isNaN(start.getTime()) || isNaN(end.getTime())) {
                return {
                    isValid: false,
                    message: 'Please enter valid dates'
                };
            }
            
            // Check if start date is after end date
            if (start > end) {
                return {
                    isValid: false,
                    message: 'Start date cannot be later than end date'
                };
            }
            
            // Check if dates are in the future
            if (start > today || end > today) {
                return {
                    isValid: false,
                    message: 'Dates cannot be in the future'
                };
            }
            
            // Check if date range is too large (more than 2 years)
            const maxRangeMs = 2 * 365 * 24 * 60 * 60 * 1000; // 2 years in milliseconds
            if (end - start > maxRangeMs) {
                return {
                    isValid: false,
                    message: 'Date range cannot exceed 2 years'
                };
            }
            
            return {
                isValid: true,
                message: 'Valid date range'
            };
        }

        // Updated validation listeners for custom calendars
        function addDateValidationListeners() {
            function validateAndShowFeedback() {
                const startDate = startCalendar.getValue();
                const endDate = endCalendar.getValue();
                
                // Remove any existing error styling
                startCalendar.input.classList.remove('is-invalid');
                endCalendar.input.classList.remove('is-invalid');
                
                // Remove any existing error messages
                const existingErrors = document.querySelectorAll('.date-validation-error');
                existingErrors.forEach(error => error.remove());
                
                if (startDate && endDate) {
                    const validation = validateDateRange(startDate, endDate);
                    if (!validation.isValid) {
                        // Add error styling
                        if (new Date(startDate) > new Date(endDate)) {
                            startCalendar.input.classList.add('is-invalid');
                        }
                        endCalendar.input.classList.add('is-invalid');
                        
                        // Add error message
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'date-validation-error';
                        errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${validation.message}`;
                        endCalendar.input.parentNode.appendChild(errorDiv);
                    }
                }
            }
            
            // Set up validation on date selection
            if (startCalendar) {
                startCalendar.onDateSelect = validateAndShowFeedback;
            }
            if (endCalendar) {
                endCalendar.onDateSelect = validateAndShowFeedback;
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize custom calendars
            const today = new Date();
            const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            startCalendar = new CustomCalendar('startDate', 'startDateCalendar', {
                maxDate: today,
                onDateSelect: function(date) {
                    // Update end calendar min date when start date is selected
                    if (date && endCalendar) {
                        endCalendar.minDate = date;
                        endCalendar.render();
                    }
                }
            });
            
            endCalendar = new CustomCalendar('endDate', 'endDateCalendar', {
                maxDate: today,
                onDateSelect: function(date) {
                    // Update start calendar max date when end date is selected
                    if (date && startCalendar) {
                        const maxStartDate = new Date(Math.min(date.getTime(), today.getTime()));
                        startCalendar.maxDate = maxStartDate;
                        startCalendar.render();
                    }
                }
            });
            
            // Set default values
            startCalendar.setValue(lastWeek.toISOString().split('T')[0]);
            endCalendar.setValue(today.toISOString().split('T')[0]);
            
            // Add validation listeners
            addDateValidationListeners();
        });
    </script>
</body>
</html>