<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - 1NOTONE</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        // Test SweetAlert loading
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, checking SweetAlert...');
            if (typeof Swal !== 'undefined') {
                console.log('✅ SweetAlert2 loaded successfully');
            } else {
                console.error('❌ SweetAlert2 failed to load');
            }
        });

        // Test function for debugging
        function testSweetAlert() {
            if (typeof Swal !== 'undefined') {
                Swal.fire('Test', 'SweetAlert is working!', 'success');
            } else {
                alert('SweetAlert not loaded');
            }
        }
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        .container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        .order-header {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .header-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .order-title {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 2rem;
            font-weight: bold;
        }

        .back-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: background 0.3s ease;
        }

        .back-btn:hover {
            background: #5a6268;
            color: white;
            text-decoration: none;
        }

        .order-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
        }

        .info-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }

        .info-label {
            font-size: 0.8rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.5rem;
        }

        .info-value {
            font-weight: 600;
            color: #2c3e50;
            font-size: 1.1rem;
        }

        .order-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-pending { background: #fff3cd; color: #856404; }
        .status-processing { background: #cce5ff; color: #004085; }
        .status-shipped { background: #d4edda; color: #155724; }
        .status-delivered { background: #d1ecf1; color: #0c5460; }
        .status-cancelled { background: #f8d7da; color: #721c24; }

        .order-items {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #2c3e50;
        }

        .item {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            padding: 1.5rem 0;
            border-bottom: 1px solid #e9ecef;
        }

        .item:last-child {
            border-bottom: none;
        }

        .item-image {
            width: 80px;
            height: 80px;
            border-radius: 8px;
            object-fit: cover;
            background: #f8f9fa;
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            color: #2c3e50;
        }

        .item-specs {
            color: #6c757d;
            margin-bottom: 0.5rem;
        }

        .item-price {
            font-weight: 600;
            color: #667eea;
            font-size: 1.1rem;
        }

        .order-summary {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #e9ecef;
        }

        .summary-row:last-child {
            border-bottom: none;
            font-weight: 600;
            font-size: 1.1rem;
            color: #2c3e50;
        }

        .summary-label {
            color: #6c757d;
        }

        .summary-value {
            font-weight: 500;
        }

        .order-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 2rem;
        }

        .item-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .btn-item-action {
            padding: 0.4rem 0.8rem;
            border: none;
            border-radius: 6px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.3rem;
            font-weight: 500;
        }

        .btn-cancel-item {
            background: #dc3545;
            color: white;
        }

        .btn-cancel-item:hover {
            background: #c82333;
            transform: translateY(-1px);
        }

        .btn-return-item {
            background:  #FF8C00;
            color: #212529;
        }

        .btn-return-item:hover {
            background:  #eb8305;
            transform: translateY(-1px);
        }

        .item-status {
            font-weight: 600;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            margin-left: 0.5rem;
        }

        .item-status.pending {
            background: #fff3cd;
            color: #856404;
        }

        .item-status.processing {
            background: #d1ecf1;
            color: #0c5460;
        }

        .item-status.shipped {
            background: #d4edda;
            color: #155724;
        }

        .item-status.delivered {
            background: #d4edda;
            color: #155724;
        }

        .item-status.cancelled {
            background: #f8d7da;
            color: #721c24;
        }

        .item-status.return-request {
            background: #fff3cd;
            color: #856404;
        }

        .item-status.returned {
            background: #d1ecf1;
            color: #0c5460;
        }

        .item-reason {
            color: #6c757d;
            font-style: italic;
            font-size: 0.8rem;
            margin-top: 0.3rem;
        }

        .approval-status {
            font-size: 0.8rem;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            margin-left: 0.5rem;
        }

        .approval-pending {
            background: #fff3cd;
            color: #856404;
        }

        .approval-approved {
            background: #d4edda;
            color: #155724;
        }

        .approval-rejected {
            background: #f8d7da;
            color: #721c24;
        }

        .bulk-actions {
            display: flex;
            justify-content: center;
            margin: 2rem 0;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }

        .btn-cancel-all {
            background: #dc3545;
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
        }

        .btn-cancel-all:hover {
            background: #c82333;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-warning {
            background:  #FF8C00;
            color: #212529;
        }

        .btn-warning:hover {
            background:  #FF8C00;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Toast Notification Styles */
        .toast-notification {
            position: fixed;
            top: 650px;
            right: 20px;
            background: #006400;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            font-weight: 500;
            min-width: 300px;
        }

        .toast-notification.toast-error {
            background: #DC143C;
        }

        .toast-notification.show {
            transform: translateX(0);
        }

        .toast-content {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 1rem;
            }
            
            .header-top {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .order-info-grid {
                grid-template-columns: 1fr;
            }
            
            .item {
                flex-direction: column;
                text-align: center;
            }
            
            .order-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <%- include("../partials/user/header") %>

    <!-- Breadcrumb Navigation -->
    <%- include("../partials/user/breadcrumb", {
        breadcrumbs: [
            { name: "My Account", url: "/profile" },
            { name: "My Orders", url: "/orders" },
            { name: "Order Details", url: "#" }
        ]
    }) %>

    <div class="container">
        <!-- Order Header -->
        <div class="order-header">
            <div class="header-top">
                <h1 class="order-title">
                    <i class="fas fa-receipt"></i>
                    Order Details
                </h1>
                <a href="/orders" class="back-btn">
                    <i class="fas fa-arrow-left"></i>
                    Back to Orders
                </a>
            </div>

            <div class="order-info-grid">
                <div class="info-card">
                    <div class="info-label">Order ID</div>
                    <div class="info-value">#<%= order.orderId %></div>
                </div>
                <div class="info-card">
                    <div class="info-label">Order Date</div>
                    <div class="info-value"><%= new Date(order.createdOn).toLocaleDateString() %></div>
                </div>
                <div class="info-card">
                    <div class="info-label">Status</div>
                    <div class="order-status status-<%= order.status.toLowerCase() %>">
                        <%= order.status %>
                    </div>
                    <% if (order.status === 'Delivered' && order.returnRejectionReason) { %>
                        <div style="margin-top: 10px; padding: 10px; background: #fff3cd; border-left: 4px solid  #FF8C00; border-radius: 4px;">
                            <div style="font-weight: 600; color: #856404; margin-bottom: 5px;">
                                <i class="fas fa-info-circle"></i> Return Request Rejected
                            </div>
                            <div style="color: #856404; font-size: 0.9rem;">
                                <strong>Reason:</strong> <%= order.returnRejectionReason %>
                            </div>
                            <% if (order.returnRejectedAt) { %>
                                <div style="color: #856404; font-size: 0.8rem; margin-top: 5px;">
                                    Rejected on: <%= new Date(order.returnRejectedAt).toLocaleDateString('en-IN', {
                                        day: 'numeric',
                                        month: 'short',
                                        year: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit',
                                        hour12: true
                                    }) %>
                                </div>
                            <% } %>
                        </div>
                    <% } %>
                </div>
                <div class="info-card">
                    <div class="info-label">Total Amount</div>
                    <div class="info-value">₹<%= Math.round((order.displayFinalAmount !== undefined ? order.displayFinalAmount : order.finalAmount)).toLocaleString() %></div>
                </div>
            </div>
        </div>

        <!-- Order Items -->
        <div class="order-items">
            <h2 class="section-title">
                <i class="fas fa-box"></i>
                Order Items
            </h2>
            
            <% order.orderedItems.forEach(item => { %>
                <div class="item">
                    <img src="/uploads/product-images/<%= item.product.productImage[0] %>"
                         alt="<%= item.product.productName %>"
                         class="item-image"
                         onerror="this.src='/uploads/placeholder.jpg'">
                    <div class="item-details">
                        <div class="item-name"><%= item.product.productName %></div>
                        <div class="item-specs">
                            Quantity: <%= item.quantity %> |
                            Size: <%= item.size || 'N/A' %>
                            <% let displayStatus = item.status;
                               if (item.status === 'Cancelled') {
                                   displayStatus = 'Cancelled';
                               } else if (
                                   (!item.status || item.status === 'Pending' || item.status === 'Processing') &&
                                   order.status === 'Delivered'
                               ) {
                                   displayStatus = 'Delivered';
                               }
                            %>
                            <% if (displayStatus) { %>
                                <span class="item-status <%= displayStatus.toLowerCase().replace(' ', '-') %> <%= displayStatus === 'Delivered' ? 'delivered' : '' %>">
                                    <%= displayStatus %>
                                </span>
                            <% } %>
                            <% if (item.adminApprovalStatus && item.adminApprovalStatus !== 'Pending') { %>
                                <span class="approval-status approval-<%= item.adminApprovalStatus.toLowerCase() %>">
                                    <%= item.adminApprovalStatus %>
                                </span>
                            <% } %>
                        </div>
                        <% if (item.cancellationReason) { %>
                            <div class="item-reason">
                                <strong>Cancellation Reason:</strong> <%= item.cancellationReason %>
                            </div>
                        <% } %>
                        <% if (item.returnReason) { %>
                            <div class="item-reason">
                                <strong>Return Reason:</strong> <%= item.returnReason %>
                            </div>
                        <% } %>
                        <% if (item.adminRejectionReason) { %>
                            <div class="item-reason" style="color: #dc3545;">
                                <strong>Rejection Reason:</strong> <%= item.adminRejectionReason %>
                            </div>
                        <% } %>

                        <!-- Individual Item Actions -->
                        <div class="item-actions">
                            <% if (
                                (!item.status || item.status === 'Pending' || item.status === 'Processing' || item.status === 'Delivered') &&
                                (!item.adminApprovalStatus || item.adminApprovalStatus === 'Pending')
                            ) {
                                if (order.status === 'Delivered') { %>
                                    <button onclick="returnItem('<%= order._id %>', '<%= item._id %>', '<%= item.product.productName %>')"
                                            class="btn-item-action btn-return-item">
                                        <i class="fas fa-undo"></i>
                                        Return Item
                                    </button>
                                <% } else if ((order.status === 'Pending' || order.status === 'Processing') && !(order.paymentStatus === 'Failed' || (order.paymentMethod === 'ONLINE' && order.paymentStatus === 'Pending'))) { %>
                                    <button onclick="cancelItem('<%= order._id %>', '<%= item._id %>', '<%= item.product.productName %>')"
                                            class="btn-item-action btn-cancel-item">
                                        <i class="fas fa-times"></i>
                                        Cancel Item
                                    </button>
                                <% }
                            } %>
                        </div>
                    </div>
                    <div class="item-price">₹<%= Math.round(item.price).toLocaleString() %></div>
                </div>
            <% }) %>
        </div>

        <!-- Bulk Actions -->
        
        <script>
        function returnAllItems(orderId) {
            currentAction = 'returnAllItems';
            currentOrderId = orderId;
            currentItemId = null;
            currentProductName = null;
            openActionModal('return', 'Return All Items?', 'Are you sure you want to return <strong>all items</strong> in this order?');
        }
        </script>

        <!-- Order Summary -->
        <div class="order-summary">
            <h2 class="section-title">
                <i class="fas fa-calculator"></i>
                Order Summary
            </h2>
            
            <div class="summary-row">
                <span class="summary-label">Subtotal</span>
                <span class="summary-value">₹<%= Math.round((order.displaySubtotal !== undefined ? order.displaySubtotal : order.totalPrice)).toLocaleString() %></span>
            </div>
            <div class="summary-row">
                <span class="summary-label">Shipping</span>
                <span class="summary-value">Free</span>
            </div>
            <% 
                let displayCouponDiscount = order.displayCouponDiscount !== undefined ? order.displayCouponDiscount : order.couponDiscount;
            %>
            <% if (displayCouponDiscount && displayCouponDiscount > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Coupon Discount<% if (order.couponCode) { %> (<%= order.couponCode %>)<% } %></span>
                    <span class="summary-value" style="color: #28a745;">-₹<%= displayCouponDiscount.toLocaleString() %></span>
                </div>
            <% } else { %>
                <div class="summary-row">
                    <span class="summary-label">Discount</span>
                    <span class="summary-value">0</span>
                </div>
            <% } %>
            
            <div class="summary-row">
                <span class="summary-label">Total</span>
                <span class="summary-value">₹<%= Math.round((order.displayFinalAmount !== undefined ? order.displayFinalAmount : order.finalAmount)).toLocaleString() %></span>
            </div>
        </div>

        <!-- Order Actions -->
        <div class="order-actions">
            <% if (order.paymentStatus === 'Failed' || (order.paymentMethod === 'ONLINE' && order.paymentStatus === 'Pending')) { %>
                <a href="/checkout/retry-payment/<%= order.orderId %>" class="btn btn-danger">
                    <i class="fas fa-redo"></i>
                    Retry Payment
                </a>
            <% } %>
            <% if ((order.status === 'Pending' || order.status === 'Processing') && !(order.paymentStatus === 'Failed' || (order.paymentMethod === 'ONLINE' && order.paymentStatus === 'Pending'))) { %>
        <button onclick="cancelAllItems('<%= order._id %>')" class="btn btn-danger">
            <i class="fas fa-times"></i>
            Cancel All Items
        </button>
        
        
            <% } else if (order.status === 'Delivered') { %>
                <button onclick="returnOrder('<%= order._id %>')" class="btn btn-warning">
                    <i class="fas fa-undo"></i>
                    Return Order
                </button>
            <% } %>
        </div>
    </div>

    <script>
        // Toast notification function
        function showToast(message, type = 'success') {
            const existingToasts = document.querySelectorAll('.toast-notification');
            existingToasts.forEach(toast => toast.remove());

            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('show');
            }, 100);

            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Cancel order function
        async function cancelOrder(orderId) {
            console.log('Cancel order function called for:', orderId);

            try {
                // Check if SweetAlert is loaded
                if (typeof Swal === 'undefined') {
                    console.error('SweetAlert2 is not loaded');
                    if (confirm('Are you sure you want to cancel this order?')) {
                        // Fallback to regular processing
                        await processCancelOrder(orderId);
                    }
                    return;
                }

                console.log('SweetAlert2 is loaded, showing confirmation dialog');

                // Show SweetAlert confirmation dialog with reason input
                const result = await Swal.fire({
                    title: 'Cancel Order?',
                    html: `
                        <p>Are you sure you want to cancel this order? This action cannot be undone.</p>
                        <div style="margin-top: 15px;">
                            <label for="cancellation-reason" style="display: block; text-align: left; margin-bottom: 5px; font-weight: 500;">
                                Reason for cancellation (optional):
                            </label>
                            <textarea
                                id="cancellation-reason"
                                class="swal2-textarea"
                                placeholder="Please provide a reason for cancelling this order..."
                                style="width: 100%; min-height: 80px; resize: vertical; border: 1px solid #d1d5db; border-radius: 4px; padding: 8px;"
                            ></textarea>
                        </div>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'Keep Order',
                    focusConfirm: false,
                    preConfirm: () => {
                        const reason = document.getElementById('cancellation-reason').value.trim();
                        return { reason: reason };
                    }
                });

                console.log('SweetAlert result:', result);

                if (!result.isConfirmed) {
                    return;
                }

                const cancellationReason = result.value ? result.value.reason : '';
                await processCancelOrder(orderId, cancellationReason);
            } catch (error) {
                console.error('Error in cancelOrder:', error);
                showToast('An error occurred while showing the confirmation dialog', 'error');
            }
        }

        // Helper function to process cancel order
        async function processCancelOrder(orderId, cancellationReason = '') {
            try {
                const requestBody = { orderId };
                if (cancellationReason) {
                    requestBody.cancellationReason = cancellationReason;
                }

                const response = await fetch('/orders/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Order cancelled successfully', 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Failed to cancel order', 'error');
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                showToast('An error occurred while cancelling the order', 'error');
            }
        }

        // Return order function
        function returnOrder(orderId) {
            // Check for eligible items before opening the modal
            const items = document.querySelectorAll('.item');
            let eligibleCount = 0;
            items.forEach(item => {
                const statusSpan = item.querySelector('.item-status');
                if (statusSpan && statusSpan.classList.contains('delivered')) {
                    eligibleCount++;
                }
            });
            if (eligibleCount === 0) {
                showToast('No eligible items found to return.', 'error');
                return;
            }
            currentAction = 'returnAllItems';
            currentOrderId = orderId;
            currentItemId = null;
            currentProductName = null;
            openActionModal('return', 'Return All Items?', 'Are you sure you want to return <strong>all items</strong> in this order?');
        }

        // Helper function to process return order
        async function processReturnOrder(orderId, returnReason) {
            try {
                if (!returnReason || returnReason.trim() === '') {
                    showToast('Return reason is required', 'error');
                    return;
                }

                const response = await fetch('/orders/return', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        returnReason: returnReason.trim()
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Return request submitted successfully', 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Failed to submit return request', 'error');
                }
            } catch (error) {
                console.error('Error submitting return request:', error);
                showToast('An error occurred while submitting the return request', 'error');
            }
        }

        // Global variables for modal state
        let currentAction = null;
        let currentOrderId = null;
        let currentItemId = null;
        let currentProductName = null;

        // Cancel individual item function
        function cancelItem(orderId, itemId, productName) {
            console.log('Cancel item function called for:', { orderId, itemId, productName });

            currentAction = 'cancelItem';
            currentOrderId = orderId;
            currentItemId = itemId;
            currentProductName = productName;

            openActionModal('cancel', `Cancel "${productName}"?`, `Are you sure you want to cancel "<strong>${productName}</strong>"?`);
        }

        // Return individual item function
        function returnItem(orderId, itemId, productName) {
            console.log('Return item function called for:', { orderId, itemId, productName });

            currentAction = 'returnItem';
            currentOrderId = orderId;
            currentItemId = itemId;
            currentProductName = productName;

            openActionModal('return', `Return "${productName}"?`, `Are you sure you want to return "<strong>${productName}</strong>"?`);
        }

        // Cancel all items function
        function cancelAllItems(orderId) {
            console.log('Cancel all items function called for order:', orderId);

            currentAction = 'cancelAllItems';
            currentOrderId = orderId;
            currentItemId = null;
            currentProductName = null;

            openActionModal('cancel', 'Cancel All Items?', 'Are you sure you want to cancel <strong>all items</strong> in this order?');
        }

        // Open action modal
        function openActionModal(actionType, title, message) {
            const modal = document.getElementById('actionModal');
            const reasonSelect = document.getElementById('actionReason');
            const errorMessage = document.getElementById('reasonError');

            // Update modal content
            document.getElementById('modalTitle').textContent = title;
            document.getElementById('modalText').innerHTML = message;

            // Update reason label and options based on action type
            const reasonLabel = document.getElementById('reasonLabel');
            const keepButtonText = document.getElementById('keepButtonText');

            if (actionType === 'cancel') {
                reasonLabel.textContent = 'Reason for cancellation (required)';
                keepButtonText.textContent = currentItemId ? 'Keep Item' : 'Keep Items';

                // Cancel reasons
                reasonSelect.innerHTML = `
                    <option value="">-- Select a reason --</option>
                    <option value="Changed my mind">Changed my mind</option>
                    <option value="Found better price elsewhere">Found better price elsewhere</option>
                    <option value="Ordered by mistake">Ordered by mistake</option>
                    <option value="No longer needed">No longer needed</option>
                    <option value="Delivery taking too long">Delivery taking too long</option>
                    <option value="Want to modify order">Want to modify order</option>
                    <option value="Financial constraints">Financial constraints</option>
                    <option value="Product concerns">Product concerns</option>
                    <option value="Other">Other</option>
                `;
            } else if (actionType === 'return') {
                reasonLabel.textContent = 'Reason for return (required)';
                keepButtonText.textContent = 'Keep Item';

                // Return reasons
                reasonSelect.innerHTML = `
                    <option value="">-- Select a reason --</option>
                    <option value="Product defective">Product defective</option>
                    <option value="Wrong item received">Wrong item received</option>
                    <option value="Size doesn't fit">Size doesn't fit</option>
                    <option value="Quality not as expected">Quality not as expected</option>
                    <option value="Damaged during shipping">Damaged during shipping</option>
                    <option value="Not as described">Not as described</option>
                    <option value="Changed my mind">Changed my mind</option>
                    <option value="Found better alternative">Found better alternative</option>
                    <option value="Other">Other</option>
                `;
            }

            // Reset form
            reasonSelect.value = '';
            reasonSelect.classList.remove('error');
            errorMessage.style.display = 'none';

            modal.classList.add('show');
            document.body.style.overflow = 'hidden';

            // Focus on select after animation
            setTimeout(() => {
                reasonSelect.focus();
            }, 300);
        }

        // Close action modal
        function closeActionModal() {
            const modal = document.getElementById('actionModal');
            modal.classList.remove('show');
            document.body.style.overflow = 'auto';

            // Reset state
            currentAction = null;
            currentOrderId = null;
            currentItemId = null;
            currentProductName = null;
        }

        // Confirm action
        async function confirmAction() {
            const reasonSelect = document.getElementById('actionReason');
            const errorMessage = document.getElementById('reasonError');
            const confirmBtn = document.getElementById('confirmActionBtn');
            const otherReasonText = document.getElementById('otherReasonText');
            const otherReasonError = document.getElementById('otherReasonError');

            // Validate reason selection
            if (!reasonSelect.value) {
                reasonSelect.classList.add('error');
                errorMessage.style.display = 'block';
                reasonSelect.focus();
                return;
            }

            // If "Other" is selected, validate the text area
            let finalReason = reasonSelect.value;
            if (reasonSelect.value === 'Other') {
                const otherText = otherReasonText.value.trim();
                if (!otherText) {
                    otherReasonText.classList.add('error');
                    otherReasonError.style.display = 'block';
                    otherReasonText.focus();
                    return;
                } else {
                    // Combine "Other" with the custom reason
                    finalReason = `Other: ${otherText}`;
                    // Clear any previous errors
                    otherReasonText.classList.remove('error');
                    otherReasonError.style.display = 'none';
                }
            }

            // Clear any previous errors
            reasonSelect.classList.remove('error');
            errorMessage.style.display = 'none';

            // Disable button and show loading
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

            try {
                if (currentAction === 'cancelItem') {
                    await processCancelItem(currentOrderId, currentItemId, finalReason);
                } else if (currentAction === 'returnItem') {
                    await processReturnItem(currentOrderId, currentItemId, finalReason);
                } else if (currentAction === 'cancelAllItems') {
                    await processCancelAllItems(currentOrderId, finalReason);
                } else if (currentAction === 'returnAllItems') {
                    await processReturnAllItems(currentOrderId, finalReason);
                }

                closeActionModal();
            } catch (error) {
                console.error('Error processing action:', error);
                showToast('An error occurred while processing the request', 'error');
            } finally {
                // Reset button
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = '<i class="fas fa-check"></i> Submit Request';
            }
        }

        // Helper function to process return all items
        async function processReturnAllItems(orderId, returnReason) {
            try {
                const response = await fetch('/orders/return-all-items', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        returnReason: returnReason
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Return request submitted for all items. Awaiting admin approval.', 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Failed to submit return request', 'error');
                }
            } catch (error) {
                console.error('Error submitting return all items request:', error);
                showToast('An error occurred while submitting the return request', 'error');
            }
        }

        // Helper function to process cancel item
        async function processCancelItem(orderId, itemId, cancellationReason) {
            try {
                const response = await fetch('/orders/cancel-item', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        itemId: itemId,
                        cancellationReason: cancellationReason
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Product cancelled.', 'success');
                    // Update the item's status in the DOM immediately
                    const itemCards = document.querySelectorAll('.item');
                    itemCards.forEach(card => {
                        if (card.innerHTML.includes(itemId)) {
                            const statusSpan = card.querySelector('.item-status');
                            if (statusSpan) {
                                statusSpan.textContent = 'Cancelled';
                                statusSpan.className = 'item-status cancelled';
                            }
                            
                            // Hide the cancel button since item is now cancelled
                            const cancelButton = card.querySelector('.btn-cancel-item');
                            if (cancelButton) {
                                cancelButton.style.display = 'none';
                            }
                            
                            // Also hide the entire item-actions div if no buttons are left
                            const itemActions = card.querySelector('.item-actions');
                            if (itemActions) {
                                const visibleButtons = itemActions.querySelectorAll('button:not([style*="display: none"])');
                                if (visibleButtons.length === 0) {
                                    itemActions.style.display = 'none';
                                }
                            }
                        }
                    });
                    
                    // Update the payment section with recalculated totals
                    await updatePaymentSection(orderId);
                } else {
                    showToast(result.message || 'Failed to submit cancel request', 'error');
                }
            } catch (error) {
                console.error('Error submitting cancel request:', error);
                showToast('An error occurred while submitting the cancel request', 'error');
            }
        }

        // Helper function to process return item
        async function processReturnItem(orderId, itemId, returnReason) {
            try {
                const response = await fetch('/orders/return-item', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        itemId: itemId,
                        returnReason: returnReason
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Return request submitted successfully. Awaiting admin approval.', 'success');
                    
                    // Update the item's status in the DOM immediately
                    const itemCards = document.querySelectorAll('.item');
                    itemCards.forEach(card => {
                        if (card.innerHTML.includes(itemId)) {
                            const statusSpan = card.querySelector('.item-status');
                            if (statusSpan) {
                                statusSpan.textContent = 'Return Request';
                                statusSpan.className = 'item-status return-request';
                            }
                            
                            // Hide the return button since item is now in return request
                            const returnButton = card.querySelector('.btn-return-item');
                            if (returnButton) {
                                returnButton.style.display = 'none';
                            }
                            
                            // Also hide the entire item-actions div if no buttons are left
                            const itemActions = card.querySelector('.item-actions');
                            if (itemActions) {
                                const visibleButtons = itemActions.querySelectorAll('button:not([style*="display: none"])');
                                if (visibleButtons.length === 0) {
                                    itemActions.style.display = 'none';
                                }
                            }
                        }
                    });
                } else {
                    showToast(result.message || 'Failed to submit return request', 'error');
                }
            } catch (error) {
                console.error('Error submitting return request:', error);
                showToast('An error occurred while submitting the return request', 'error');
            }
        }

        // Helper function to process cancel all items
        async function processCancelAllItems(orderId, cancellationReason) {
            try {
                const response = await fetch('/orders/cancel-all-items', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        cancellationReason: cancellationReason
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Product Cancelled', 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Failed to submit cancel request', 'error');
                }
            } catch (error) {
                console.error('Error submitting cancel all request:', error);
                showToast('An error occurred while submitting the cancel request', 'error');
            }
        }

        // Close modal when clicking outside
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('actionModal');
            if (event.target === modal) {
                closeActionModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeActionModal();
            }
        });

        // Handle "Other" option selection
        document.addEventListener('DOMContentLoaded', function() {
            const actionReason = document.getElementById('actionReason');
            const otherReasonContainer = document.getElementById('otherReasonContainer');
            const otherReasonText = document.getElementById('otherReasonText');
            const otherReasonError = document.getElementById('otherReasonError');

            if (actionReason) {
                actionReason.addEventListener('change', function() {
                    if (this.value === 'Other') {
                        otherReasonContainer.style.display = 'block';
                        // Focus on the text area after a short delay to ensure it's visible
                        setTimeout(() => {
                            otherReasonText.focus();
                        }, 100);
                    } else {
                        otherReasonContainer.style.display = 'none';
                        otherReasonText.value = '';
                        otherReasonText.classList.remove('error');
                        otherReasonError.style.display = 'none';
                    }
                });
            }
        });

        // Retry payment functionality for order details page
        const retryPaymentBtn = document.getElementById('retryPaymentBtn');
        if (retryPaymentBtn) {
            retryPaymentBtn.addEventListener('click', async function() {
                try {
                    this.disabled = true;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

                    // Get retry payment order details
                    const response = await fetch('/checkout/retry-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            failedOrderId: '<%= order.orderId %>'
                        })
                    });

                    const result = await response.json();

                    if (!result.success) {
                        throw new Error(result.message || 'Failed to initiate payment');
                    }

                    // Initialize Razorpay directly on this page
                    const options = {
                        key: result.key,
                        amount: result.amount,
                        currency: result.currency,
                        name: '1NOTONE',
                        description: 'Retry Payment for Order #<%= order.orderId %>',
                        order_id: result.orderId,
                        handler: async function(response) {
                            try {
                                // Verify payment
                                const verifyResponse = await fetch('/checkout/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature,
                                        addressId: result.addressId
                                    })
                                });

                                const verifyResult = await verifyResponse.json();

                                if (verifyResult.success) {
                                    console.log('Payment verified successfully, redirecting to:', verifyResult.redirectUrl);
                                    // Show success message and redirect
                                    showToast('Payment successful! Redirecting...', 'success');
                                    setTimeout(() => {
                                        if (verifyResult.redirectUrl) {
                                            window.location.href = verifyResult.redirectUrl;
                                        } else {
                                            console.error('No redirect URL provided in response');
                                            window.location.href = `/checkout/payment-success/${verifyResult.orderId}`;
                                        }
                                    }, 1500);
                                } else {
                                    console.error('Payment verification failed:', verifyResult.message);
                                    throw new Error(verifyResult.message || 'Payment verification failed');
                                }
                            } catch (error) {
                                console.error('Payment verification error:', error);
                                showToast('Payment verification failed. Please contact support.', 'error');
                                retryPaymentBtn.disabled = false;
                                retryPaymentBtn.innerHTML = '<i class="fas fa-redo"></i> Retry Payment';
                            }
                        },
                        modal: {
                            ondismiss: function() {
                                // Re-enable button when modal is dismissed
                                retryPaymentBtn.disabled = false;
                                retryPaymentBtn.innerHTML = '<i class="fas fa-redo"></i> Retry Payment';
                            }
                        },
                        theme: {
                            color: '#667eea'
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function(response) {
                        console.error('Payment failed:', response.error);
                        showToast('Payment failed: ' + (response.error.description || 'Unknown error'), 'error');
                        retryPaymentBtn.disabled = false;
                        retryPaymentBtn.innerHTML = '<i class="fas fa-redo"></i> Retry Payment';
                    });

                    rzp.open();

                } catch (error) {
                    console.error('Error initiating retry payment:', error);
                    showToast(error.message || 'Failed to initiate payment. Please try again.', 'error');
                    this.disabled = false;
                    this.innerHTML = '<i class="fas fa-redo"></i> Retry Payment';
                }
            });
        }
    </script>

    <!-- Show messages if any -->
    <% if (typeof success !== 'undefined' && success) { %>
        <script>
            showToast('<%= success %>', 'success');
        </script>
    <% } %>

    <% if (typeof error !== 'undefined' && error) { %>
        <script>
            showToast('<%= error %>', 'error');
        </script>
    <% } %>

    <!-- Custom Cancel/Return Modal -->
    <div id="actionModal" class="custom-modal">
        <div class="modal-content">
            <div class="modal-header">
                <button class="modal-close" onclick="closeActionModal()">&times;</button>
                <div class="modal-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h3 id="modalTitle">Cancel Item</h3>
            </div>
            <div class="modal-body">
                <p class="modal-text" id="modalText">
                    Are you sure you want to cancel this item?
                </p>
                <div class="form-group">
                    <label for="actionReason" class="form-label">
                        <i class="fas fa-clipboard-list"></i>
                        <span id="reasonLabel">Reason for cancellation (required)</span>
                    </label>
                    <select id="actionReason" class="form-select">
                        <option value="">-- Select a reason --</option>
                        <!-- Options will be populated dynamically -->
                    </select>
                    <div class="error-message" id="reasonError">
                        Please select a reason
                    </div>
                    
                    <!-- Other reason text area (hidden by default) -->
                    <div id="otherReasonContainer" class="other-reason-container" style="display: none;">
                        <label for="otherReasonText" class="form-label">
                            <i class="fas fa-edit"></i>
                            Please specify your reason for choosing 'Other'
                        </label>
                        <textarea id="otherReasonText" class="form-textarea" 
                                  placeholder="Please provide a detailed reason for your choice..."
                                  rows="4"></textarea>
                        <div class="error-message" id="otherReasonError">
                            Please specify your reason
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-modal btn-cancel-modal" onclick="closeActionModal()">
                    <i class="fas fa-times"></i>
                    <span id="keepButtonText">Keep Item(s)</span>
                </button>
                <button class="btn-modal btn-confirm" id="confirmActionBtn" onclick="confirmAction()">
                    <i class="fas fa-check"></i>
                    Submit Request
                </button>
            </div>
        </div>
    </div>

    <style>
        /* Custom Modal Styles */
        .custom-modal {
            display: none;
            position: fixed;
            z-index: 10000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(3px);
            animation: fadeIn 0.3s ease;
        }

        .custom-modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 16px;
            padding: 0;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease;
            overflow: hidden;
        }

        .modal-header {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
            padding: 1.5rem;
            text-align: center;
            position: relative;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 1.4rem;
            font-weight: 600;
        }

        .modal-header .modal-icon {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            opacity: 0.9;
        }

        .modal-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }

        .modal-close:hover {
            opacity: 1;
        }

        .modal-body {
            padding: 2rem;
        }

        .modal-text {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #495057;
            font-size: 1rem;
            line-height: 1.5;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #495057;
            font-size: 0.95rem;
        }

        .form-select {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            background: white;
            transition: all 0.3s ease;
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }

        .form-select:focus {
            outline: none;
            border-color: #dc3545;
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
        }

        .form-select.error {
            border-color: #dc3545;
            background-color: #fff5f5;
        }

        .error-message {
            color: #dc3545;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
        }

        .modal-footer {
            padding: 1.5rem 2rem;
            background: #f8f9fa;
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        .btn-modal {
            padding: 0.7rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 100px;
        }

        .btn-cancel-modal {
            background: #6c757d;
            color: white;
        }

        .btn-cancel-modal:hover {
            background: #5a6268;
            transform: translateY(-1px);
        }

        .btn-confirm {
            background: #dc3545;
            color: white;
        }

        .btn-confirm:hover {
            background: #c82333;
            transform: translateY(-1px);
        }

        .btn-confirm:disabled {
            background: #adb5bd;
            cursor: not-allowed;
            transform: none;
        }

        /* Other reason container styles */
        .other-reason-container {
            margin-top: 1rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .form-textarea {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            background: white;
            transition: all 0.3s ease;
            resize: vertical;
            min-height: 100px;
            font-family: inherit;
        }

        .form-textarea:focus {
            outline: none;
            border-color: #dc3545;
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
        }

        .form-textarea.error {
            border-color: #dc3545;
            background-color: #fff5f5;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
    </style>

</body>
</html>

<script>
// Function to update payment section with recalculated totals
async function updatePaymentSection(orderId) {
    try {
        const response = await fetch(`/orders/get-updated-totals/${orderId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const result = await response.json();

        if (result.success) {
            // Update the order summary section
            const summaryRows = document.querySelectorAll('.summary-row');
            
            // Update subtotal
            const subtotalRow = summaryRows[0];
            if (subtotalRow) {
                const subtotalValue = subtotalRow.querySelector('.summary-value');
                if (subtotalValue) {
                    subtotalValue.textContent = `₹${Math.round(result.totals.subtotal).toLocaleString()}`;
                }
            }

            // Update coupon discount
            const discountRow = summaryRows[2]; // Third row is discount
            if (discountRow) {
                const discountValue = discountRow.querySelector('.summary-value');
                const discountLabel = discountRow.querySelector('.summary-label');
                if (discountValue && discountLabel) {
                    if (result.totals.couponDiscount > 0) {
                        discountValue.textContent = `-₹${result.totals.couponDiscount.toLocaleString()}`;
                        discountValue.style.color = '#28a745';
                        if (result.totals.couponCode) {
                            discountLabel.innerHTML = `Coupon Discount (${result.totals.couponCode})`;
                        } else {
                            discountLabel.textContent = 'Coupon Discount';
                        }
                    } else {
                        discountValue.textContent = '0';
                        discountValue.style.color = '';
                        discountLabel.textContent = 'Discount';
                    }
                }
            }

            // Update total
            const totalRow = summaryRows[3]; // Fourth row is total
            if (totalRow) {
                const totalValue = totalRow.querySelector('.summary-value');
                if (totalValue) {
                    totalValue.textContent = `₹${Math.round(result.totals.finalAmount).toLocaleString()}`;
                }
            }

            // Update the total amount in the order header
            const headerTotalValue = document.querySelector('.order-info-grid .info-card:last-child .info-value');
            if (headerTotalValue) {
                headerTotalValue.textContent = `₹${Math.round(result.totals.finalAmount).toLocaleString()}`;
            }

            console.log('Payment section updated successfully');
        } else {
            console.error('Failed to get updated totals:', result.message);
        }
    } catch (error) {
        console.error('Error updating payment section:', error);
    }
}
</script>
