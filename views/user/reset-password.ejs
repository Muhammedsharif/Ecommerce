<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password - 1NOTONE</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .content-main {
            width: 100%;
            max-width: 1200px;
            margin: auto;
            padding: 80px 0;
        }

        .card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
        }

        .card-login {
            max-width: 450px;
            margin: 0 auto;
        }

        .card-body {
            padding: 50px 40px;
            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
        }

        .card-title {
            font-size: 2rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 2rem;
            text-align: center;
            position: relative;
        }

        .card-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            border-radius: 2px;
        }

        .mb-3 {
            margin-bottom: 1.5rem;
        }

        .mb-4 {
            margin-bottom: 2rem;
        }

        .mt-4 {
            margin-top: 1.5rem;
        }

        .position-relative {
            position: relative;
        }

        .form-control {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 500;
            color: #1f2937;
            background: white;
            transition: all 0.3s ease;
            outline: none;
        }

        .form-control:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            transform: translateY(-2px);
        }

        .form-control:hover {
            border-color: #9ca3af;
        }

        .form-control::placeholder {
            color: #9ca3af;
            font-weight: 400;
        }

        .btn {
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            padding: 16px 24px;
            box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
        }

        .btn-primary:active {
            transform: translateY(0);
            box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        }

        .w-100 {
            width: 100%;
        }

        .text-center {
            text-align: center;
        }

        .text-danger {
            color: #dc2626;
            font-size: 0.875rem;
            font-weight: 500;
            position: absolute;
            bottom: -20px;
            left: 0;
            right: 0;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-5px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .alert {
            padding: 16px 20px;
            border-radius: 12px;
            font-size: 0.95rem;
            font-weight: 500;
            margin-bottom: 0;
            animation: slideIn 0.3s ease;
        }

        .alert-danger {
            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
            color: #dc2626;
            border: 1px solid #f87171;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .signup-link {
            color: #6b7280;
            font-size: 0.95rem;
            margin-top: 1.5rem;
        }

        .signup-link a {
            color: #3b82f6;
            text-decoration: none;
            font-weight: 600;
            transition: color 0.3s ease;
        }

        .signup-link a:hover {
            color: #1d4ed8;
            text-decoration: underline;
        }

        /* Password strength indicator */
        .password-strength {
            margin-top: 8px;
            height: 4px;
            background: #e5e7eb;
            border-radius: 2px;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .password-strength-fill {
            height: 100%;
            width: 0%;
            transition: all 0.3s ease;
            border-radius: 2px;
        }

        .strength-weak {
            background: #ef4444;
            width: 33%;
        }

        .strength-medium {
            background: #f59e0b;
            width: 66%;
        }

        .strength-strong {
            background: #10b981;
            width: 100%;
        }

        /* Input validation states */
        .form-control.is-valid {
            border-color: #10b981;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2310b981' d='m2.3 6.73.94-.94 2.94 2.94L8.5 6.4l.94.94L6.5 10.3z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 16px 16px;
        }

        .form-control.is-invalid {
            border-color: #ef4444;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23ef4444'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.5 5.5 2.5 2.5m0-2.5-2.5 2.5'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 16px 16px;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .content-main {
                padding: 40px 0;
            }
            
            .card-body {
                padding: 40px 30px;
            }
            
            .card-title {
                font-size: 1.75rem;
            }
            
            body {
                padding: 15px;
            }
        }

        @media (max-width: 480px) {
            .card-body {
                padding: 30px 20px;
            }
            
            .form-control {
                padding: 14px 16px;
            }
            
            .btn-primary {
                padding: 14px 20px;
            }
        }

        /* Loading state */
        .btn-loading {
            position: relative;
            color: transparent;
        }

        .btn-loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin-left: -10px;
            margin-top: -10px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Focus styles for accessibility */
        .form-control:focus-visible,
        .btn:focus-visible,
        a:focus-visible {
            outline: 2px solid #3b82f6;
            outline-offset: 2px;
        }
    </style>
</head>
<body>
    <section class="content-main">
        <div class="card mx-auto card-login">
            <div class="card-body">
                <h4 class="card-title">Change Password</h4>
                <form method="post" action="/reset-password" onsubmit="return validateForm()">
                    <div class="mb-3 position-relative">
                        <input class="form-control" name="newPass1" id="newPass1" placeholder="Enter new password" type="password" required>
                        <div class="password-strength">
                            <div class="password-strength-fill" id="strengthFill"></div>
                        </div>
                        <div id="newPass1Error" class="text-danger"></div>
                    </div>
                    <div class="mb-3 position-relative">
                        <input class="form-control" name="newPass2" id="newPass2" placeholder="Re-enter new password" type="password" required>
                        <div id="newPass2Error" class="text-danger"></div>
                    </div>
                    <div class="mb-4">
                        <button type="submit" class="btn btn-primary w-100" id="submitBtn">Change Password</button>
                    </div>
                    <!-- Simulating server message for demo -->
                    <div id="alertMessage" class="alert alert-danger text-center" style="display: none;">
                        Server message would appear here
                    </div>
                </form>
                <p class="text-center signup-link">Don't have an account? <a href="/auth/signup">Sign up</a></p>
            </div>
        </div>
    </section>

    <script>
        function calculatePasswordStrength(password) {
            let score = 0;
            if (password.length >= 6) score += 1;
            if (password.length >= 10) score += 1;
            if (/[a-z]/.test(password)) score += 1;
            if (/[A-Z]/.test(password)) score += 1;
            if (/[0-9]/.test(password)) score += 1;
            if (/[^A-Za-z0-9]/.test(password)) score += 1;
            return score;
        }

        function updatePasswordStrength(password) {
            const strengthFill = document.getElementById('strengthFill');
            const score = calculatePasswordStrength(password);
            
            strengthFill.className = 'password-strength-fill';
            
            if (score <= 2) {
                strengthFill.classList.add('strength-weak');
            } else if (score <= 4) {
                strengthFill.classList.add('strength-medium');
            } else {
                strengthFill.classList.add('strength-strong');
            }
        }

        function validateForm() {
            let valid = true;
            const newPass1 = document.getElementById('newPass1');
            const newPass2 = document.getElementById('newPass2');
            const newPass1Error = document.getElementById('newPass1Error');
            const newPass2Error = document.getElementById('newPass2Error');
            const submitBtn = document.getElementById('submitBtn');

            // Clear previous errors and validation classes
            newPass1Error.textContent = '';
            newPass2Error.textContent = '';
            newPass1.classList.remove('is-valid', 'is-invalid');
            newPass2.classList.remove('is-valid', 'is-invalid');

            // Validate first password
            if (!newPass1.value.trim()) {
                newPass1Error.textContent = 'Password cannot be empty.';
                newPass1.classList.add('is-invalid');
                valid = false;
            } else if (newPass1.value.length < 8) {
                newPass1Error.textContent = 'Password must be at least 8 characters long.';
                newPass1.classList.add('is-invalid');
                valid = false;
            }else {
                newPass1.classList.add('is-valid');
            }

            // Validate second password
            if (!newPass2.value.trim()) {
                newPass2Error.textContent = 'Please re-enter your password.';
                newPass2.classList.add('is-invalid');
                valid = false;
            } else if (newPass2.value !== newPass1.value) {
                newPass2Error.textContent = 'Passwords do not match.';
                newPass2.classList.add('is-invalid');
                valid = false;
            } else if (newPass1.value.trim()) {
                newPass2.classList.add('is-valid');
            }

            // Add loading state if form is valid
            if (valid) {
                submitBtn.classList.add('btn-loading');
                submitBtn.disabled = true;
                
                // Remove loading state after 3 seconds (simulating server response)
                setTimeout(() => {
                    submitBtn.classList.remove('btn-loading');
                    submitBtn.disabled = false;
                }, 3000);
            }

            return valid;
        }

        // Real-time password strength indicator
        document.getElementById('newPass1').addEventListener('input', function() {
            updatePasswordStrength(this.value);
        });

        // Real-time validation for better UX
        document.getElementById('newPass1').addEventListener('blur', function() {
            const newPass1Error = document.getElementById('newPass1Error');
            
            if (!this.value.trim()) {
                this.classList.add('is-invalid');
                newPass1Error.textContent = 'Password cannot be empty.';
            } else if (this.value.length < 6) {
                this.classList.add('is-invalid');
                newPass1Error.textContent = 'Password must be at least 6 characters long.';
            } else {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
                newPass1Error.textContent = '';
            }
        });

        document.getElementById('newPass2').addEventListener('blur', function() {
            const newPass1 = document.getElementById('newPass1');
            const newPass2Error = document.getElementById('newPass2Error');
            
            if (!this.value.trim()) {
                this.classList.add('is-invalid');
                newPass2Error.textContent = 'Please re-enter your password.';
            } else if (this.value !== newPass1.value) {
                this.classList.add('is-invalid');
                newPass2Error.textContent = 'Passwords do not match.';
            } else {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
                newPass2Error.textContent = '';
            }
        });

        // Clear validation states when user starts typing
        document.getElementById('newPass1').addEventListener('input', function() {
            if (this.classList.contains('is-invalid')) {
                this.classList.remove('is-invalid');
                document.getElementById('newPass1Error').textContent = '';
            }
        });

        document.getElementById('newPass2').addEventListener('input', function() {
            if (this.classList.contains('is-invalid')) {
                this.classList.remove('is-invalid');
                document.getElementById('newPass2Error').textContent = '';
            }
        });
    </script>
</body>
</html>