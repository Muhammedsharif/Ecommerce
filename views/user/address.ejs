<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <title>My Addresses - 1NOTONE</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        .container {
            display: flex;
            max-width: 1400px;
            margin: 0 auto;
            gap: 2rem;
            padding: 2rem;
        }

        .main-content {
            flex: 1;
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .page-header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #e9ecef;
        }

        .page-title {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .page-subtitle {
            color: #666;
            font-size: 1rem;
        }

        .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .add-address-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .add-address-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            color: white;
            text-decoration: none;
        }

        .addresses-container {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 1.5rem;
        }

        .address-item {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 1rem;
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .address-item:hover {
            border-color: #667eea;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .address-item:last-child {
            margin-bottom: 0;
        }

        .address-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
        }

        .address-type {
            display: flex;
            align-items: center;
            gap: 6px;
            font-weight: 600;
            font-size: 12px;
            color: #ffffff;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 20px;
            padding: 4px 12px;
        }

        .default-badge {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .badge-icon {
            font-size: 10px;
        }

        .badge-text {
            font-size: 11px;
        }

        .address-name {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }

        .address-details {
            color: #6c757d;
            line-height: 1.6;
            margin-bottom: 12px;
        }

        .address-phone {
            color: #667eea;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px;
        }

        .phone-icon {
            width: 16px;
            height: 16px;
            fill: #667eea;
        }

        .address-actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            border: 1px solid;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
            text-decoration: none;
        }

        .btn-edit {
            background: white;
            color: #667eea;
            border-color: #667eea;
        }

        .btn-edit:hover {
            background: #667eea;
            color: white;
            transform: translateY(-1px);
            text-decoration: none;
        }

        .btn-default {
            background: white;
            color: #28a745;
            border-color: #28a745;
        }

        .btn-default:hover {
            background: #28a745;
            color: white;
            transform: translateY(-1px);
        }

        .btn-delete {
            background: white;
            color: #dc3545;
            border-color: #dc3545;
        }

        .btn-delete:hover {
            background: #dc3545;
            color: white;
            transform: translateY(-1px);
        }

        .btn-icon {
            width: 14px;
            height: 14px;
            fill: currentColor;
        }

        .empty-state {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 40vh;
            text-align: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .empty-state-content {
            max-width: 400px;
        }

        .empty-state-icon {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0 auto 20px auto;
            font-size: 30px;
        }

        .empty-state h2 {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 10px;
            color: #333;
        }

        .empty-state p {
            color: #6c757d;
            margin-bottom: 20px;
            font-size: 16px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #5a67d8, #6b46c1);
            color: white;
            text-decoration: none;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            backdrop-filter: blur(4px);
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            max-width: 400px;
            width: 90%;
            text-align: center;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 12px;
            color: #333;
        }

        .modal-text {
            color: #6c757d;
            margin-bottom: 24px;
            line-height: 1.5;
        }

        .modal-actions {
            display: flex;
            gap: 12px;
            justify-content: center;
        }

        .success-icon {
            display: flex;
            justify-content: center;
            margin-bottom: 16px;
        }

        .success-icon svg {
            animation: checkmark 0.6s ease-in-out;
        }

        @keyframes checkmark {
            0% {
                transform: scale(0);
                opacity: 0;
            }
            50% {
                transform: scale(1.2);
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28a745;
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 1001;
        }

        .toast.show {
            transform: translateX(0);
        }

        /* Profile Hamburger Button for Profile Pages */
        .profile-hamburger {
            position: fixed;
            top: 65px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            font-size: 18px;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
            z-index: 999;
            display: none;
        }

        .profile-hamburger:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .profile-hamburger:active {
            transform: scale(0.95);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                padding: 1rem;
            }

            .sidebar {
                display: none;
            }

            .header-actions {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .add-address-btn {
                width: 100%;
                justify-content: center;
            }

            .address-actions {
                flex-direction: column;
            }

            .btn {
                justify-content: center;
                width: 100%;
            }

            .profile-hamburger {
                display: block;
            }
        }

        @media (max-width: 480px) {
            .addresses-container {
                padding: 1rem;
            }

            .address-item {
                padding: 1rem;
            }

            .page-title {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <%- include("../partials/user/header") %> 

    <!-- Profile Hamburger Button for Mobile -->
    <button class="profile-hamburger" onclick="openProfileSidebar(event)" title="Profile Menu">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Breadcrumb Navigation -->
    <%- include("../partials/user/breadcrumb", {
        breadcrumbs: [
            { name: "My Account", url: "/profile" },
            { name: "My Address", url: "/address" }
        ]
    }) %>

    <div class="container">
        <%- include("../partials/user/profilesidebar") %>
        
        <main class="main-content">
            <div class="page-header">
                <h1 class="page-title">
                    <i class="fas fa-map-marker-alt"></i>
                    My Addresses
                </h1>
                <p class="page-subtitle">Manage your delivery locations</p>
            </div>

            <div class="header-actions">
                <div>
                    <h3 style="color: #333; margin: 0;">Saved Addresses</h3>
                    <p style="color: #6c757d; margin: 0; font-size: 14px;">Choose from your saved delivery locations</p>
                </div>
                <a href="/address/add" class="add-address-btn">
                    <i class="fas fa-plus"></i>
                    Add New Address
                </a>
            </div>

            <div class="addresses-container" id="addressesContainer">
                <% if(addresses.length > 0) { %>
                    <% addresses.forEach((address) => { %>
                        <div class="address-item">
                            <div class="address-header">
                                <div class="address-type">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <%= address.addressType %>
                                </div>
                                <% if (address.isDefault) { %>
                                    <div class="default-badge">
                                        <span class="badge-icon"><i class="fas fa-check"></i></span>
                                        <span class="badge-text">Default</span>
                                    </div>
                                <% } %>
                            </div>
                            
                            <div class="address-name"><%= address.name %></div>
                            
                            <div class="address-details">
                                <%= address.city %><br>
                                <%= address.landmark %><br>
                                <%= address.state %> - <%= address.pincode %><br>
                            </div>
                            
                            <div class="address-phone">
                                <svg class="phone-icon" viewBox="0 0 24 24">
                                    <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                                </svg>
                                <%= address.phone %>
                            </div>
                            
                            <div class="address-actions">
                                <% if (!address.isDefault) { %>
                                    <button class="btn btn-default" onclick="setDefaultAddress('<%= address._id %>', '<%= address.name %>')">
                                        <svg class="btn-icon" viewBox="0 0 24 24">
                                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                        </svg>
                                        Set as Default
                                    </button>
                                <% } %>
                                <a href="/address/edit?id=<%= address._id %>" class="btn btn-edit">
                                    <svg class="btn-icon" viewBox="0 0 24 24">
                                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                                    </svg>
                                    Edit
                                </a>
                                <button class="btn btn-delete" data-address-id="<%= address._id %>" data-address-name="<%= address.name %>">
                                    <svg class="btn-icon" viewBox="0 0 24 24">
                                        <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                                    </svg>
                                    Delete
                                </button>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="empty-state">
                        <div class="empty-state-content">
                            <div class="empty-state-icon">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <h2>No addresses found</h2>
                            <p>You haven't added any delivery locations to your account yet.</p>
                            <a href="/address/add" class="btn-primary">
                                <i class="fas fa-plus"></i> Add Your First Address
                            </a>
                        </div>
                    </div>
                <% } %>
            </div>
        </main>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content">
            <h3 class="modal-title">Delete Address</h3>
            <p class="modal-text">Are you sure you want to delete this address? This action cannot be undone.</p>
            <div class="modal-actions">
                <button class="btn btn-edit" onclick="closeModal('deleteModal')">Cancel</button>
                <button class="btn btn-delete" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div class="modal" id="successModal">
        <div class="modal-content">
            <div class="success-icon">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#28a745" stroke-width="2">
                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                    <polyline points="22,4 12,14.01 9,11.01"></polyline>
                </svg>
            </div>
            <h3 class="modal-title" id="successTitle">Success!</h3>
            <p class="modal-text" id="successMessage">Operation completed successfully.</p>
            <div class="modal-actions">
                <button class="btn btn-primary" onclick="closeModal('successModal')">OK</button>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast"></div>

    <script>
        let addressToDelete = null;

        function deleteAddress(id, name) {
            addressToDelete = { id, name };
            const modal = document.getElementById('deleteModal');
            if (modal) {
                modal.classList.add('active');
            } else {
                console.error('Delete modal not found!');
                if (confirm(`Are you sure you want to delete the address for ${name}?`)) {
                    confirmDelete();
                }
            }
        }

        async function confirmDelete() {
            if (addressToDelete) {
                try {
                    console.log('Deleting address:', addressToDelete);

                    const response = await fetch(`/address/delete?id=${addressToDelete.id}`, {
                        method: 'GET'
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();

                    if (data.success) {
                        showToast(`Address for ${addressToDelete.name} has been deleted.`, 'success');
                        closeModal('deleteModal');
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    } else {
                        showToast(data.message || 'Failed to delete address', 'error');
                        closeModal('deleteModal');
                    }
                } catch (error) {
                    console.error('Error deleting address:', error);
                    showToast('An error occurred while deleting address', 'error');
                    closeModal('deleteModal');
                }
            }
        }

        async function setDefaultAddress(addressId, name) {
            try {
                const response = await fetch('/address/set-default', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ addressId: addressId })
                });

                const data = await response.json();

                if (data.success) {
                    showToast(`${name}'s address set as default.`, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showToast(data.message || 'Failed to set default address', 'error');
                }
            } catch (error) {
                console.error('Error setting default address:', error);
                showToast('An error occurred while setting default address', 'error');
            }
        }

        function closeModal(modalId = 'deleteModal') {
            document.getElementById(modalId).classList.remove('active');
            if (modalId === 'deleteModal') {
                addressToDelete = null;
            }
        }

        function showSuccessModal(title, message) {
            document.getElementById('successTitle').textContent = title;
            document.getElementById('successMessage').textContent = message;
            document.getElementById('successModal').classList.add('active');
        }

        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            if (toast) {
                toast.textContent = message;
                toast.className = `toast show ${type}`;
                toast.style.background = '#000000';
                toast.style.color = '#ffffff';

                setTimeout(() => {
                    toast.classList.remove('show');
                }, 3000);
            } else {
                showSimpleToast(message, type);
            }
        }

        function showSimpleToast(message, type = 'success') {
            const existingToast = document.querySelector('.simple-toast');
            if (existingToast) {
                existingToast.remove();
            }

            const toast = document.createElement('div');
            toast.className = 'simple-toast';
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #000000;
                color: #ffffff;
                padding: 15px 20px;
                border-radius: 8px;
                z-index: 999999;
                font-family: Arial, sans-serif;
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                max-width: 300px;
                word-wrap: break-word;
                animation: slideIn 0.3s ease;
            `;
            toast.textContent = message;

            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (toast && toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Close modals when clicking outside
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal('deleteModal');
            }
        });

        document.getElementById('successModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal('successModal');
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const deleteModal = document.getElementById('deleteModal');
                const successModal = document.getElementById('successModal');

                if (deleteModal.classList.contains('active')) {
                    closeModal('deleteModal');
                } else if (successModal.classList.contains('active')) {
                    closeModal('successModal');
                }
            }
        });

        // Check for URL parameters and show success messages
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);

            if (urlParams.has('added')) {
                showSuccessModal('Address Added!', 'Your new address has been successfully added.');
                window.history.replaceState({}, document.title, window.location.pathname);
            }

            if (urlParams.has('updated')) {
                showSuccessModal('Address Updated!', 'Your address has been successfully updated.');
                window.history.replaceState({}, document.title, window.location.pathname);
            }

            if (urlParams.has('deleted')) {
                showSuccessModal('Address Deleted!', 'The address has been successfully deleted.');
                window.history.replaceState({}, document.title, window.location.pathname);
            }

            // Add event delegation for delete buttons
            document.addEventListener('click', function(e) {
                if (e.target.closest('.btn-delete[data-address-id]')) {
                    e.preventDefault();
                    e.stopPropagation();

                    const button = e.target.closest('.btn-delete[data-address-id]');
                    const addressId = button.getAttribute('data-address-id');
                    const addressName = button.getAttribute('data-address-name');

                    deleteAddress(addressId, addressName);
                }
            });
        });
    </script>
</body>
</html>